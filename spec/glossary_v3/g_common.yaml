components:
  parameters:
    accountUidPathParameter:
      name: accountUid
      in: path
      schema:
        type: string
      required: true
      description: A unique account identifier. This can be found in the Smartling Dashboard under Account Settings - API.
    glossaryUidPathParameter:
      name: glossaryUid
      in: path
      schema:
        type: string
        format: uuid
      required: true
      description: Unique identifier of the glossary.
    entryUidPathParameter:
      name: entryUid
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Unique identifier of the glossary entry.

  schemas:
    GetGlossaryEntriesByFilterCommandPTO:
      type: object
      properties:
        query:
          type: string
          description: Keyword search for translation of variants.
          example: P&G term
        localeIds:
          type: array
          description: Locales list for translation filtering.
          items:
            type: string
          example:
            application/json:
              {["uk-UA","en","en-US"]}
        entryUids:
          type: array
          description: Glossary entry uids filter.
          uniqueItems: true
          items:
            type: string
          example:
            application/json:
              {["16ed66cc-accc-4bb5-9822-bc84e93429f8", "69dae398-96c2-45f6-9f0d-91470c3464bd"]}
        entryState:
          required: true
          type: string
          description: State of the glossary entry.
          enum:
            - ACTIVE
            - ARCHIVED
            - BOTH
          example: BOTH
        missingTranslationLocaleId:
          type: string
          description: Additional locale id filter, which allow to find missing/empty translations.
          example: uk-UA
        presentTranslationLocaleId:
          type: string
          description: Additional locale id filter, which allow to find only present  translations.
          example: uk-UA
        dntLocaleId:
          type: string
          description: Additional locale id filter, which allow to find only DNT-marked translations.
          example: uk-UA
        returnFallbackTranslations:
          type: boolean
          description: For all translations, if they are missing, appropriate fallback locales will be used.
          example: false
        labels:
          description: Labels filter.
          $ref: '#/components/schemas/FilterByLabelsPTO'
          example:
            application/json:
              {"type":"any"}
        dntTermSet:
          type: boolean
          description: Return entries where dnt term is set.
          example: false
        created:
          description: Created date filter.
          $ref: '#/components/schemas/AuditionDateCommandPTO'
          example:
            application/json:
              { "type": "before", "date":"2023-02-01T11:45:00.000Z" }
        lastModified:
          description: Modified date filter.
          $ref: '#/components/schemas/AuditionDateCommandPTO'
          example:
            application/json:
              { "type": "after", "date": "2023-02-01T11:45:00.000Z" }
        createdBy:
          description: Created by user filter.
          $ref: '#/components/schemas/AuditorCommandPTO'
          example:
            application/json:
              {
                "level": "ANY",
                "userIds": [ "671b520051b2" ]
              }
        lastModifiedBy:
          description: modified by user filter
          $ref: '#/components/schemas/AuditorCommandPTO'
          example:
            application/json:
              {
                "level": "ENTRY",
                "userIds": [ "671b520051b2" ]
              }
        paging:
          description: Paging command.
          $ref: '#/components/schemas/PaginationCommandPTO'
          example:
            application/json:
              "paging": {
                "limit": 50,
                "offset": 0
              }
        sorting:
          description: Sorting command.
          $ref: '#/components/schemas/GlossaryEntriesSortCommandPTO'
          example:
            application/json:
              "sorting": {
                "direction": "DESC",
                "field": "term"
              }
      description: Glossary entries filter command.
      examples:
        application/json:
          {
            "entryState": "BOTH",
            "localeIds": [ "en-US" ],
            "returnFallbackTranslations": false,
            "labels": {
              "type": "associated",
              "labelUids": [ "16ed66cc-accc-4bb5-9822-bc84e93429f8"]
            },
            "lastModifiedBy": {
              "level": "ANY",
              "userIds": [ "671b520051b2" ]
            },
            "created": {
              "type":"before",
              "date": "2023-02-01T11:45:00.000Z"
            },
            "paging": {
              "limit": 200,
              "offset": 0
            },
            "sorting": {
              "direction": "ASC",
              "field": "term"
            }
          }
    FilterByLabelsPTO:
      type: object
      oneOf:
        - $ref: '#/components/schemas/NoLabelsFilter'
        - $ref: '#/components/schemas/AnyLabelsFilter'
        - $ref: '#/components/schemas/AssociatedLabelsFilter'
      description: >-
        Labels filter on glossary entry level. There are 3 subTypes :
         - empty - this is  'NoLabelsFilter';
         - any - this is 'AnyLabelsFilter';
         - associated - this is 'AssociatedLabelsFilter'.
    NoLabelsFilter:
      type: "object"
      required:
        - type
      properties:
        type:
          type: "string"
          enum:
           - empty
          readOnly: true
      description: >-
        No labels filter / labels are missing filter. Use 'empty' as type property value.
      examples:
        application/json:
          {
            "type": "empty"
          }
    AnyLabelsFilter:
      type: "object"
      required:
        - type
      properties:
        type:
          type: "string"
          enum:
            - any
          readOnly: true
      description: >-
        Any labels filter / labels - present filter. Use 'any' as type property value.
      examples:
        application/json:
          {
            "type": "any"
          }
    AssociatedLabelsFilter:
      type: "object"
      required:
        - type
        - labelUids
      properties:
        type:
          type: "string"
          enum:
            - associated
          readOnly: true
        labelUids:
          type: array
          description: Label uuids collection for the filtering.
          items:
            type: string
            format: uuid
      description: >-
        Associated labels filter. Use 'any' as type property value.
      examples:
        application/json:
          {
            "type": "associated",
            "labelUids": [ "16ed66cc-accc-4bb5-9822-bc84e93429f8" ]
          }
    AuditionDateCommandPTO:
      type: object
      discriminator: type
      properties:
        level:
          required: true
          type: string
          description: Level on which filtering should be performed ( glossary entry / glossary translation ).
          enum:
            - ENTRY
            - LOCALE
            - ANY
        type:
          required: true
          type: string
          readOnly: true
          description: >-
            Possible values :
             - after - see 'AfterDateAuditionDateFilter';
             - before - see 'BeforeDateAuditionDateFilter';
             - date_range - see 'DateRangeAuditionDateFilter';
             - exact - see 'ExactDateAuditionDateFilter'.
      description: Audition date-time filter
    AfterDateAuditionDateFilter:
      allOf:
        - $ref: '#/components/schemas/AuditionDateCommandPTO'
        - type: object
          properties:
            date:
              required: true
              type: string
              description: Date-time value.
              example: '2023-02-01T11:45:00.000Z'
            type:
              required: true
              type: string
              description: after
              readOnly: true
          description: After date filter.
          examples:
            application/json:
              {
                "type":"after",
                "date":"2023-02-01T11:45:00.000Z"
              }
    BeforeDateAuditionDateFilter:
      allOf:
        - $ref: '#/components/schemas/AuditionDateCommandPTO'
        - type: object
          properties:
            date:
              required: true
              type: string
              description: Date-time value.
              example: '2023-02-01T11:45:00.000Z'
            type:
              required: true
              type: string
              description: before
              readOnly: true
          description: Before date filter.
          examples:
            application/json:
              {
                "type": "before",
                "date": "2023-02-01T11:45:00.000Z"
              }
    DateRangeAuditionDateFilter:
      allOf:
        - $ref: '#/components/schemas/AuditionDateCommandPTO'
        - type: object
          properties:
            from:
              required: true
              type: string
              description: From date-time / range start.
              example: '2023-02-01T11:45:00.000Z'
            to:
              required: true
              type: string
              description: To date-time / range end.
              example: '2023-02-11T11:45:00.000Z'
            type:
              required: true
              type: string
              description: date_range
              readOnly: true
          description: Date range filter.
          examples:
            application/json:
              {
                "type": "date_range",
                "from": "2023-02-01T11:45:00.000Z",
                "to": "2023-05-01T13:45:00.000Z"
              }
    ExactDateAuditionDateFilter:
      allOf:
        - $ref: '#/components/schemas/AuditionDateCommandPTO'
        - type: object
          properties:
            date:
              required: true
              type: string
              description: Date-time value.
              example: '2023-02-01T11:45:00.000Z'
            type:
              required: true
              type: string
              description: exact
              readOnly: true
          description: Exact date filter.
          examples:
            application/json:
              {
                "type": "exact",
                "date": "2023-02-01T11:45:00.000Z"
              }
    AuditorCommandPTO:
      type: object
      properties:
        level:
          required: true
          type: string
          description: Level on which filtering should be performed ( glossary entry /  glossary translation / or any).
          enum:
            - ENTRY
            - LOCALE
            - ANY
        userIds:
          required: true
          type: array
          description: User identifiers.
          items:
            type: string
      description: Auditor user filter.
      examples:
        application/json:
          {
            "level":"ANY",
            "userIds":["671b520051b2"]
          }
    PaginationCommandPTO:
      type: object
      properties:
        offset:
          type: integer
          description: Amount of items to skipp.
        limit:
          type: integer
          description: Amount of items to fetch.
    GlossaryEntriesSortCommandPTO:
      type: object
      properties:
        field:
          type: string
          description: Sort field, select one of - term | createdDate | lastModifiedDate,  lastModifiedDate - default field with DESC direction by default.
        direction:
          type: string
          description: Sort direction.
          enum:
            - ASC
            - DESC
        localeId:
          type: string
          description: Locale identifier - for case when 'term' sort field is selected.
      description: Sorting options.
    SuccessResponse:
      properties:
        code:
          description: >-
            Indicates whether the response was successful or what error has occurred.
          enum:
            - SUCCESS
          type: string
      required:
        - code
      type: object
    EmptyResponse:
      type: object
      required:
        - response
      properties:
        response:
          allOf:
            - $ref: '#/components/schemas/SuccessResponse'
            - properties:
                data:
                  description: Always empty.
                  type: object
                  example: {}
              type: object
    AcceptedResponse:
      properties:
        code:
          description: >-
            Indicates whether the response was successful or what error has occurred.
          enum:
            - ACCEPTED
          type: string
      required:
        - code
      type: object
    Error400Response:
      type: object
      properties:
        response:
          properties:
            code:
              description: >-
                Indicates whether the response was successful or what error has occurred.
              enum:
                - VALIDATION_ERROR
              type: string
            errors:
              items:
                $ref: '#/components/schemas/Error'
              type: array
          required:
            - code
            - errors
          type: object
      required:
        - response
    Error401Response:
      properties:
        response:
          properties:
            code:
              description: >-
                Indicates whether the response was successful or what error has occurred.
              enum:
                - AUTHENTICATION_ERROR
                - AUTHORIZATION_ERROR
              type: string
            errors:
              items:
                $ref: '#/components/schemas/Error'
              type: array
          required:
            - code
            - errors
          type: object
      required:
        - response
      type: object
    Error403Response:
      type: object
      properties:
        response:
          properties:
            code:
              description: >-
                Indicates whether the response was successful or what error has occurred.
              enum:
                - ACCESS_DENIED_ERROR
              type: string
            errors:
              items:
                $ref: '#/components/schemas/Error'
              type: array
          required:
            - code
            - errors
          type: object
      required:
        - response
    Error404Response:
      type: object
      properties:
        response:
          properties:
            code:
              description: >-
                Indicates whether the response was successful or what error has occurred.
              enum:
                - NOT_FOUND_ERROR
              type: string
            errors:
              items:
                $ref: '#/components/schemas/Error'
              type: array
          required:
            - code
            - errors
          type: object
      required:
        - response
    Error429Response:
      properties:
        response:
          properties:
            code:
              description: >-
                Indicates whether the response was successful or what error has occurred.
              enum:
                - MAX_OPERATIONS_LIMIT_EXCEEDED
              type: string
            errors:
              items:
                $ref: '#/components/schemas/Error'
              type: array
          required:
            - code
            - errors
          type: object
      required:
        - response
      type: object
    Error500Response:
      properties:
        response:
          properties:
            code:
              description: >-
                Indicates whether the response was successful or what error has occurred.
              enum:
                - GENERAL_ERROR
              type: string
            errors:
              items:
                $ref: '#/components/schemas/Error'
              type: array
          required:
            - code
            - errors
          type: object
      required:
        - response
      type: object

  responses:
    Error400ResponseDefinition:
      description: Provided request parameters are invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error400Response'
          examples:
            response:
              value:
                response:
                  code: VALIDATION_ERROR
                  errors:
                    key: name.is.not.unique
                    message: >-
                      glossary with name 'test' already present in scope of account 'test'
    Error401ResponseDefinition:
      description: Provided credentials are not valid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error401Response'
          examples:
            response:
              value:
                response:
                  code: AUTHENTICATION_ERROR
                  errors:
                    details: { }
                    key: invalid_token
                    message: Invalid token
    Error403ResponseDefinition:
      description: Access denied.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error403Response'
          examples:
            response:
              value:
                response:
                  code: ACCESS_DENIED_ERROR
                  errors:
                    key: no.access
                    message: >-
                      no rights                 
    Error404ResponseDefinition:
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error404Response'
          examples:
            response:
              value:
                response:
                  code: NOT_FOUND_ERROR
                  errors:
                    key: not.found
                    message: >-
                      glossary 'uid' not found                      
    Error429ResponseDefinition:
      description: Too many simultaneous API requests.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error429Response'
          examples:
            response:
              value:
                response:
                  code: MAX_OPERATIONS_LIMIT_EXCEEDED
                  errors:
                    key: too.many.requests
                    message: >-
                      Limitation message
    Error500ResponseDefinition:
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error500Response'