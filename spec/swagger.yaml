swagger: '2.0'
schemes:
  - https
host: api.smartling.com
basePath: /
produces:
  - application/json
consumes:
  - application/json
info:

  title: Smartling REST API Reference
  
  description: |
    The **Smartling API** enables you to automate many of the actions that users ordinarily perform in Smartling's 
    web-based application. It also allows you to build integrations to connect your content sources directly 
    with Smartling.

  version: '2.0.0'
  
  termsOfService: 'https://www.smartling.com/about/terms-and-conditions/'
  contact:
    email: hi@smartling.com
    url: 'https://developer.smartling.com'
  # license:
    # name: Apache 2.0
    # url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'smartling_logo.png'
externalDocs:
  description: Smartling Docs
  url: 'https://developer.smartling.com'


tags:
  - name: "Authentication"

  - name: "Strings"
    description: |-
      The Strings API allows you to directly upload strings to a Smartling project and fetch original strings or translations.

      For each string in a Smartling project there is a unique identifier, made by hashing together the parsed string
      text, variant metadata and, in some cases, namespace. When adding strings via the String API, each string will
      be unique. If you try to create a string with identical variant metadata and string text to a string that already
      exists in the project, the string will be overwritten.

  - name: "Issues"
    description: |-
      The Issues API provides methods for creating issues, changing the state of an issue, commenting on an issue and
      requesting detailed information and reports on issues and comments.

  - name: "Issue watchers"
    description: |-
      Any email address can be added as a watcher to receive notifications about an issue being opened, commented on, or closed.

  - name: "Glossaries"
    description: |-
      The Glossary API allows you to create and edit Glossaries in a Smartling account and populate it with Glossary terms. You can also download your Glossaries as CSV or TBX files and import Excel spreadsheets to create new Glossaries.

      **Glossary API introduces following limitations on its usage:**
      * Maximum request size is 10MB
      * Maximum file upload size is 10MB
      * Maximum HTTP header size is 128KB
      * For requests that uses pagination, maximum page size is 5000 elements
      * For requests that returns entities by their UIDs - maximum 100 elements
      Rate limits:
      * Maximum 5 concurrent requests
      * Maximum rate is 200 requests per 15 seconds window frame

x-tagGroups:
  - name: "Basics"
    tags:
      - "Authentication"
      - "Strings"
  - name: "Files"
    tags:
      - "Original Files"
      - "Translated Files"
  - name: "Context"
    tags:
      - "Contexts"
      - "Bindings"
  - name: "Translation Issues"
    tags:
      - "Issues"
      - "Issue comments"
      - "Issue watchers"
  - name: "Glossaries"
    tags:
      - "Glossaries"

paths:
  '/auth-api/v2/authenticate':
    post:
      description: >-
        Authenticates the user with a User Identifier and Secret. Returns an
        access token that can be attached to the header of any API request to
        authenticate the user, and a refresh token which can be used to obtain a
        new access token.


        To obtain `userIdentifier` and `userSecret` log in to `Smartling > API > Create Token`.


        See ["How to Authenticate" article](https://developer.smartling.com/docs/how-to-authenticate) for more details.
      summary: Authenticate
      tags:
        - Authentication
      parameters:
        - name: body
          in: body
          description: Authentication Request
          schema:
            $ref: '#/definitions/AuthenticationRequest'
          required: true
      responses:
        '200':
          description: Access and refresh tokens
          schema:
            $ref: '#/definitions/AuthenticationResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  accessToken: b816424c-2e95-11e7-93ae-92361f002671
                  refreshToken: c0a6f410-2e95-11e7-93ae-92361f002671
                  expiresIn: 480
                  refreshExpiresIn: 3660
                  tokenType: Bearer
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/files-api/v2/auth-api/v2/authenticate/refresh':
    post:
      description: >-
        Returns a renewed access token that can be attached to the header of any
        API request to authenticate the user, and a refresh token which can be
        used to obtain a new access token.
      summary: Refresh access token
      tags:
        - Authentication
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AuthenticationRefreshRequest'
          description: Refresh token request
      responses:
        '200':
          description: Access and refresh tokens
          schema:
            $ref: '#/definitions/AuthenticationResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

#
# File API
#
  '/files-api/v2/projects/{projectId}/file':
    post:
      summary: Upload a file
      description: |
        Upload original source content to Smartling
        
        **Example**
        ```bash
          curl -X POST -H "Authorization: Bearer {token}" -F "file=@file.properties;type=text/plain" -F "fileUri=file.properties"  -F "fileType=javaProperties" 'https://api.smartling.com/files-api/v2/projects/{projectId}/file'
        ```
        
      tags:
        - Original Files
      consumes:
        - multipart/form-data
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uid
        - name: file
          in: formData
          required: true
          type: file
          description: The file contents to upload
        - name: fileUri
          in: formData
          required: true
          type: string
          description: |
            Value that uniquely identifies the uploaded file. This ID can be used to request the file back. We recommend you use file path + file name, similar to how version control systems identify the file. Example: /myproject/i18n/ui.properties
        - name: fileType
          in: formData
          required: true
          type: string
          description: Unique identifier for the file type
          enum: &fileTypes
            - android
            - ios
            - gettext
            - html
            - javaProperties
            - yaml
            - xliff
            - xml
            - json
            - docx
            - pptx
            - xlsx
            - idml
            - qt
            - resx
            - plaintext
            - cvs
            - srt
            - stringsdict
        - name: authorize
          in: formData
          required: false
          type: boolean
          default: false
          description: |
            Determines whether content in the file is authorized (available for translation) in all locales upon submitting the file via the Smartling Dashboard. An error message will return if there are insufficient translation funds and authorized is set to true. If a string has been completely excluded for translation from all languages, or excluded from translation for a specific language, ```authorize``` will NOT authorize it. Note: to specify a limited list of locales to authorize, use the ```localeIdsToAuthorize[]``` parameter
            
              Value | Description
              -- | --
              true |  Content will be available for translation in all locales on upload
              false |  Content will be added to the "Awaiting Authorization" queue on upload
        - name: localeIdsToAuthorize[]
          in: formData
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
          description: |
            This value, if set, authorizes strings for translation into specific locales. Use the project/locale/list call to get the list of locales for the project or see them in the dashboard on the API settings page. Use multiple ```localeIdsToAuthorize``` parameter pairs to authorize more than one locale. You can add languages by uploading the file again and indicating the language to authorize with ```localeIdsToAuthorize``` or all languages with ```authorize```, or in the dashboard using the "Show Partially Authorized" filter option from the Awaiting Authorization list. If string has been completely excluded for translation from all languages, or excluded from translation for a specific language, localesIdsToAuthorize will NOT authorize it. **Note**: Do not set the ```authorize``` parameter to TRUE if you want to specify individual locales to authorize. Submitting an upload with both of these parameters set will result in a validation error.
        - name: smartling.namespace
          in: formData
          required: false
          type: string
          description: |
            For accounts created after July 31st 2015 only. Define a custom [namespace](https://developer.smartling.com/v1.0/docs/string-sharing-namespaces) for the file. This works for Application Resource Files only. For Business Documents, see [Update File](https://developer.smartling.com/v1.0/docs/managing-business-documents). **Note**: while this parameter shares the format of other file directives, it will not work as an inline directive and must be specified in the API call.
        - name: smartling.file_charset
          in: formData
          required: false
          type: string
          description: |
            Specifies a custom charset for text-format files. The value should be the name of the character set. See a full list of supported character sets here.

            If this directive is not used, Smartling will use the ```Content-Type``` request header to determine if the content is encoded with UTF-16, UTF-16B or UTF-16LE. If there is no ```Content-Type``` header, Smartling will examine the file for UTF-16 characters. If none are detected, UTF-8 encoding will be used.

            **Note**: Once this property has been set for a file, it cannot be changed. If you reupload the file, it will use the original charset, even if you change the directive. An error will be returned if this directive is used when uploading binary-format file types, such as Office or IDML files.
        - name: smartling.[command]
          in: formData
          required: false
          type: string
          description: |
            Provides custom parser configuration for supported file types. See [Supported File Types](https://developer.smartling.com/docs/supported-file-types) for more details.
        - name: callbackUrl
          in: formData
          required: false
          type: string
          format: url
          description: |
            A GET request that creates a callback to a URL when a file is 100% published for a locale. The callback gives the fileUri and locale with the format ```http[/s]://your.url?locale=xx-XX&fileUri=your.file```. If you upload the file again, without a callbackUrl, it will remove any previous callbackUrl for that file. The RequestBin (http://requestb.in) service is a convenient way to test callback. RequestBin generates a short-lived disposable URL that displays all posted requests.

            If a callback fails, Smartling will make multiple attempts to reach the designated URL, however, we do not keep retrying a failed callback indefinitely. Try to make sure your callback URL is as stable as possible and be aware that callbacks are not a 100% reliable way of being notified that a file is published.
      responses:
        200:
          description: Files API Upload success response
          schema:
            $ref: '#/definitions/FilesAPIUploadSuccessResponse'
          examples:
            application/json:
                response:
                  code: SUCCESS
                  data:
                    overWritten: true
                    stringCount: 10
                    wordCount: 2
        202:
          description: If the upload has begun but is taking more than a minute to complete
          schema:
            $ref: '#/definitions/FilesAPIUploadAcceptedResponse'
          examples:
            application/json:
                response:
                  code: SUCCESS
                  data:
                    message: Your file was successfully uploaded. Word and string counts are not available right now.
        400:
          description: If something specific was wrong with the request parameters provided. 
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              response:
                code: VALIDATION_ERROR
                errors:
                  key: unknown.field
                  message: The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.
                  details: unknown.parameter
        401:
          description: Provided credentials were not valid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        423:
          description: The requested file is currently being processed by another operation. The file will be unlocked after the operation completes.
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              response:
                code: RESOURCE_LOCKED
                errors:
                  key: resource.locked
                  message: The file is currently being processed and will be available in a few minutes.
        429:
          description: Too many simultaneous API requests per project or file.
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              response:
                code: MAX_OPERATIONS_LIMIT_EXCEEDED
                errors:
                  key: too.many.requests
                  message: The limit of 10 concurrent Smartling file API operations for this project has been exceeded.
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
            
    get:
      summary: Download an original file
      description: |
        Download the original version of the requested file from Smartling

        **Example**
        ```bash
          curl -H "Authorization: Bearer {token}" "https://api.smartling.com/files-api/v2/projects/{projectId}/file?fileUri={your-file-URI}"
        ```
        
        It is important to check the HTTP response status code. If Smartling finds and returns the file normally, you will receive a 200 SUCCESS response. If you receive any other response status code than 200, the requested file will not be part of the response.

        When you upload a UTF-16 character encoded file, then /file/get requests for that file will have a character encoding of UTF-16. All other uploaded files will return with a character encoding of UTF-8.

        You can always use the content-type header in the response of a file/get request to determine the character encoding.
        
        The filename is based on the fileUri associated with the requested file. In most cases, the filename is exactly the fileUri provided. The only exception to this is with .pot gettext files. When a .pot file is specified as the fileUri, Smartling returns a .po file.
          
      tags:
        - Original Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: fileUri
          in: query
          required: true
          type: string
          description: Value that uniquely identifies the downloaded file
      responses:
        200:
          description: Download original file
          schema:
            type: file
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/files-api/v2/projects/{projectId}/file/status':
    get:
      summary: Status of the file for each locale
      description: |
        Return information on a specific file

        **Example**
        ```bash
          curl -X GET -H "Authorization: Bearer {token}" 'https://api.smartling.com/files-api/v2/projects/{projectId}/file/status?fileUri=file.properties'
        ```

      tags:
        - Translated Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: fileUri
          in: query
          required: true
          type: string
          description: Smartling value that uniquely identifies a file in Smartling
      responses:
        200:
          description: |
          schema:
            $ref: '#/definitions/FilesAPIStatusAllLocalesSuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  fileUri: "/files/test_translation_import.csv"
                  lastUploaded: '2017-09-06T20:29:15Z'
                  created: '2017-09-06T20:29:15Z'
                  fileType: csv
                  parserVersion: 4
                  hasInstructions: false
                  directives:
                    file_uri_as_namespace: 'true'
                  namespace:
                    name: "/files/test_trans_import.csv"
                  totalStringCount: 1
                  totalWordCount: 1
                  totalCount: 1
                  items:
                  - localeId: ru-RU
                    authorizedStringCount: 0
                    authorizedWordCount: 0
                    completedStringCount: 0
                    completedWordCount: 0
                    excludedStringCount: 0
                    excludedWordCount: 0
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/files-api/v2/projects/{projectId}/locales/{localeId}/file/status':
    get:
      summary: Status of the file for a single locale
      description: |
        Return detailed status information on a specific file

        **Example**
        ```bash
          curl -X GET -H "Authorization: Bearer {token}" 'https://api.smartling.com/files-api/v2/projects/{projectId}/locales/{localeId}/file/status?fileUri=file.properties'
        ```

      tags:
        - Translated Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: localeId
          in: path
          required: true
          type: string
        - name: fileUri
          in: query
          required: true
          type: string
          description: Smartling value that uniquely identifies a file in Smartling
      responses:
        200:
          description: |
          schema:
            $ref: '#/definitions/FilesAPIStatusSingleLocaleSuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  fileUri: "/files/4.properties"
                  lastUploaded: '2017-05-27T12:45:36Z'
                  created: '2017-05-27T12:45:36Z'
                  fileType: javaProperties
                  parserVersion: 4
                  hasInstructions: false
                  directives:
                  namespace:
                  totalStringCount: 5
                  totalWordCount: 9
                  authorizedStringCount: 4
                  authorizedWordCount: 5
                  completedStringCount: 0
                  completedWordCount: 0
                  excludedStringCount: 0
                  excludedWordCount: 0
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/files-api/v2/projects/{projectId}/locales/{localeId}/file':
    get:
      summary: Download translated file
      description: |
        Download the requested file from Smartling

        It is important to check the HTTP response status code. If Smartling finds and returns the file normally, you will receive a 200 SUCCESS response. If you receive any other response status code than 200, the requested file will not be part of the response.

        When you upload a UTF-16 character encoded file, then /file/get requests for that file will have a character encoding of UTF-16. All other uploaded files will return with a character encoding of UTF-8.

        You can always use the content-type header in the response of a file/get request to determine the character encoding.

        **Example**
        ```bash
          curl -H "Authorization: Bearer {token}" "https://api.smartling.com/files-api/v2/projects/{projectId}/locales/{localeId}/file?fileUri={your-file-Uri}"
        ```

      tags:
        - Translated Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: localeId
          in: path
          required: true
          type: string
        - name: fileUri
          in: query
          required: true
          type: string
          description: Value that uniquely identifies the downloaded file
        - name: retrievalType
          in: query
          required: false
          type: string
          description: |
            Determines the desired format for the download. Applies to translated files only.

            | retrievalType | Description |
            |---------------|-------------|
            | pending | Smartling returns any translations (including non-published translations)|
            | published | Smartling returns only published/pre-published translations.|
            | pseudo | Smartling returns a modified version of the original text with certain characters transformed and the text expanded. For example, the uploaded string "This is a sample string", will return as "T~hís ~ís á s~ámpl~é str~íñg". Pseudo translations enable you to test how a longer string integrates into your application|
            | contextMatchingInstrumented | Smartling returns a modified version of the original file with strings wrapped in a specific set of Unicode symbols that can later be recognized and matched by the Chrome Context Capture Extension|
          enum:
            - pending
            - published
            - pseudo
            - contextMatchingInstrumented
        - name: includeOriginalStrings
          in: query
          required: false
          type: boolean
          description: |
            Specifies whether Smartling will return the original string or an empty string where no translation is available. This parameter is supported for gettext, java properties, custom XML, and JSON files only

            | Value | Description |
            |-------|-------------|
            | true | If there is no translation, Smartling returns the original string |
            | false | If there is no translation, Smartling returns an empty string |

      responses:
        200:
          description: |
            Download file translated to specified locale

            **Note**: The filename in response is based on the fileUri associated with the requested file. In most cases, the filename is exactly the fileUri provided. The only exception to this is with .pot gettext files. When a .pot file is specified as the fileUri, Smartling returns a .po file
          schema:
            type: file
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/files-api/v2/projects/{projectId}/locales/all/file/zip':
    get:
      summary: Download all translations of the file
      description: |
        Download a ZIP archive with all translations for the requested file.

        Unlike "Download translated file" endpoint you get a ZIP archive with all translations of a specific file.

        It is important to check the HTTP response status code. If Smartling finds and returns the file normally, you will receive a 200 SUCCESS response. If you receive any other response status code than 200, the requested files will not be part of the response.

        When you upload a UTF-16 character encoded file, then /file/get requests for that file will have a character encoding of UTF-16. All other uploaded files will return with a character encoding of UTF-8.

        You can always use the content-type header in the response of a file/get request to determine the character encoding.

        **Example**
        ```bash
          curl -X GET -H "Authorization: Bearer {token}" 'https://api.smartling.com/files-api/v2/projects/{projectId}/locales/all/file/zip?fileUri=yourfile.json&retrievalType=published'
        ```

      tags:
        - Translated Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: fileUri
          in: query
          required: true
          type: string
          description: Smartling value that uniquely identifies a file in Smartling
        - name: retrievalType
          in: query
          required: false
          type: string
          enum:
            - pending
            - published
            - pseudo
            - contextMatchingInstrumented
          description: |
            Determines the desired format for the download. Applies to translated files only.

            | retrievalType | Description |
            |---------------|-------------|
            | pending | Smartling returns any translations (including non-published translations)|
            | published | Smartling returns only published/pre-published translations.|
            | pseudo | Smartling returns a modified version of the original text with certain characters transformed and the text expanded. For example, the uploaded string "This is a sample string", will return as "T~hís ~ís á s~ámpl~é str~íñg". Pseudo translations enable you to test how a longer string integrates into your application|
            | contextMatchingInstrumented | Smartling returns a modified version of the original file with strings wrapped in a specific set of Unicode symbols that can later be recognized and matched by the Chrome Context Capture Extension|
        - name: includeOriginalStrings
          in: query
          required: false
          type: boolean
          description: |
            Specifies whether Smartling will return the original string or an empty string where no translation is available. This parameter is supported for gettext, java properties, custom XML, and JSON files only

            | Value | Description |
            |-------|-------------|
            | true | If there is no translation, Smartling returns the original string |
            | false | If there is no translation, Smartling returns an empty string |
        - name: zipFileName
          in: query
          required: false
          type: string
          description: Name for the downloaded zip file. If unset, default is ```translations.zip```
      responses:
        200:
          description: OK
          schema:
            type: file
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/files-api/v2/projects/{projectId}/files/zip':
    get:
      summary: Download multiple translated files
      description: |
        Download ZIP archive with the requested translated files.

        Unlike "Download all translations of the file" you can specify multiple file URIs and locale IDs to select which
        files and languages you want to download.

        It is important to check the HTTP response status code. If Smartling finds and returns the file normally, you will receive a 200 SUCCESS response. If you receive any other response status code than 200, the requested files will not be part of the response.

        When you upload a UTF-16 character encoded file, then /file/get requests for that file will have a character encoding of UTF-16. All other uploaded files will return with a character encoding of UTF-8.

        You can always use the content-type header in the response of a file/get request to determine the character encoding.

        **Example**
        ```bash
          curl -X GET -H "Authorization: Bearer {token}" 'https://api.smartling.com/files-api/v2/projects/{projectId}/files/zip?localeIds[]=de-DE&fileUris[]=yourfile.json'
        ```

      tags:
        - Translated Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: fileUris[]
          in: query
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
          description: Smartling Values that each uniquely identify a file
        - name: localeIds[]
          in: query
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
          description: List of locales to download
        - name: retrievalType
          in: query
          required: false
          type: string
          enum:
            - pending
            - published
            - pseudo
            - contextMatchingInstrumented
          description: |
            Determines the desired format for the download. Applies to translated files only.

            | retrievalType | Description |
            |---------------|-------------|
            | pending | Smartling returns any translations (including non-published translations)|
            | published | Smartling returns only published/pre-published translations.|
            | pseudo | Smartling returns a modified version of the original text with certain characters transformed and the text expanded. For example, the uploaded string "This is a sample string", will return as "T~hís ~ís á s~ámpl~é str~íñg". Pseudo translations enable you to test how a longer string integrates into your application|
            | contextMatchingInstrumented | Smartling returns a modified version of the original file with strings wrapped in a specific set of Unicode symbols that can later be recognized and matched by the Chrome Context Capture Extension|
        - name: includeOriginalStrings
          in: query
          required: false
          type: boolean
          description: |
            Specifies whether Smartling will return the original string or an empty string where no translation is available. This parameter is supported for gettext, java properties, custom XML, and JSON files only

            | Value | Description |
            |-------|-------------|
            | true | If there is no translation, Smartling returns the original string |
            | false | If there is no translation, Smartling returns an empty string |
        - name: fileNameMode
          in: query
          required: false
          type: string
          enum:
            - UNCHANGED
            - TRIM_LEADING
            - LOCALE_LAST
          description: |
            Determines how files in the zip file will be named. If not set, the full original file path will be used as the filename

            | fileNameMode | Description |
            |--------------|-------------|
            | UNCHANGED | Full original file path is used |
            | TRIM_LEADING | Remove all except the last path segment. e.g. ```/en/strings/nav.properties``` becomes ```nav.properties```|
            | LOCALE_LAST | Adds a locale folder to the file path directly before the filename. e.g. ```/strings/nav.properties``` becomes ```/strings/en/nav.properties``` |
        - name: localeMode
          in: query
          required: false
          type: string
          enum:
            - LOCALE_IN_PATH
            - LOCALE_IN_NAME
            - LOCALE_IN_NAME_AND_PATH
          description: |
            Determines how locales will be handled in the downloaded zip

            | localeMode | Description |
            |------------|-------------|
            | LOCALE_IN_PATH | Locale code is added to the end of the file path. e.g. ```/strings/es-ES/nav.properties``` |
            | LOCALE_IN_NAME | Locale code is added to the end of the file name e.g. ```/strings/nav_es-ES.properties``` |
            | LOCALE_IN_NAME_AND_PATH | Locale code is added to both the path and the filename. e.g. ```/strings/es-ES/nav_es-ES.properties``` |
        - name: zipFileName
          in: query
          required: false
          type: string
          description: Name for the downloaded zip file. If unset, default is ```translations.zip```
      responses:
        200:
          description: |
          schema:
            type: file
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/files-api/v2/projects/{projectId}/files/list':
    get:
      summary: List Files
      description: |
        List recently uploaded files

        Returns a maximum of 500 files.

        **Example**
        ```bash
          curl -H "Authorization: Bearer {token}" "https://api.smartling.com/files-api/v2/projects/{projectId}/files/list?fileTypes[]=json&uriMask=strings"
        ```

      tags:
        - Original Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: uriMask
          in: query
          required: false
          type: string
          description: Return only files with a URI containing the given substring. Case is ignored. For example, the value ```.json``` will match ```strings.json``` and ```STRINGS.JSON``` but not ```json.strings```
        - name: fileTypes[]
          in: query
          required: false
          type: array
          items:
            type: string
            enum: *fileTypes
          collectionFormat: multi
        - name: lastUploadedAfter
          in: query
          required: false
          type: string
          format: YYYY-MM-DDThh:mm:ssZ
          description: Return all files uploaded after the specified date
        - name: lastUploadedBefore
          in: query
          required: false
          type: string
          format: YYYY-MM-DDThh:mm:ssZ
          description: Return all files uploaded before the specified date
        - name: orderBy
          in: query
          type: string
          description: Sets the name and direction of the parameter to order results by. If ascending or descending is not specified, the default is ascending
          enum:
            - created
            - fileUri
            - lastUploaded
            - created_asc
            - created_desc
            - fileUri_asc
            - fileUri_desc
            - lastUploaded_asc
            - lastUploaded_desc
        - name: limit
          in: query
          required: false
          type: integer
          default: 500
          description: |
            See [Limit and Offset](https://developer.smartling.com/v1.0/docs/list-get-1). In order to get consistent pagination, please make sure to specify the ```orderBy``` parameter
        - name: offset
          in: query
          required: false
          type: integer
          default: 0
          description: See [Limit and Offset](https://developer.smartling.com/v1.0/docs/list-get-1)
      responses:
        200:
          description: |
          schema:
            $ref: '#/definitions/FilesAPIListFilesSuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 2
                  items:
                    - fileUri: /files/translation_import.csv
                      created: '2017-09-06T20:29:15Z'
                      lastUploaded: '2017-09-06T20:29:15Z'
                      fileType: csv
                      hasInstructions: false
                    - fileUri: /files/4.properties
                      created: '2017-05-27T12:45:36Z'
                      lastUploaded: '2017-05-27T12:45:36Z'
                      fileType: javaProperties
                      hasInstructions: false
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/files-api/v2/projects/{projectId}/file-types':
    get:
      summary: List File Types
      description: |
        Return a list of all file types currently represented in the project
      tags:
        - Original Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
      responses:
        200:
          description: |
          schema:
            $ref: '#/definitions/FilesAPIListFileTypesSuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  items:
                    - csv
                    - javaProperties
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/files-api/v2/projects/{projectId}/file/rename':
    post:
      summary: Rename
      description: |
        Rename an uploaded file by changing the fileUri. After renaming the file, the file will only be identified by the new fileUri you provide

        **Example**
        ```bash
          curl -X POST -H "Authorization: Bearer {token}" -F "fileUri=filename.properties" -F "newFileUri=filename2.properties" 'https://api.smartling.com/files-api/v2/projects/{projectId}/file/rename'
        ```

      tags:
        - Original Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: fileUri
          in: formData
          required: true
          type: string
          description: Current value that uniquely identifies the file
        - name: newFileUri
          in: formData
          required: true
          type: string
          description: |
            The new value for fileUri. We recommend that you use file path + file name, similar to how version control systems identify the file. Example: /myproject/i18n/ui.properties. This must be a fileUri that does not exist in the current Smartling project.
      responses:
        200:
          description: |
          schema:
            $ref: '#/definitions/EmptyResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/files-api/v2/projects/{projectId}/file/delete':
    post:
      summary: Delete
      description: |
        Remove the file from Smartling. The file will no longer be available for download. Any complete translations for the file remain available for use within the system.

        Smartling deletes files asynchronously and it typically takes a few minutes to complete. While deleting a file, you can not upload a file with the same fileUri.

        **Example**
        ```bash
          curl -X POST -H "Authorization: Bearer {token}" -F "fileUri=filename.properties" 'https://api.smartling.com/files-api/v2/projects/{projectId}/file/delete'
        ```

      tags:
        - Original Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: fileUri
          in: formData
          required: true
          type: string
          description: Smartling value that uniquely identifies a file in Smartling
      responses:
        200:
          description: |
          schema:
            $ref: '#/definitions/EmptyResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/files-api/v2/projects/{projectId}/locales/{localeId}/file/last-modified':
    get:
      summary: Last modified date for a single locale
      description: |
        Return the date a file was last modified in a specified locale

        **Example**
        ```bash
          curl -X GET -H "Authorization: Bearer {token}" 'https://api.smartling.com/files-api/v2/projects/{projectId}/locales/{localeId}/file/last-modified?fileUri=filename.properties'
        ```

      tags:
        - Translated Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: localeId
          in: path
          required: true
          type: string
        - name: fileUri
          in: query
          required: true
          type: string
          description: Smartling value that uniquely identifies a file in Smartling
        - name: lastModifiedAfter
          in: query
          required: false
          type: string
          format: YYYY-MM-DDThh:mm:ssZ
          description: Limits the return to only those file and locale combinations that have a ```lastModified``` date after the parameter ```lastModifiedAfter```. The items array will be empty if the file has not been modified in any of the locales since the lastModifiedAfter date specified.
      responses:
        200:
          description: |
          schema:
            $ref: '#/definitions/FilesAPILastModifiedSingleLocaleSuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  localeId: ru-RU
                  lastModified: '2017-09-06T20:25:18Z'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/files-api/v2/projects/{projectId}/file/last-modified':
    get:
      summary: Last modified date for each locales
      description: |
        Return the date a file was last modified in a each locale

        **Example**
        ```bash
          curl -X GET -H "Authorization: Bearer {token}" 'https://api.smartling.com/files-api/v2/projects/{projectId}/file/last-modified?fileUri=filename.properties'
        ```

      tags:
        - Translated Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: fileUri
          in: query
          required: true
          type: string
          description: Smartling value that uniquely identifies a file in Smartling
        - name: lastModifiedAfter
          in: query
          required: false
          type: string
          format: YYYY-MM-DDThh:mm:ssZ
          description: Limits the return to only those file and locale combinations that have a ```lastModified``` date after the parameter ```lastModifiedAfter```. The items array will be empty if the file has not been modified in any of the locales since the lastModifiedAfter date specified.
      responses:
        200:
          description: |
          schema:
            $ref: '#/definitions/FilesAPILastModifiedAllLocalesSuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 1
                  items:
                  - localeId: ru-RU
                    lastModified: '2017-09-06T20:25:18Z'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/files-api/v2/projects/{projectId}/locales/{localeId}/file/import':
    post:
      summary: Import translations
      description: |

        **Example**
        ```bash
          curl -X POST -H "Authorization: Bearer {token}" -F "file=@filename.properties" -F 'fileUri=filename.properties' -f fileType=javaProperties -F translationState=PUBLISHED 'https://api.smartling.com/files-api/v2/projects/{projectId}/locales/{localeId}/file/import'
        ```

      tags:
        - Translated Files
      consumes:
        - multipart/form-data
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: localeId
          in: path
          required: true
          type: string
        - name: file
          in: formData
          required: true
          type: file
          description: The file contents to upload
        - name: fileUri
          in: formData
          required: true
          type: string
          description: The Smartling URI for file that contains the original language strings already uploaded to Smartling
        - name: fileType
          in: formData
          required: true
          type: string
          description: Unique identifier for the file type. To allow translation imports, XML and JSON files must be uploaded with source_key_paths defined
          enum: *fileTypes
        - name: translationState
          in: formData
          required: true
          type: string
          enum:
            - PUBLISHED
            - POST_TRANSLATION
          description: |
            Value indicating the workflow state to import the translations into. Content will be imported into the language's default workflow

            | Value | Description |
            |-------|-------------|
            | PUBLISHED | The translated content is published |
            | POST_TRANSLATION | The translated content is imported into the first step after translation - if there are none, it will be published |

        - name: overwrite
          in: formData
          required: false
          type: boolean
          description: Whether or not to overwrite existing translations

      responses:
        200:
          description: |
          schema:
            $ref: '#/definitions/FilesAPITranslationImportSuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  wordCount: 6
                  stringCount: 3
                  translationImportErrors: []
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/files-api/v2/projects/{projectId}/locales/{localeId}/file/get-translations':
    post:
      summary: Export translations
      description: |
        Temporarily uploads a file, then returns a translated version for requested locales.

        This call can be used instead of a standard upload/download if you keep different versions of a file in multiple branches or are triggering rebuilds, and don’t want your files in Smartling to be overwritten by out-of-date versions of a file.

        To use the call, you upload a file and identify the Smartling URI where the main version of that file is saved. Smartling will match strings shared between the uploaded file and the main file and return any available translations.


        **Example**
        ```bash
          curl -X POST -H "Authorization: Bearer {token}" -F "file=@filename.properties" -F 'fileUri=filename.properties' 'https://api.smartling.com/files-api/v2/projects/{projectId}/locales/{localeId}/file/get-translations'
        ```

      tags:
        - Translated Files
      consumes:
        - multipart/form-data
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: localeId
          in: path
          required: true
          type: string
        - name: file
          in: formData
          required: true
          type: file
          description: The file contents to upload
        - name: fileUri
          in: formData
          required: true
          type: string
          description: The Smartling URI for file that contains the original language strings already uploaded to Smartling
        - name: retrievalType
          in: formData
          required: false
          type: string
          enum:
            - pending
            - published
            - pseudo
            - contextMatchingInstrumented
          description: |
            Determines the desired format for the download. Applies to translated files only.

            | retrievalType | Description |
            |---------------|-------------|
            | pending | Smartling returns any translations (including non-published translations)|
            | published | Smartling returns only published/pre-published translations.|
            | pseudo | Smartling returns a modified version of the original text with certain characters transformed and the text expanded. For example, the uploaded string "This is a sample string", will return as "T~hís ~ís á s~ámpl~é str~íñg". Pseudo translations enable you to test how a longer string integrates into your application|
            | contextMatchingInstrumented | Smartling returns a modified version of the original file with strings wrapped in a specific set of Unicode symbols that can later be recognized and matched by the Chrome Context Capture Extension|
        - name: includeOriginalStrings
          in: formData
          required: false
          type: boolean
          description: |
            Specifies whether Smartling will return the original string or an empty string where no translation is available. This parameter is supported for gettext, java properties, custom XML, and JSON files only

            | Value | Description |
            |-------|-------------|
            | true | If there is no translation, Smartling returns the original string |
            | false | If there is no translation, Smartling returns an empty string |

      responses:
        200:
          description: |
          schema:
            type: file
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'

#
# Context API endpoints
#
  /context-api/v2/projects/{projectId}/contexts:
    post:
      summary: Upload new context.
      description: |-
        The Upload Context endpoint request body takes the form of a **multi-part post request**,
        with each part having it's own content type, e.g. for **HTML** context:
        ```
          POST /context-api/v2/projects/a06b5c7e1/contexts HTTP/1.1
          Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

          ------WebKitFormBoundary7MA4YWxkTrZu0gW
          Content-Disposition: form-data; name="content"; filename="context.html"
          Content-Type: text/html

          <!DOCTYPE html>
          <html lang="en">
          <head>
              <title>Page title</title>
          </head>
          <body>
              <div class="sl-translate">
                  <p>String 1</p>
              </div>
              <div class="sl-translate">
                  <p>String 2</p>
              </div>
          </body>
          </html>

          ------WebKitFormBoundary7MA4YWxkTrZu0gW
          Content-Disposition: form-data; name="name"

          /path/to/custom_context-name.html
          ------WebKitFormBoundary7MA4YWxkTrZu0gW--
        ```
        For **VIDEO** context, "content" part should be omitted and the "name" part should contain the public link to video:
        ```
          POST /context-api/v2/projects/a06b5c7e1/contexts HTTP/1.1
          Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

          ------WebKitFormBoundary7MA4YWxkTrZu0gW
          Content-Disposition: form-data; name="name"

          http://video.domain.com/path_to_video.mp4
          ------WebKitFormBoundary7MA4YWxkTrZu0gW--
        ```
      tags:
        - Contexts
      consumes:
        - multipart/form-data
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - name: content
          description: The context file part with content type. Supported content types are image/\* and text/html.
          in: formData
          required: true
          type: file
        - name: name
          in: formData
          required: false
          type: string
          description: Optional parameter that overrides the file name of *content* part.
      responses:
        200:
          description: Created context object
          schema:
            $ref: '#/definitions/ContextResponse'
          examples:
            application/json:
                response:
                  code: SUCCESS
                  data:
                    contextUid: '6e66fe6b-b508-4849-9e65-1e502d65755d'
                    contextType: 'IMAGE'
                    name: 'image.png'
                    created: '2017-05-03T20:47:38Z'
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              response:
                code: 'VALIDATION_ERROR'
                requestId: '2b963af9-c1bc-4f9e-80b6-0d6cb8fa55cf'
                data:
                  errors:
                  -
                    key: 'wrong_parameters'
                    message: "Check request parameters, error message - 'Content stream is required for this context.', ref id: 'af4706d9-c5c1-40aa-93e4-1ec3498c1f05'"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
    get:
      summary: List contexts for project
      description: Returns a list of metadata for all context files in a project, including the unique ID, type of context, file name and created date.
                   Response is limited to *100* items, to retreive all items the request should be repeated with **offset** parameter specified.
      tags:
        - Contexts
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - name: nameFilter
          in: query
          type: string
          required: false
          description: Optional filter for context names
        - name: offset
          description: If your original request returns an offset value, the set of results is incomplete. Run the request again, with the given offset value to see more results. When offset is null, there are no more results to return.
          in: query
          type: string
          required: false
        - name: type
          in: query
          type: string
          enum:
          - IMAGE
          - HTML
          - VIDEO
          required: false
          description: Optional context type filter.
      responses:
        200:
          description: List of contexts, no content included.
          schema:
            $ref: '#/definitions/ContextListResponse'
          examples:
            application/json:
                response:
                  code: SUCCESS
                  data:
                    items:
                      -
                        name: "image.png"
                        contextType: "IMAGE"
                        contextUid: "6e66fe6b-b508-4849-9e65-1e502d65755d"
                        created: "2016-12-19T17:28:29Z"
                      -
                        contextUid: "ac79677f-0e0a-4d01-b4e3-b94e2e6ba09c"
                        contextType: "IMAGE"
                        name: "image-context.jpg"
                        created: "2016-11-11T13:23:32Z"
                    offset: null
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /context-api/v2/projects/{projectId}/contexts/{contextUid}:
    get:
      summary: View context metadata
      description: Retrieves basic context information.
      tags:
        - Contexts
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - name: contextUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Basic context information.
          schema:
            $ref: '#/definitions/ContextResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  contextUid: '6e66fe6b-b508-4849-9e65-1e502d65755d'
                  contextType: 'VIDEO'
                  name: 'http://custom-video-hosting.com/path/to/video.mp4'
                  created: '2017-05-03T20:47:38Z'
        404:
          description: Context not found error.
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              response:
                code: NOT_FOUND_ERROR
                errors:
                  - key: 'not_found_error'
                    message: "Context not found, ref id: 'ffd90ec4-5ca8-4720-8ecf-15dce3404823'"
    delete:
      summary: Delete the context.
      description: Removes the context and all associated bindings of this context to strings.
      tags:
        - Contexts
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - name: contextUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Successful delete response.
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
        404:
          description: Context not found error.
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              response:
                code: NOT_FOUND_ERROR
                errors:
                - key: 'not_found_error'
                  message: "Context not found, ref id: 'ffd90ec4-5ca8-4720-8ecf-15dce3404823'"

  /context-api/v2/projects/{projectId}/contexts/{contextUid}/content:
    get:
      summary: Download content of the context file.
      description: |-
        Returns binary image data for **IMAGE** context,
        html document with *bindings anchors* for **HTML** context.
        Empty response for **VIDEO** context.
      tags:
        - Contexts
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - name: contextUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Previously uploaded context (i.e. image file, or html file).
          schema:
            type: file
          examples:
            text/html: |-
              <html>
                <head>
                  <title>Document title</title>
                </head>
                <body>
                  <div data-sl-anchor="11">html file contents</div>
                </body>
              </html>

        404:
          description: Context not found error.
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              response:
                code: 'NOT_FOUND_ERROR'
                errors:
                  -
                    key: 'not_found_error'
                    message: "Context not found, ref id: 'ffd90ec4-5ca8-4720-8ecf-15dce3404823'"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /context-api/v2/projects/{projectId}/contexts/upload-and-match-async:
    post:
      summary: Upload new context and run automatic context matching.
      description: |-
        A combination of two requests:
        - post /projects/{projectId}/contexts
        - post /projects/{projectId}/contexts/{contextUid}/match/async
        If the matching process returns no bindings the context wouldn't be created.
        Supports only **HTML** context.
      tags:
        - Contexts
      consumes:
        - multipart/form-data
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - name: content
          description: The context file part with content type. Supported content types are image/\* and text/html.
          in: formData
          required: true
          type: file
        - name: name
          in: formData
          required: false
          type: string
          description: Optional parameter that overrides the file name of *content* part.
        - name: matchParams
          in: formData
          required: false
          type: string
          description: A part containing JSON object with an array of string hashcodes to match against.
                       If the part content is missing, or empty array is passed, *all strings in the project* will be included in the match.
                       This part contains the same parameters as a body of `/projects/{projectId}/contexts/{contextUid}/match/async` request.
      responses:
        200:
          description: OK
        202:
                  description: Successful response
                  schema:
                    $ref: '#/definitions/AsyncMatchResponse'
                  examples:
                    application/json:
                      response:
                        code: 'SUCCESS'
                        data:
                          matchId: 'ffd90ec4-5ca8-4720-8ecf-15dce3404823'
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              response:
                code: 'VALIDATION_ERROR'
                requestId: '2b963af9-c1bc-4f9e-80b6-0d6cb8fa55cf'
                data:
                  errors:
                  -
                    key: 'wrong_parameters'
                    message: "Check request parameters, error message - 'Content stream is required for this context.', ref id: 'af4706d9-c5c1-40aa-93e4-1ec3498c1f05'"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /context-api/v2/projects/{projectId}/contexts/{contextUid}/match/async:
    post:
      summary: Run automatic context matching.
      description: |-
        Automatically matches a Context against strings in the project and creates corresponding bindings.
        Optical Character Recognition (OCR) is used for **IMAGE** context, while **HTML** context uses approximate string matching algorithm.
        Optionally, you can restrict matching to only a set of strings that you specify to ensure that no unwanted bindings are created.
        This is a convenience method provided to save time and complexity in your integration.
        While our OCR functionality is advanced, it cannot match 100% of strings.
        If you need complete context coverage, either use the manual Create Bindings request or check your context images in the Smartling Dashboard after running this request to fill in any blanks.
        Be mindful of the limitations of OCR if you are using an unusual or script-like font.
      consumes:
        - application/json
      tags:
        - Contexts
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - name: contextUid
          in: path
          required: true
          type: string
          format: uuid
        - name: matchRequest
          in: body
          required: false
          schema:
            $ref: '#/definitions/MatchRequest'
      responses:
        202:
          description: Successful response
          schema:
            $ref: '#/definitions/AsyncMatchResponse'
          examples:
            application/json:
              response:
                code: 'SUCCESS'
                data:
                  matchId: 'ffd90ec4-5ca8-4720-8ecf-15dce3404823'
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              response:
                code: 'VALIDATION_ERROR'
                errors:
                - key: 'wrong_parameters'
                  message: "Check request parameters, error message - 'Context with Uid=cb081827-2daa-4611-915c-4d207829be27 doesn't exist', ref id: '11f8b832-8154-4e6e-a196-a69a88009736'"
                  details:
        default:
          description: General error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /context-api/v2/projects/{projectId}/match/{matchId}:
    get:
      summary: Retrieve asynchronous match results
      description: |-
        Check the status of the match request and get results once the match is completed.
        When the match has been completed, any newly created bindings are also returned in the response.
      tags:
        - Contexts
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - name: matchId
          description: Identifier of the match request obtained when running asynchronous match request.
          in: path
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Successful response for the completed match request.
          schema:
            $ref: '#/definitions/AsyncMatchStatsResponse'
          examples:
            application/json:
              response:
                code: 'SUCCESS'
                data:
                  matchId: 'a9308883-30c7-4832-a023-6c3b10f6f9b1'
                  createdDate: '2017-05-05T19:06:22Z'
                  modifiedData: '2017-05-05T19:06:22Z'
                  status: 'COMPLETED'
                  bindings:
                    - bindingUid: 'a9308883-30c7-4832-a023-6c3b10f6f9b1'
                      contextUid: '428bf090-60fa-473d-ac07-4a551aa06c47'
                      stringHashcode: '374825f7d147fb5700f23b2b22d6660d'
                      anchors:
                      - '11'
                      - 'custom.anchor'
                    - bindingUid: 'a9308883-30c7-4832-a023-6c3b10f6f9b1'
                      contextUid: '428bf090-60fa-473d-ac07-4a551aa06c47'
                      stringHashcode: '374825f7d147fb5700f23b2b22d6660d'
                      anchors:
                      - '12'
        404:
          description: Not found response for the match request that is not found or expired
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              response:
                code: 'NOT_FOUND_ERROR'
                errors:
                - key: 'not_found'
                  message: 'Match not found'

  /context-api/v2/projects/{projectId}/bindings/{bindingUid}:
    delete:
      summary: Remove binding.
      description: Deletes a context binding. The context referenced by the binding will no longer be displayed for the referenced string in the Translation Interface.
      tags:
        - Bindings
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - name: bindingUid
          description: Unique identifier for the binding you want to delete
          in: path
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              response:
                code: 'SUCCESS'
                data:
        404:
          description: Not found response
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              response:
                code: 'NOT_FOUND_ERROR'
                errors:
                - key: 'not_found_error'
                  message: 'Binding not found'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /context-api/v2/projects/{projectId}/contexts/{contextUid}/bindings:
    get:
      summary: Return all bindings for the context.
      description: |-
        Return all bindings that reference a given piece of context.
      tags:
        - Bindings
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - name: contextUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Successful Response
          schema:
            $ref: '#/definitions/BindingsResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 1
                  items:
                    -
                      bindingUid: "d6414f8c-4gdf-4415-9a69-f8e7902ca9ec"
                      contextUid: "25137b65-e075-4341-8362-14b1a3e558f5"
                      stringHashcode: "bd603147d945h3ec74d6874422ebe4e0"
                      coordinates:
                        top: 50
                        left: 50
                        bottom: 400
                        right: 400
        404:
          description: Context not found error
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              response:
                code: 'NOT_FOUND_ERROR'
                errors:
                - key: 'not_found_error'
                  message: "Context not found, ref id: 'ffd90ec4-5ca8-4720-8ecf-15dce3404823'"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /context-api/v2/projects/{projectId}/strings/{stringHashcode}/bindings:
    get:
      summary: Get bindings for the string
      description: Return all bindings that reference a given string.
      tags:
        - Bindings
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - name: stringHashcode
          description: Hashcode for the string you want to get bindings for.
          in: path
          required: true
          type: string
          format: hash
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/BindingsResponse'
          examples:
            application/json:
              response:
                code: 'SUCCESS'
                data:
                  totalCount: 1
                  items:
                    -
                      bindingUid: "d6414f8c-4gdf-4415-9a69-f8e7902ca9ec"
                      contextUid: "25137b65-e075-4341-8362-14b1a3e558f5"
                      stringHashcode: "bd603147d945h3ec74d6874422ebe4e0"
                      coordinates:
                        top: 50
                        left: 50
                        bottom: 400
                        right: 400
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /context-api/v2/projects/{projectId}/bindings:
    post:
      summary: Create bindings.
      description: |-
        Link context images with the strings they contain. The binding tells Smartling which context images to show translators for which strings.
        A maximum of **150** bindings can be created per request. A request with more than **150** items will return a **400** response indicating validation error.
        Basic bindings request should contain an object with "bindings" JSON array with at least one element (binding), featuring *contextUid* and *stringHashcode* properties:
        ```JSON
        {
          "bindings": [
            {
               "contextUid": "25137b65-e075-4341-8362-14b1a3e558f5",
               "stringHashcode": "bd603147d945h3ec74d6874422ebe4e0"
            }
          ]
        }
        ```
        For **IMAGE** context, each binding may have additional *coordinates* data, which specifies rectangular area, where the string is located in the image. If not specified, binding will still be created with coordinates [0,0,0,0]:
        ```JSON
        {
          "bindings": [
            {
               "contextUid": "25137b65-e075-4341-8362-14b1a3e558f5",
               "stringHashcode": "bd603147d945h3ec74d6874422ebe4e0",
               "coordinates": {
                  "top": 50,
                  "left": 50,
                  "width": 400,
                  "height": 400
               }
            }
          ]
        }```
        For **HTML** context, each binding may have the *anchors* array, specifying the enclosing the string HTML elements with the corresponding value of the *data-sl-anchor* attribute. If not specified, binding will still be created with the empty *anchors* array:
        ```JSON
        {
          "bindings": [
            {
               "contextUid": "25137b65-e075-4341-8362-14b1a3e558f5",
               "stringHashcode": "bd603147d945h3ec74d6874422ebe4e0",
               "selector": {
                  "anchors": ["custom.anchor", "11", 44"]
               }
            }
          ]
        }```
        For **VIDEO** context, each binding mave the *timecode* data, specifying the start and end time of the string appearance in the video:
        ```JSON
        {
          "bindings": [
            {
                "contextUid": "25137b65-e075-4341-8362-14b1a3e558f5",
                "stringHashcode": "bd603147d945h3ec74d6874422ebe4e0",
                "timecode": {
                   "startTime": 1203,
                   "endTime": 1450
                }
            }
          ]
        }```
      consumes:
        - application/json
      tags:
        - Bindings
      parameters:
        - name: projectId
          description: Project ID
          in: path
          required: true
          type: string
          format: uuid
        - name: request
          description: String-to-context JSON bindings
          in: body
          required: true
          schema:
            $ref: '#/definitions/BindingsRequest'
      responses:
        200:
          description: Bindings
          schema:
            $ref: '#/definitions/CreateBindingsResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 1
                  items:
                    -
                      bindingUid: "d6414f8c-4gdf-4415-9a69-f8e7902ca9ec"
                      contextUid: "25137b65-e075-4341-8362-14b1a3e558f5"
                      stringHashcode: "bd603147d945h3ec74d6874422ebe4e0"
                      coordinates:
                        top: 50
                        left: 50
                        bottom: 400
                        right: 400
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            application/json:
              response:
                code: 'VALIDATION_ERROR'
                errors:
                - key: 'wrong_parameters'
                  message: 'Please, limit number of bindings to no more than 150 in one request'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /context-api/v2/projects/{projectId}/contexts/{contextUid}/match:
    post:
      summary: '**DEPRECATED** Run automatic match.'
      description: |-
        Automatically matches a Context Image against strings in the project using Optical Character Recognition (OCR) for **IMAGE** context and creates bindings for any found matches.
        Optionally, you can restrict OCR matching to only a set of strings that you specify to ensure that no unwanted bindings are created.
        This is a convenience method provided to save time and complexity in your integration. While our OCR functionality is advanced, it cannot match 100% of strings.
        If you need complete context coverage, either use the manual Create Bindings request or check your context images in the Smartling Dashboard after running this request to fill in any blanks.
        Be mindful of the limitations of OCR if you are using an unusual or script-like font.
        **DEPRECATED** in favor of asynchronous matching.
      tags:
        - Bindings
      deprecated: true
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - name: contextUid
          in: path
          required: true
          type: string
          format: uuid
        - name: matchRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/MatchRequest'
      responses:
        200:
          description: Added bindings and matched but not bound strings
          schema:
            $ref: '#/definitions/MatchResponse'
          examples:
            application/json:
              response:
                  code: "SUCCESS"
                  data:
                    newBindings:
                      -
                        bindingUid: "fc2azc89-f0fc-43c4-9c3a-8e6u0521b092"
                        contextUid: "456efpe5-0bf5-4482-365f-a0nce127abb0"
                        stringHashcode: "4d70a525c0e49fe8a3b43e5b76ae33d9"
                        coordinates:
                          top: 114
                          left: 589
                          height: 33
                          width: 346
                      -
                        bindingUid: "4c0a343c-d361-4315-9580-60cdfed3dc37"
                        contextUid: "456ef9e5-0zf5-4382-b65f-a00ce127abb0"
                        stringHashcode: "e5a03bi0d4cd78e1c29bde61e6898fa1"
                        coordinates:
                          top: 55
                          left: 16
                          height: 20
                          width: 90
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

#
# Issues API endpoints
#
  /issues-api/v2/dictionary/issue-types:
    get:
      summary: List all issue types
      description: >-
        This request returns all current issue types. Smartling may occasionally
        add or change the list of allowed issue types.
      tags:
        - Issues
      produces:
        - application/json
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 2
                  items:
                    - description: Source
                      issueTypeCode: SOURCE
                      subTypes:
                        - issueSubTypeCode: CLARIFICATION
                          description: Clarification
                        - issueSubTypeCode: MISSPELLING
                          description: Misspelling
                    - description: Translation
                      issueTypeCode: TRANSLATION
                      subTypes:
                        - issueSubTypeCode: POOR_TRANSLATION
                          description: Poor Translation
                        - issueSubTypeCode: DOES_NOT_FIT_SPACE
                          description: Doesn't Fit Space
                        - issueSubTypeCode: PLACEHOLDER_ISSUE
                          description: Placeholder Issue
                        - issueSubTypeCode: GENERAL_ISSUE
                          description: General Issue
                        - issueSubTypeCode: REVIEW_TRANSLATION
                          description: Revieanslation
  /issues-api/v2/dictionary/issue-states:
    get:
      summary: List all issue states
      description: >-
        Currently the only allowed issue states are `OPENED` and `RESOLVED` but
        Smartling may introduce additional states in future. This request
        returns all current allowed states.
      tags:
        - Issues
      produces:
        - application/json
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 2
                  items:
                    - description: Opened
                      issueStateCode: OPENED
                    - description: Resolved
                      issueStateCode: RESOLVED
  '/issues-api/v2/projects/{projectId}/issues':
    post:
      summary: Open an issue
      description: >-
        Creates a new issue for a string.

        ##### Issue text is treated as plain text. Smartling will save the text
        as provided and will not attempt to render this text with any special
        formatting in its UIs; it will not be rendered as HTML or markdown.
        Consumers of the issue API should be aware and escape the text as needed
        before attempting to render it. Maximum length is 4000 characters.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: request
          description: New issue for a string
          in: body
          required: true
          schema:
            $ref: '#/definitions/IssueRequest'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  string:
                    hashcode: c32c16cddafd63dfa0dc12449372a093
                    localeId: null
                  resolvedByUserUid: null
                  reportedByUserUid: 661801f19693
                  createdDate: '2015-11-10T16:01:22Z'
                  resolvedDate: null
                  issueText: asdfsd
                  issueUid: dceaa996d417
                  projectId: e8fa915fa
                  issueTypeCode: SOURCE
                  issueSubTypeCode: CLARIFICATION
                  issueStateCode: OPENED
                  issueTextModifiedDate: null
  '/issues-api/v2/projects/{projectId}/issues/{issueUid}/issueText':
    put:
      summary: Edit an issue
      description: >-
        Replaces the text of an issue with new text. Note that only the author
        of the issue can perform this action. The `issueTextModifiedDate`
        property of an issue object shows when it was last updated.

        ##### Issue text is treated as plain text. Smartling will save the text
        as provided and will not attempt to render this text with any special
        formatting in its UIs; it will not be rendered as HTML or markdown.
        Consumers of the issue API should be aware and escape the text as needed
        before attempting to render it. Maximum length is 4000 characters.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
        - name: request
          description: ''
          in: body
          required: true
          schema:
            $ref: '#/definitions/IssueTextRequest'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  issueText: Edited issue text.
                  issueTextModifiedDate: '2015-11-10T16:01:22Z'
  '/issues-api/v2/projects/{projectId}/issues/{issueUid}/state':
    put:
      summary: Open or resolve an issue
      description: The state of the issue. Accepted values are `OPENED` or `RESOLVED`.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
        - name: request
          description: ''
          in: body
          required: true
          schema:
            $ref: '#/definitions/IssueStateRequest'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  issueStateCode: RESOLVED
  '/issues-api/v2/projects/{projectId}/issues/{issueUid}':
    get:
      summary: Get issue details
      description: >-
        Returns detailed information on a single issue. Note that the
        `resolvedByUserUid` and `reportedByUserUid` values are not currently
        usable for identifying the users who created or resolved issues. In
        future, a People API will be exposed for looking up user details.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  string:
                    hashcode: c32c16cddafd63dfa0dc12449372a093
                    localeId: ru-RU
                  resolvedByUserUid: null
                  reportedByUserUid: 661801f19693
                  createdDate: '2015-11-10T16:01:22Z'
                  resolvedDate: null
                  issueText: This translation is incorrect. Please fix.
                  issueUid: dceaa996d417
                  projectId: e8fa915fa
                  issueTypeCode: TRANSLATION
                  issueSubTypeCode: POOR_TRANSLATION
                  issueStateCode: OPENED
                  issueTextModifiedDate: null
  '/issues-api/v2/projects/{projectId}/issues/{issueUid}/comments':
    post:
      summary: Add an issue comment
      description: >-
        Create a comment for an issue.

        ##### Comment text is treated as plain text. Smartling will save the
        text as provided and will not attempt to render this text with any
        special formatting in its UIs; it will not be rendered as HTML or
        markdown. Consumers of the issue API should be aware and escape the text
        as needed before attempting to render it. Maximum length is 4000
        characters.
      tags:
        - Issue comments
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
        - name: request
          description: ''
          in: body
          required: true
          schema:
            $ref: '#/definitions/CommentRequest'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  issueCommentUid: a75fea779bbb
                  commentText: comment text
                  createdByUserUid: 661801f19693
                  createdDate: '2015-12-22T12:34:49Z'
                  commentTextModifiedDate: null
    get:
      summary: List all comments of an issue
      description: >-
        Returns all comments on an issue. Note that the `createdByUserUid` value
        is not currently usable for identifying the users who created comments.
        In future, a People API will be exposed for looking up user details.
      tags:
        - Issue comments
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  items:
                    - issueCommentUid: a75fea779bbb
                      commentText: comment text
                      createdByUserUid: 661801f19693
                      createdDate: '2015-12-22T12:34:49Z'
                      commentTextModifiedDate: null
                  totalCount: 1
  '/issues-api/v2/issues-api/v2/projects/{projectId}/issues/{issueUid}/comments/{issueCommentUid}':
    post:
      summary: Replace issue comment text
      description: >-
        Replaces the text of an issue with new text. Note that only the author
        of the issue can perform this action. The `commentTextModifiedDate`
        property of an issue object shows when it was last updated.

        ##### Comment text is treated as plain text. Smartling will save the
        text as provided and will not attempt to render this text with any
        special formatting in its UIs; it will not be rendered as HTML or
        markdown. Consumers of the issue API should be aware and escape the text
        as needed before attempting to render it. Maximum length is 4000
        characters.
      tags:
        - Issue comments
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
        - name: issueCommentUid
          in: path
          required: true
          type: string
          description: ''
        - name: request
          description: ''
          in: body
          required: true
          schema:
            $ref: '#/definitions/CommentRequest'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  issueCommentUid: a75fea779bbb
                  commentText: comment text
                  createdByUserUid: 661801f19693
                  createdDate: '2015-12-22T12:34:49Z'
                  commentTextModifiedDate: '2016-12-22T12:34:49Z'
    get:
      summary: Get issue comment
      description: >-
        Returns detailed information on a single issue comment. Note that the
        `createdByUserUid` value is not currently usable for identifying the
        users who created comments. In future, a People API will be exposed for
        looking up user details.
      tags:
        - Issue comments
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
        - name: issueCommentUid
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  createdByUserUid: 661801f19693
                  createdDate: '2015-12-22T11:54:27Z'
                  commentText: test comment
                  issueCommentUid: ac5211a26eca
                  commentTextModifiedDate: null
  '/issues-api/v2/projects/{projectId}/issues/list':
    post:
      summary: Find issues
      description: >-
        Returns a list of issues matching specified filter options. You can
        filter based on the date issues were created, target languages, strings,
        issue types and states and the user who opened the issue. Unless
        otherwise specified, request will return a maximum of 30 results. All
        parameters are optional.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: request
          description: ''
          in: body
          required: true
          schema:
            $ref: '#/definitions/FindRequest'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  items:
                    - string:
                        hashcode: c32c16cddafd63dfa0dc12449372a093
                        localeId: ru-RU
                      resolvedByUserUid: null
                      reportedByUserUid: 661801f19693
                      createdDate: '2015-12-21T16:38:48Z'
                      resolvedDate: null
                      issueText: does not fit space
                      issueUid: 902372ac8e1e
                      projectId: e8fa915fa
                      issueTypeCode: TRANSLATION
                      issueSubTypeCode: DOES_NOT_FIT_SPACE
                      issueStateCode: OPENED
                      issueTextModifiedDate: null
                  totalCount: 1
  '/issues-api/v2/projects/{projectId}/issues/count':
    post:
      summary: Get number of issues
      description: >-
        Returns a count of issues matching specified filter options. You can
        filter based on the date issues were created, strings, target languages,
        issue types and states and the user who opened the issue.. All
        parameters are optional.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: request
          description: ''
          in: body
          required: true
          schema:
            $ref: '#/definitions/CountRequest'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  count: 2
  '/issues-api/v2/accounts/{accountUid}/watchers':
    post:
      description: >-
        Create a new watcher.
      summary: Create a watcher
      tags:
        - Issue watchers
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: ''
        - name: request
          description: ''
          in: body
          required: true
          schema:
            $ref: '#/definitions/WatcherRequest'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                      uid: 323323wsss
                      email: my@mail.com
                      name: Mike Albert
                      enabled: true
                      created: '2015-12-21T16:38:48Z'
                      modified: '2015-12-21T16:38:48Z'
    get:
      summary: List all issue watchers
      description: >-
       Get a list of all watchers.
      tags:
        - Issue watchers
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: ''
        - name: email
          in: query
          required: false
          type: string
          description: ''
        - name: limit
          in: query
          required: false
          default: 100
          type: number
          description: ''
        - name: offset
          in: query
          required: false
          default: 0
          type: number
          description: ''
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  items:
                    - uid: 323323wsss
                      email: my@mail.com
                      name: Mike Albert
                      enabled: true
                      created: '2015-12-21T16:38:48Z'
                      modified: '2015-12-21T16:38:48Z'

                  totalCount: 1

  '/issues-api/v2/accounts/{accountUid}/watchers/{watcherUid}':
    put:
      description: >-
        Update the attributes of a watcher.
      summary: Update a watcher
      tags:
        - Issue watchers
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: ''
        - name: watcherUid
          in: path
          required: true
          type: string
          description: ''
        - name: request
          description: ''
          in: body
          required: true
          schema:
            $ref: '#/definitions/WatcherRequest'

      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                      uid: 323323wsss
                      email: my@mail.com
                      name: Mike Albert
                      enabled: true
                      created: '2015-12-21T16:38:48Z'
                      modified: '2015-12-21T16:38:48Z'

  '/issues-api/v2/accounts/{accountUid}/projects/{projectId}/issues/{issueUid}/watchers/{watcherUid}':
    put:
      summary: Link a watcher to an issue
      description: >-
       Associate or assign the watcher to an issue. The watcher will then begin receiving email notifications.
      tags:
        - Issue watchers
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: ''
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
        - name: watcherUid
          in: path
          required: true
          type: string
          description: ''

      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data: null
    delete:
      summary: Remove a watcher from an issue
      description: >-
        An update to an issue is sent to the associated/linked watcher. Once watchers are removed from an issue, email notifications will no longer be received by them.
      tags:
        - Issue watchers
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: ''
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
        - name: watcherUid
          in: path
          required: true
          type: string
          description: ''

      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data: null

  '/issues-api/v2/accounts/{accountUid}/projects/{projectId}/issues/{issueUid}/watchers':
    get:
      summary: List watchers linked to an issue
      description: >-
       Get a list of watchers that are linked to the issue.
      tags:
        - Issue watchers
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: ''
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  items:
                    - uid: 323323wsss
                      email: my@mail.com
                      name: Mike Albert
                      enabled: true
                      created: '2015-12-21T16:38:48Z'
                      modified: '2015-12-21T16:38:48Z'


#
# Strings API
#
  /strings-api/v2/projects/{projectId}:
    post:
      summary: "Add strings"
      description: |-
        Uploads an array of strings to a Smartling project. A maximum of 100 strings can be created per request. A request with more than 100 items will return an error. Each string has a character limit of 10 000.

        Note that you cannot authorize a string via API. Once you have created the strings, they will need to be authorized by a content owner in the Smartling Dashboard.

        Smartling creates a unique hashcode for each string based on the parsed string text and any variant or namespace metadata provided. If you upload a string with the same text, variant and namespace, and therefore the same hashcode, the existng string will be overwritten. This will not change the text of the string, but may update other metadata, such as placeholder and callback values. If the string is currently inactive, overwriting it will cause it to be reactivated. Overwritten strings return "overWritten": "true" in the response object.

        Most uploads will return a `200` response indicating success. If processing the request takes longer than 60 seconds, a `202` request will be returned, including a processUid value that can be used to check on the progress of the request.

        If you set up a POST callback for the string, you can automatically receive the translation for a string as soon as it is complete. See Callbacks for more details.

      tags:
        - Strings
      consumes:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - in: body
          name: stringRequest
          schema:
            type: object
            properties:
              placeholderFormat:
                description: |-
                  Specifies a standard placeholder format. Accepted values are none, c, ios, python, java, yaml, qt, resx. For more detail on placeholders see Placeholders in Resource Files
                type: string
              placeholderFormatCustom:
                description: |-
                  Specifies a custom placeholder with a Java Regular Expression. For example \\[.+?\\] would capture all values surrounded by square brackets as placeholders. For more detail on placeholders see Placeholders in Resource Files
                type: string
              namespace:
                description: |-
                  Used to generate the unique hashcode for all strings in the request. If you want to have two versions of a string with the same text and variant metadata, you can keep them unique by assigning a different namespace to each string. If not provided, default value is _smartling.strings-api.default.namespace_. A _NULL_ value is permitted.
                type: string
              strings:
                type: array
                items:
                  type: object
                  required:
                    - stringText
                  properties:
                    stringText:
                      description: |-
                        The text of the string you want to create. This is the only required value for a string object.
                      type: string
                    variant:
                      description: Creates variant metadata for a new string.
                      type: string
                    callbackUrl:
                      description: |-
                        If provided a callback request will be sent to this URL when translation for the string is complete. See our callbacks documentation for more details.
                      type: string
                    callbackMethod:
                      description: |-
                        With a given callbackUrl, this defines the http method to use. See our callbacks documentation for more details.
                      type: string
                    instruction:
                      description: |-
                        Creates an instruction that is displayed to translators in the Smartling Translation Interface.
                    maxLength:
                      description: |-
                        Set the maximum character length recommended for this string and its translations.  Not specifying or setting to 'null' implies no maxLength and on update will remove any existing maxLegnth.
                      type: number
                    format:
                      description: |-
                        Sets whether or not the string should be parsed as HTML. Accepted values are 'html', 'plain_text' and 'auto'. If set to auto, Smartling will attempt to detect the presence of HTML tags in the string.

                        "When strings are parsed as HTML, Smartling will automatically ampersand-escape special characters such as angle brackets (<) and quotes (&quot;). For example, if you upload the string _Dave says &quot;hello&quot;_. and set format to HTML, Smartling will return the string with ampersand-escaping: _Dave says &amp;quot;hello&amp;quot;_."
                      type: string
      responses:
        200:
          description: Strings
          schema:
            $ref: '#/definitions/CreateStringResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  wordCount: 4
                  stringCount: 1
                  processUid: "d6414f8c-4gdf-4415-9a69-f8e7902ca9ec"
                  items:
                    -
                      variant: "variant value"
                      stringText: "Search results for [city]:"
                      parsedStringText: "Search results for {0}:"
                      hashcode: "bd603147d945h3ec74d6874422ebe4e0"
                      overWritten: "true"
        202:
          description: Strings
          schema:
            $ref: '#/definitions/CreateStringResponse'

        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /strings-api/v2/projects/{projectId}/processes/{processUid}:
    get:
      summary: "Check string status"
      description: |-
        If a Create Strings request takes longer than 60 seconds to process, a `202` response will be returned, indicating that the process of creating strings is continuing but not yet complete. This response will include a proccessUid value which can be used to check the progress of the request. This request returns a processState value of open, indicating that the request is still continuing, closed, indicating the request has successfully completed, and failed, meaning the request could not be completed.

        Processes have a limited lifespan after they are complete. This request will fail if you specify an expired processUid.
      tags:
        - Strings
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - name: processUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/CreateStringStatusResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /strings-api/v2/projects/{projectId}/source-strings:
    get:
      summary: "List all source strings"
      description: |-
        Returns source strings from Smartling. You can get strings by specifying a file you want strings for, or you can specify individual strings by hashcode.

        _If you do not specify at least one of these parameters (`hashcodes` or `fileUri`) no results will be returned._

        Note that if you use this call to get strings not created with the strings API, you may see differences in the response.

        > You may see a value for `parsedStringText` but a `null` value for `stringText`. The `stringText` records the raw input received by the String API so will only appear for strings uploaded via String API.
        > If you are getting a GDN string, the original placeholder values you used will not be returned, as these are not saved by Smartling. GDN strings will have placeholders in the format `{0}`, `{1}`, etc.
      tags:
        - Strings
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - name: hashcodes
          in: formData
          description: |-
            Hashcodes for each string you want to get source strings for.
          type: array
          items:
            type: string
        - name: fileUri
          in: formData
          description: |-
            URI of a file you want to get strings for.
          type: string
        - name: limit
          in: formData
          description: |-
            Pagination setting. By default responses will be limited to 500 per request. This is also the maximum allowed value.
          type: number
        - name: offset
          in: formData
          description: |-
            Pagination setting. Default is 0.
          type: number
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/StringResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /strings-api/v2/projects/{projectId}/translations:
    get:
      summary: "List all translations"
      description: |-
        Returns translated strings from Smartling. You can get translations by specifying a file you want strings for, or you can specify individual strings by hashcode.

        _If you do not specify at least one of these parameters (`hashcodes` or `fileUri`) no results will be returned._

        Note that if you use this call to get strings not created with the strings API, you may see differences in the response.

        Only authorized and active strings will be returned. Excluded, unauthorized & inactive strings will not be returned.

        > You may see a value for `parsedStringText` but a `null` value for `stringText`. The `stringText` records the raw input received by the String API so will only appear for strings uploaded via String API.
        > If you are getting a GDN string, the original placeholder values you used will not be returned, as these are not saved by Smartling. GDN strings will have placeholders in the format `{0}`, `{1}`, etc.
      tags:
        - Strings
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - name: hashcodes
          in: formData
          description: |-
            Hashcodes for each string you want to get translations for.
          type: array
          items:
            type: string
        - name: targetLocaleId
          in: formData
          description: |-
            Smartling ID for the language you want to get translations for.
          type: string
        - name: retrievalType
          in: formData
          description: |-
            Sets the types of translations you want returned. `published` will only return translations that have completed their workflows and been published. `pending` will return any saved translations.
          type: string
          enum: [pending, published]
        - name: fileUri
          in: formData
          description: |-
            URI of a file you want to get translations for.
          type: string
        - name: limit
          in: formData
          description: |-
            Pagination setting. By default responses will be limited to 500 per request. This is also the maximum allowed value.
          type: number
        - name: offset
          in: formData
          description: |-
            Pagination setting. Default is 0.
          type: number
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/TranslationResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

#
# Glossary API endpoints
#
  /glossary-api/v2/accounts/{accountUid}/glossaries:
    get:
      description: 'Returns a list of all glossaries in an account. Optional filters for glossary name and UID can be added.'
      summary: List Glossaries for an Account
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
        - name: name
          in: query
          type: string
          description: filter for glossary name in LIKE manner (case-insensitive)
        - name: glossaryUids
          in: query
          type: array
          items:
            type: string
          description:  filter for glossary uid in IN manner (might contain up to 100 uids separated by comma e.g glossaryUids=1234,4567)
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/GlossaryListResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 2
                  items:
                  - glossaryUid: 50d9dab5-6b8b-11e5-ba24-127b00b163a3
                    name: Another document tester-Glossary
                    createdByUserUid: ah27fhq8
                    createdDate: '2015-11-21T01:51:17Z'
                    sourceLocaleId: en-US
                    description: some desc
                  - glossaryUid: 50e5c8d3-6b8b-11e5-ba24-127b00b163a3
                    name: BizDocs test Max's project-Glossary
                    createdByUserUid: ah27fhq8
                    createdDate: '2015-11-21T01:51:17Z'
                    sourceLocaleId: en-US
                    description: some desc
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

    post:
      description: 'Creates a new Glossary in an account.'
      summary: Create glossary
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
        - name: glossary
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateGlossary'
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/GlossaryResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  glossaryUid: 50d9dab5-6b8b-11e5-ba24-127b00b163a3
                  name: Another document tester-Glossary
                  description: Description of a Glossary
                  sourceLocaleId: en-US
                  createdByUserUid: ah27fhq8
                  createdDate: '2015-11-21T01:51:17Z'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'


  /glossary-api/v2/accounts/{accountUid}/glossaries/{glossaryUid}:
    get:
      description: 'Gets the name, description, locale, and creation information for a glossary.'
      summary: Get glossary details
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
        - name: glossaryUid
          in: path
          required: true
          type: string
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/GlossaryResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

    put:
      description: 'Edits the name, description or source locale of a glossary. This will completely replace the name, description and source locale of the target glossary. If you do not provide a field, or leave it blank, any existing information will be deleted.'
      summary: Edit a glossary
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
        - name: glossaryUid
          in: path
          required: true
          type: string
        - name: glossary
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateGlossary'
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/GlossaryResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

    delete:
      description: Deletes a Glossary. Note that if a Glossary has been assigned to a Linguistic Package, you will not be able to delete it. Linguistic Packages are managed in the Smartling Dashboard.
      summary: Delete Glossary
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
        - name: glossaryUid
          in: path
          required: true
          type: string
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  termText: cold call
                  partOfSpeechCode: VERB
                  definition: ''
                  notes: ''
                  caseSensitive: false
                  exactMatch: false
                  variations: ''
                  synonyms: ''
                  antonyms: ''
                  seo: false
                  doNotTranslate: false
                  translation:
                    localeId: fr-CA
                    translatedTerm: cold call french ca
                    notes: some notes from user
                    translatorUserUid: 58870b8e965
                    submittedForTranslation: true
                    lockTranslation: false
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'



  /glossary-api/v2/accounts/{accountUid}/glossaries/{glossaryUid}/terms:
    get:
      description: Returns terms from a Glossary. Only the source term is included in this response.
      summary: Get glossary terms
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
        - name: glossaryUid
          in: path
          required: true
          type: string
        - name: termText
          in: query
          type: string
          description: filter for term text in LIKE manner (case-insensitive).
        - name: limit
          in: query
          type: integer
          description: pagination portion size
        - name: offset
          in: query
          type: integer
          description: pagination offset value
        - name: sort
          in: query
          type: string
          description:  sorting instructions. represents field to sort by and direction separated by coma (i.e. sort=termText,desc). We support sorting by all fields.
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/SourceTermListResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 2
                  items:
                  - termUid: e390a4d6-aef2-11e5-b159-0ad0c2f6b537
                    termText: cold calls
                    caseSensitive: false
                    exactMatch: false
                    partOfSpeechCode: UNSPECIFIED
                    definition: ''
                    variations: ''
                    synonyms: ''
                    antonyms: ''
                    seo: false
                    doNotTranslate: false
                    deprecated: false
                    notes: ''
                    createdDate: '2015-12-30T12:43:12Z'
                    modifiedDate: '2015-12-30T12:43:12Z'
                  - termUid: e390a4d6-aef2-11e5-b159-0ad0c2f6b538
                    termText: cold call
                    caseSensitive: true
                    exactMatch: false
                    partOfSpeechCode: VERB
                    definition: My definition
                    variations: ''
                    synonyms: ''
                    antonyms: ''
                    seo: false
                    doNotTranslate: false
                    deprecated: false
                    notes: My notes
                    createdDate: '2015-12-30T12:43:12Z'
                    modifiedDate: '2015-12-30T12:43:12Z'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

    post:
      description: Creates a new glossary term. The only required parameter is termText. See our Glossary documentation for details on each term parameter. You can only add one translation object in this request. To add additional translations, use Edit Glossary term.
      summary: Create glossary term
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
        - name: glossaryUid
          in: path
          required: true
          type: string
        - name: term
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateTerm'
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/TranslatedTermResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  termText: cold call
                  partOfSpeechCode: VERB
                  definition: ''
                  notes: ''
                  caseSensitive: false
                  exactMatch: false
                  variations: ''
                  synonyms: ''
                  antonyms: ''
                  seo: false
                  doNotTranslate: false
                  translation:
                    localeId: fr-CA
                    translatedTerm: cold call french ca
                    notes: some notes from user
                    translatorUserUid: 58870b8e965
                    submittedForTranslation: true
                    lockTranslation: false
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'


  /glossary-api/v2/accounts/{accountUid}/glossaries/{glossaryUid}/terms/batch:
    post:
      description: Creates a new glossary terms.Validation for the endpoint works in atomic fashion - either all terms passed validation, and then they all will be created, or non of them will be. Translation section is optional.
      summary: Create glossary terms in batch
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
        - name: glossaryUid
          in: path
          required: true
          type: string
        - name: term
          in: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/CreateTerm'
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/TranslatedTermResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 2
                  items:
                  - termText: term 22
                    partOfSpeechCode: UNSPECIFIED
                    definition: ''
                    notes: ''
                    caseSensitive: false
                    exactMatch: false
                    variations: ''
                    synonyms: ''
                    antonyms: ''
                    seo: false
                    doNotTranslate: false
                  - termText: term 33
                    partOfSpeechCode: UNSPECIFIED
                    definition: ''
                    notes: ''
                    caseSensitive: false
                    exactMatch: false
                    variations: ''
                    synonyms: ''
                    antonyms: ''
                    seo: false
                    doNotTranslate: false
                    translation:
                      localeId: fr-CA
                      translatedTerm: term 33 french ca
                      notes: some notes from user
                      translatorUserUid: 58870b8ee965
                      submittedForTranslation: false
                      lockTranslation: false
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'


  /glossary-api/v2/accounts/{accountUid}/glossaries/{glossaryUid}/locales/{localeId}/terms:
    get:
      description: 'Returns terms from a Glossary, including translations for the specified locale.'
      summary: Get Glossary Terms and Translations
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
        - name: glossaryUid
          in: path
          required: true
          type: string
        - name: localeId
          in: path
          required: true
          type: string
        - name: termUids
          in: query
          type: array
          items:
            type: string
          description: UIDs of specific terms to be retrieved (validation allows not more than 100 in single request)
        - name: termText
          in: query
          type: string
          description: filter for term text in LIKE manner (case-insensitive).
        - name: translated
          in: query
          type: boolean
          description: flag to filter out terms by criteria of presence of translation. if not specified - it is not taken into account
        - name: limit
          in: query
          type: integer
          description: pagination portion size
        - name: offset
          in: query
          type: integer
          description: pagination offset value
        - name: sort
          in: query
          type: string
          description:  sorting instructions. represents field to sort by and direction separated by coma (i.e. sort=termText,desc). We support sorting by all fields.
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/TranslatedTermResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 2
                  items:
                  - translation:
                      createdDate: '2015-12-30T12:43:12Z'
                      modifiedDate: '2015-12-30T12:43:12Z'
                      localeId: fr-CA
                      translatedTerm: cold calls in french ca
                      notes: ''
                      submittedForTranslation: true
                      translatorUserUid: 58870b8ee964
                      lockTranslation: false
                    termUid: e390a4d6-aef2-11e5-b159-0ad0c2f6b537
                    termText: cold calls
                    caseSensitive: false
                    exactMatch: false
                    partOfSpeechCode: UNSPECIFIED
                    definition: ''
                    variations: ''
                    synonyms: ''
                    antonyms: ''
                    seo: false
                    doNotTranslate: false
                    deprecated: false
                    notes: ''
                    createdDate: '2015-12-30T12:43:12Z'
                    modifiedDate: '2015-12-30T12:43:12Z'
                  - translation:
                      createdDate: '2015-12-30T12:43:12Z'
                      modifiedDate: '2015-12-30T12:43:12Z'
                      localeId: fr-CA
                      translatedTerm: cold call french ca
                      notes: ''
                      submittedForTranslation: false
                      translatorUserUid: 58870b8ee966
                      lockTranslation: false
                    termUid: e390a4d6-aef2-11e5-b159-0ad0c2f6b538
                    termText: cold call
                    caseSensitive: false
                    exactMatch: false
                    partOfSpeechCode: ADJECTIVE
                    definition: ''
                    variations: ''
                    synonyms: ''
                    antonyms: ''
                    seo: false
                    doNotTranslate: false
                    deprecated: false
                    notes: ''
                    createdDate: '2015-12-30T12:43:12Z'
                    modifiedDate: '2015-12-30T12:43:12Z'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'


  /glossary-api/v2/accounts/{accountUid}/locales/{localeId}/terms:
    get:
      description: |-
        If performance is an issue, and client wants to avoid makeing several calls to get terms from different glossaries - this call serves this purpose. Glossary uid is omitted from URI path, but security check is performed that all requested terms belong to glossaries which are connected to account specified in path. Validation works in atomic fashion - either all terms comply criteria, or non is accepted.
        Response contains glossary uids for every term, to show which glossary term belongs to (glossaryUid field in response is specific for this API call only).

      summary: Returns terms with translations for particular locale for multiple glossaries
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
        - name: localeId
          in: path
          required: true
          type: string
        - name: termUids
          in: query
          type: array
          items:
            type: string
          description: UIDs of specific terms to be retrieved (validation allows not more than 100 in single request)
        - name: termText
          in: query
          type: string
          description: filter for term text in LIKE manner (case-insensitive).
        - name: translated
          in: query
          type: boolean
          description: flag to filter out terms by criteria of presence of translation. if not specified - it is not taken into account
        - name: limit
          in: query
          type: integer
          description: pagination portion size
        - name: offset
          in: query
          type: integer
          description: pagination offset value
        - name: sort
          in: query
          type: string
          description:  sorting instructions. represents field to sort by and direction separated by coma (i.e. sort=termText,desc). We support sorting by all fields.
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/TermWithGlossaryUidListResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 2
                  items:
                  - translation:
                      localeId: fr-FR
                      translatedTerm: arabian architecture in french
                      notes: ''
                      translatorUserUid:
                      lockTranslation: false
                      submittedForTranslation: false
                      createdDate: '2015-10-21T11:08:01Z'
                      modifiedDate: '2015-10-27T13:09:56Z'
                    termUid: 6b3e1e8c-eb40-4c32-a9f7-024e407b0b30
                    termText: arabian architecture
                    caseSensitive: true
                    exactMatch: false
                    partOfSpeechCode: VERB
                    definition: ''
                    variations: ''
                    synonyms: ''
                    antonyms: ''
                    seo: true
                    doNotTranslate: false
                    deprecated: false
                    notes: ''
                    createdByUserUid: kjakjf82v
                    glossaryUid: bdf416ee-98ff-11e5-b159-0ad0c2f6b537
                    createdDate: '2015-10-19T15:48:34Z'
                    modifiedDate: '2015-11-09T15:33:19Z'
                  - translation:
                      localeId: fr-FR
                      translatedTerm: summer time french 22
                      notes: ''
                      translatorUserUid:
                      lockTranslation: false
                      submittedForTranslation: false
                      createdDate: '2015-12-02T14:28:00Z'
                      modifiedDate: '2015-12-02T14:28:00Z'
                    termUid: aaf416ee-98ff-11e5-b159-0ad0c2f6b537
                    termText: summer time
                    caseSensitive: false
                    exactMatch: false
                    partOfSpeechCode: ADJECTIVE
                    definition: ''
                    variations: ''
                    synonyms: ''
                    antonyms: ''
                    seo: false
                    doNotTranslate: false
                    deprecated: false
                    notes: ''
                    createdByUserUid: kjakjf82v
                    glossaryUid: bbf416ee-98ff-11e5-b159-0ad0c2f6b537
                    createdDate: '2015-12-02T14:19:15Z'
                    modifiedDate: '2015-12-02T14:19:15Z'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'


  /glossary-api/v2/accounts/{accountUid}/glossaries/{glossaryUid}/terms/{termUid}:
    put:
      description: 'Edits the details of a glossary term. With the exception of the translation object, you must provide all desired fields every time you edit the term. If you do not provide a field or leave it blank, any existing value for that field will be deleted. To add translations for multiple locales, make a separate request for each locale. Keep all fields except for the translation object identical in each request.'
      summary: Edit glossary term
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
        - name: glossaryUid
          in: path
          required: true
          type: string
        - name: termUid
          in: path
          required: true
          type: string
        - name: term
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateTerm'
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/TranslatedTermResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      description: 'Delete a Glossary term. This will remove the term and all translations.'
      summary: Delete term
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
        - name: glossaryUid
          in: path
          required: true
          type: string
        - name: termUid
          in: path
          required: true
          type: string
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/SuccessResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /glossary-api/v2/projects/{projectUid}/glossaries/{glossaryUid}/terms/authorization:
    put:
      description: Sends selected terms for translation via specified workflows to chosen target locales.
      summary: Authorize terms for translation
      tags:
        - Glossaries
      parameters:
        - name: projectUid
          in: path
          required: true
          type: string
        - name: glossaryUid
          in: path
          required: true
          type: string
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/AuthorizeTerms'
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/SuccessResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /glossary-api/v2/accounts/{accountUid}/glossaries/{glossaryUid}/download:
    get:
      description: Downloads a glossary as a CSV, TBX or XLSX (Open Excel) file.
      summary: Download glossary
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
        - name: glossaryUid
          in: path
          required: true
          type: string
        - name: format
          in: query
          required: true
          type: string
          enum: [csv, tbx, xlsx]
        - name: localeIds
          in: query
          type: string
          description: 'Comma-separated list of locales for which to return translations'
      responses:
        200:
          description: 'CSV File'
          schema:
            type: file
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /glossary-api/v2/accounts/{accountUid}/import-jobs:
    post:
      description: Creates a new Glossary in your account from an uploaded Excel spreadsheet. The format of the spreadsheet is important. See Import Glossary and Glossary Spreadsheet Format.
      summary: Create new glossary from Excel file
      tags:
        - Glossaries
      consumes:
        - multipart/form-data
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
        - name: name
          in: formData
          required: true
          type: string
          description: 'A name for the glossary. This name must be unique. Attempting to use a name already in use in the account will return an error.'
        - name: sourceLocaleId
          in: formData
          required: true
          type: string
          description: 'Source locale for the glossary.'
        - name: description
          in: formData
          required: true
          type: string
          description: 'Description for the glossary'
        - name: importFile
          in: formData
          required: true
          type: file
          description: 'File containing the Glossary you want to import. See Glossary Spreadsheet Format for details.'
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/GlossaryImportJob'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  glossaryImportJobUid: 78d93dde-5e3d-4beb-8171-415f82ca2c7b
                  glossary:
                    glossaryUid: 5c8d2aa8-e254-4ab3-8eb3-3b96b24f8609
                    name: Import keysight test
                    accountUid: 8a196313
                    createdByUserUid: 58870b8ee965
                    sourceLocaleId: en
                    description: test desc
                    createdDate: '2016-05-18T12:04:38Z'
                  fileName: ExampleImportGlossary2.xlsx
                  accountUid: b76d6285
                  glossaryImportJobStatus: PENDING
                  termsNumber: 10
                  termsProcessed: 0
                  localesNumber: 20
                  createdDate: '2016-03-21T15:00:48Z'
                  modifiedDate: '2016-03-21T15:00:48Z'
                  createdByUserUid: 58870b8ee965
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /glossary-api/v2/accounts/{accountUid}/import-jobs/{glossaryImportJobUid}:
    get:
      description: Checks the status of a glossary import.
      summary: Create new Glossary from Excel file - check status
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
        - name: glossaryImportJobUid
          in: path
          required: true
          type: string
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/GlossaryImportJob'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  glossaryImportJobUid: 78d93dde-5e3d-4beb-8171-415f82ca2c7b
                  glossary:
                    glossaryUid: 5c8d2aa8-e254-4ab3-8eb3-3b96b24f8609
                    name: Import keysight test
                    accountUid: 8a196313
                    createdByUserUid: 58870b8ee965
                    sourceLocaleId: en
                    description: test desc
                    createdDate: '2016-05-18T12:04:38Z'
                  fileName: ExampleImportGlossary2.xlsx
                  accountUid: b76d6285
                  glossaryImportJobStatus: PENDING
                  termsNumber: 10
                  termsProcessed: 0
                  localesNumber: 20
                  createdDate: '2016-03-21T15:00:48Z'
                  modifiedDate: '2016-03-21T15:00:48Z'
                  createdByUserUid: 58870b8ee965
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /glossary-api/v2/dictionary/parts-of-speech:
    get:
      description: Order is fixed and consistent throughout the calls.
      summary: Get list of parts of speech
      tags:
        - Glossaries
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/PartsOfSpeechList'
          examples:
            response:
              code: SUCCESS
              data:
                totalCount: 9
                items:
                - partOfSpeechCode: NOUN
                  description: Noun
                - partOfSpeechCode: VERB
                  description: Verb
                - partOfSpeechCode: ADJECTIVE
                  description: Adjective
                - partOfSpeechCode: ADVERB
                  description: Adverb
                - partOfSpeechCode: PRONOUN
                  description: Pronoun
                - partOfSpeechCode: PREPOSITION
                  description: Preposition
                - partOfSpeechCode: INTERJECTION
                  description: Interjection
                - partOfSpeechCode: CONJUNCTION
                  description: Conjunction
                - partOfSpeechCode: UNSPECIFIED
                  description: Unspecified
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'



definitions:

  SuccessResponse:
    type: object
    required:
      - code
    properties:
      code:
        type: string
        enum:
          - SUCCESS
  ErrorResponse:
    type: object
    required:
      - response
    properties:
      response:
        type: object
        required:
          - code
          - errors
        properties:
          code:
            type: string
            enum:
              - VALIDATION_ERROR
              - AUTHENTICATION_ERROR
              - AUTHORIZATION_ERROR
              - RESOURCE_LOCKED
              - MAX_OPERATIONS_LIMIT_EXCEEDED
              - GENERAL_ERROR
              - MAINTENANCE_MODE_ERROR
          errors:
            type: array
            items:
              $ref: '#/definitions/Error'
  Error:
    type: object
    required:
      - key
      - message
    properties:
      key:
        type: string
      message:
        type: string
      details:
        type: object

  EmptyResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          default: null


  AuthenticationRequest:
    type: object
    required:
      - userIdentifier
      - userSecret
    properties:
      userIdentifier:
        type: string
        description: API v2 user identifier
      userSecret:
        type: string
        description: API v2 user secret

  AuthenticationResponse:
    allOf:
      - $ref: '#/definitions/SuccessResponse'
      - type: object
        properties:
          data:
            $ref: '#/definitions/Authentication'
  Authentication:
    type: object
    required:
      - accessToken
      - refreshToken
    properties:
      accessToken:
        description: the access token
        type: string
      refreshToken:
        description: the refresh token
        type: string
      expiresIn:
        description: TTL in seconds for the access token
        type: integer
      refreshExpiresIn:
        description: TTL in seconds for the refresh token
        type: integer
      tokenType:
        description: The access token type
        type: string
        enum:
          - Bearer

  AuthenticationRefreshRequest:
    type: object
    required:
      - refreshToken
    properties:
      refreshToken:
        type: string
        description: The refresh token returned from a previous authentication request

        
  FilesAPIUploadSuccessResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - overWritten
            - stringCount
            - wordCount
          properties:
            overWritten:
              type: boolean
              description: Indicates whether the uploaded file has overwritten an existing file
            stringCount:
              type: integer
              description: The number of strings in the uploaded file
            wordCount:
              type: integer
              description: The number of words in the uploaded file
              
  FilesAPIUploadAcceptedResponse:
    type: object
    required:
      - code
      - data
    properties:
      code:
        type: string
        enum:
          - ACCEPTED
      data:
        type: object
        required: 
          - message
        properties:
          message:
            type: string

  FilesAPIListFilesSuccessResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - totalCount
            - items
          properties:
            totalCount:
              type: integer
              description: The number of files that match your specified criteria
            items:
              type: array
              items:
                $ref: '#/definitions/FilesAPIListFileItem'

  FilesAPIListFileItem:
    type: object
    required:
      - fileUri
      - created
      - lastUploaded
      - fileType
      - hasInstructions
    properties:
      fileUri:
        type: string
        description: A unique identifier for the uploaded file
      created:
        type: string
        format: YYYY-MM-DDThh:mm:ssZ
        description: The time and date of the first upload
      lastUploaded:
        type: string
        format: YYYY-MM-DDThh:mm:ssZ
        description: The time and date of the last upload
      fileType:
        type: string
        description: The type of file
        enum: *fileTypes
      hasInstructions:
        type: boolean
        description: Whether translator instructions have been captured for the file.
    example:
      fileUri: "file.json"
      created: "2016-12-31T00:00:00Z"
      lastUploaded: "2016-01-01T00:00:00Z"
      fileType: "json"
      hasInstructions: false

  FileTypes:
    type: string
    enum: *fileTypes
    description: |
      Existing values: android ios gettext html javaProperties yaml xliff xml json docx pptx xlsx idml qt resx plaintext cvs stringsdict


  FilesAPIListFileTypesSuccessResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - items
          properties:
            items:
              type: array
              items:
                $ref: '#/definitions/FileTypes'
    example:
      application/json:
        response:
          code: SUCCESS
          data:
            items:
              - android
              - ios
              - gettext
  FilesAPIStatusAllLocalesSuccessResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - fileUri
            - totalStringCount
            - totalWordCount
            - fileType
            - lastUploaded
            - totalCount
            - parserVersion
            - hasInstructions
            - items
          properties:
            fileUri:
              type: string
              description: A unique identifier for the uploaded file
            totalCount:
              type: integer
              description: Total number of locales status is returned for
            totalStringCount:
              type: integer
              description: The number of strings in the uploaded file, minus any excluded content
            totalWordCount:
              type: integer
              description: The number of words in the uploaded file, minus any excluded content
            fileType:
              type: string
              description: The type of file
              enum: *fileTypes
            created:
              type: string
              format: YYYY-MM-DDThh:mm:ssZ
              description: The time and date of the first upload
            lastUploaded:
              type: string
              format: YYYY-MM-DDThh:mm:ssZ
              description: The time and date of the last upload
            parserVersion:
              type: integer
              description: Records the version of Smartling's File Parser used to parse the file
            hasInstructions:
              type: boolean
              description: Whether translator instructions have been captured for the file
            items:
              type: array
              items:
                $ref: '#/definitions/FilesAPIStatusAllLocalesItem'

  FilesAPIStatusAllLocalesItem:
    type: object
    required:
      - localeId
      - authorizedStringCount
      - authorizedWordCount
      - completedStringCount
      - completedWordCount
      - excludedStringCount
      - excludedWordCount
    properties:
      localeId:
        type: string
      authorizedStringCount:
        type: integer
        description: The number of strings in the uploaded file that are authorized (available for translation)
      authorizedWordCount:
        type: integer
        description: The number of words in the uploaded file that are authorized (available for translation)
      completedStringCount:
        type: integer
        description: The number of published strings in the uploaded file
      completedWordCount:
        type: integer
        description: The number of published words in the uploaded file
      excludedStringCount:
        type: integer
        description: The number of excluded strings in the uploaded file
      excludedWordCount:
        type: integer
        description: The number of excluded words in the uploaded file

  FilesAPIStatusSingleLocaleSuccessResponse:
      allOf:
      - $ref: '#/definitions/SuccessResponse'
      - type: object
        properties:
          data:
            type: object
            required:
              - fileUri
              - totalStringCount
              - totalWordCount
              - authorizedStringCount
              - authorizedWordCount
              - completedStringCount
              - completedWordCount
              - excludedStringCount
              - excludedWordCount
              - fileType
              - lastUploaded
              - created
              - parserVersion
              - hasInstructions
            properties:
              authorizedStringCount:
                type: integer
                description: The number of strings in the uploaded file that are authorized (available for translation)
              authorizedWordCount:
                type: integer
                description: The number of words in the uploaded file that are authorized (available for translation)
              completedStringCount:
                type: integer
                description: The number of published strings in the uploaded file
              completedWordCount:
                type: integer
                description: The number of published words in the uploaded file
              excludedStringCount:
                type: integer
                description: The number of excluded strings in the uploaded file
              excludedWordCount:
                type: integer
                description: The number of excluded words in the uploaded file
              fileUri:
                type: string
                description: A unique identifier for the uploaded file
              totalStringCount:
                type: integer
                description: The number of strings in the uploaded file, minus any excluded content
              totalWordCount:
                type: integer
                description: The number of words in the uploaded file, minus any excluded content
              fileType:
                type: string
                description: The type of file
                enum: *fileTypes
              created:
                type: string
                format: YYYY-MM-DDThh:mm:ssZ
                description: The time and date of the first upload
              lastUploaded:
                type: string
                format: YYYY-MM-DDThh:mm:ssZ
                description: The time and date of the last upload
              parserVersion:
                type: integer
                description: Records the version of Smartling's File Parser used to parse the file
              hasInstructions:
                type: integer
                description: Whether translator instructions have been captured for the file

  FilesAPILastModifiedSingleLocaleSuccessResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          $ref: '#/definitions/FilesAPILastModifiedResponseItem'

  FilesAPILastModifiedResponseItem:
      type: object
      required:
        - localeId
        - lastModified
      properties:
        localeId:
          type: string
          description: A unique identifier for the uploaded file
        lastModified:
          type: string
          format: YYYY-MM-DDThh:mm:ssZ
          description: The date the file was last modified for the specified locale

  FilesAPILastModifiedAllLocalesSuccessResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - totalCount
            - items
          properties:
            totalCount:
              type: integer
              description: |
            items:
              type: array
              items:
                $ref: '#/definitions/FilesAPILastModifiedResponseItem'


  FilesAPITranslationImportSuccessResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - wordCount
            - stringCount
            - translationImportErrors
          properties:
            wordCount:
              type: integer
              description: Words imported.
            stringCount:
              type: integer
              description: Strings imported
            translationImportErrors:
              type: array
              items:
                $ref: '#/definitions/FilesApiTranslationImportErrorItem'

  FilesApiTranslationImportErrorItem:
    type: object
    required:
      - importKey
      - stringHashcode
      - fileUri
      - messages
    properties:
      importKey:
        type: string
        description: Key for an imported string affected by the error
      stringHashcode:
        type: string
        description: The hashcode of a string affected by the error
      fileUri:
        type: string
        description: A unique identifier for the uploaded file
      messages:
        type: array
        items:
          type: string
        description: Information about an import error

#
# Context Definitions
#
  ContextListResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
           - items
          properties:
            offset:
              description: Result set is partial, if not empty. To retreive everything, request should be repeated with offset value.
              type: string
            items:
              type: array
              items:
                $ref: '#/definitions/Context'

  ContextResponse:
    type: object
    properties:
      response:
        type: object
        properties:
          code:
            description: Code of the completed operation.
            type: string
            enum:
              - SUCCESS
          data:
            description: Basic information about the context.
            type: object
            properties:
              contextUid:
                description: Unique identifier for the context.
                type: string
              contextType:
                description: Type of context file.
                type: string
                enum:
                  - IMAGE
                  - HTML
                  - VIDEO
              name:
                description: File name for IMAGE context, URL for HTML Context and video URL for VIDEO context.
                type: string
              created:
                description: ISO8601 date and time string
                type: string
                format: date-time

  AsyncMatchResponse:
    type: object
    properties:
      response:
        type: object
        properties:
          code:
            description: Code of the completed operation.
            type: string
            enum:
              - SUCCESS
          data:
            type: object
            properties:
              matchId:
                description: Identifier of the started match operation. Should be specified for getting matching stats.
                type: string
                format: uuid

  AsyncMatchStatsResponse:
    type: object
    properties:
      response:
        type: object
        properties:
          code:
            description: Code of the completed operation.
            type: string
            enum:
            - SUCCESS
          data:
            type: object
            properties:
              matchId:
                description: Identifier of the started match operation. Should be specified for getting matching stats.
                type: string
                format: uuid
              status:
                type: string
                enum:
                  - IN_PROGRESS
                  - COMPLETED
                  - FAILED
              createdDate:
                type: string
                format: date-time
              modifiedDate:
                type: string
                format: date-time
              bindings:
                type: array
                items:
                  $ref: '#/definitions/Binding'

  CreateBindingsResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - created
          properties:
            created:
              type: object
              required:
                - items
              properties:
                totalCount:
                  type: integer
                items:
                  type: array
                  items:
                    $ref: '#/definitions/Binding'
            errors:
              type: object
              required:
                - items
              properties:
                totalCount:
                  type: integer
                items:
                  type: array
                  items:
                    type: object
                    required:
                      - message
                    properties:
                      message:
                        type: string

  BindingsResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - items
          properties:
            totalCount:
              type: integer
            items:
              type: array
              items:
                $ref: '#/definitions/Binding'

  MatchResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          properties:
            newBindings:
              description: Array of new bindings by matching. For details on each binding object see the Get Bindings response.
              type: array
              items:
                $ref: '#/definitions/Binding'

  Context:
    description: Basic information about the context.
    type: object
    required:
      - name
    properties:
      contextUid:
        description: Unique identifier for the context file
        type: string
      contextType:
        type: string
        description: Type of context file. Currently, **HTML**, **IMAGE** or **VIDEO** types are supported.
        enum:
          - IMAGE
          - HTML
          - VIDEO
      name:
        description: File name for **IMAGE** context, URL for **HTML** Context and video URL for **VIDEO** context.
        type: string

  Coordinates:
    description: Describes the location and size of a box enclosing the string in a context image. ‘top’ and ‘left’ are the distance in pixels of the top left corner of the string from the top and left of the image. ‘width’ and ‘height’ are the dimensions of the string in pixels. This information is used to highlight the position of the string when displaying the context image in the Translation Interface. If coordinates are not provided, Smartling will attempt to locate the string on the image using Optical Character Recognition. If OCR fails, coordinates will default to 0, 0, 0, 0, meaning the image will be displayed when the string is translated, without any highlighting to show the position of the string.
    type: object
    required:
      - top
      - left
      - height
      - width
    properties:
      top:
        type: number
      left:
        type: number
      height:
        type: number
      width:
        type: number

  Timecode:
    description: Number of seconds for the period of string appearance in a video relative to the video start time.
    type: object
    properties:
      startTime:
        type: integer
        format: int64
      endTime:
        type: integer
        format: int64

  Binding:
    description: String to context binding
    type: object
    required:
      - contextUid
      - stringHashcode
    properties:
      bindingUid:
        type: string
        description: Unique identifier for the context binding.
      contextUid:
        type: string
        description: Unique identifier for the context.
      stringHashcode:
        type: string
        description: Unique identifier for the translatable.
      coordinates:
        $ref: '#/definitions/Coordinates'
      timecode:
        $ref: '#/definitions/Timecode'
      anchors:
        description: Wrapper HTML element anchor numbers
        type: array
        items:
          type: string

  BindingsRequest:
    type: object
    properties:
      bindings:
        description: Array of string-to-context bindings
        type: array
        items:
          description: Binding request
          type: object
          required:
            - contextUid
            - stringHashcode
          properties:
            contextUid:
              description: Unique identifier for the context.
              type: string
              format: uuid
            stringHashcode:
              description: Unique identifier for the translatable.
              type: string
              format: hash
            coordinates:
              $ref: '#/definitions/Coordinates'
            timecode:
              $ref: '#/definitions/Timecode'
            selector:
              description: Values of "data-sl-anchor" attributes of HTML elements
              type: object
              properties:
                anchors:
                  type: array
                  items:
                    type: string

  MatchRequest:
    description: |-
      Array of string hashcodes to match against.
      If the request body is left blank, or empty array is passed, *all strings in the project* will be included in the match.
    type: object
    properties:
      stringHashcodes:
        type: array
        items:
          type: string
          format: hash

  WatcherRequest:
    type: object
    required:
      - email
      - name
    properties:
      email:
        type: string
        description: watcher email
        example: my@maul.com
      name:
        type: string
        description: watcher name
        example: Alonso
      enabled:
        type: boolean
        description: should send email notification to this email
        example: true

  IssueRequest:
    type: object
    required:
      - issueText
      - issueTypeCode
      - issueSubTypeCode
      - string
    properties:
      issueText:
        type: string
        description: Free text field explaining an issue.
        example: This translation is incorrect. Please fix.
      issueTypeCode:
        type: string
        enum:
          - SOURCE
          - TRANSLATION
        description: >-
          Identifies the issue type. issueTypeCode is either `SOURCE` or
          `TRANSLATION`. Each have their own set of issueSubType values
      issueSubTypeCode:
        type: string
        enum:
          - CLARIFICATION
          - MISSPELLING
          - POOR_TRANSLATION
          - DOES_NOT_FIT_SPACE
          - PLACEHOLDER_ISSUE
          - GENERAL_ISSUE
          - REVIEW_TRANSLATION
        description: >-
          For issueTypeCode=SOURCE - CLARIFICATION | MISSPELLING, For
          issueTypeCode=TRANSLATION - POOR_TRANSLATION | DOES_NOT_FIT_SPACE |
          PLACEHOLDER_ISSUE | GENERAL_ISSUE | REVIEW_TRANSLATION
      string:
        type: object
        required:
          - hashcode
          - localeId
        properties:
          hashcode:
            type: string
            description: >-
              Unique identifier for a string in Smartling. Used by the Issues
              API to attach an issue to a string. You can get the hashcode for a
              string via String API.
            example: c32c16cddafd63dfa0dc12449372a093
          localeId:
            type: string
            description: An identifying code for a language in Smartling.
            example: ru-RU
  IssueTextRequest:
    type: object
    required:
      - issueText
    properties:
      issueText:
        type: string
        description: Free text field explaining an issue.
        example: Edited issue text.
  IssueStateRequest:
    type: object
    required:
      - issueStateCode
    properties:
      issueStateCode:
        type: string
        enum:
          - OPENED
          - RESOLVED
        description: The state of the issue. Accepted values are `OPENED` or `RESOLVED`.
  CommentRequest:
    type: object
    required:
      - commentText
    properties:
      commentText:
        type: string
        description: Text of the comment you want to make.
        example: 'Hey, are you sure this is what you want?'
  FindRequest:
    type: object
    properties:
      createdDateBefore:
        type: string
        example: '2015-12-23T18:14:09Z'
      createdDateAfter:
        type: string
        example: '2015-11-10T15:14:09Z'
      resolvedDateBefore:
        type: string
        example: '2015-12-23T18:14:09Z'
      resolvedDateAfter:
        type: string
        example: '2015-11-10T15:14:09Z'
      stringFilter:
        type: object
        properties:
          hashcodes:
            type: array
            items:
              type: string
            example:
              - afe47cdaffe0c0226506919c291d9c1a
              - afe37cdaffe0c0226508919c291d9c1a
              - afe47cdaffe0c02265406919c291d2c1a
          localeIds:
            type: array
            items:
              type: string
            example:
              - ru-RU
      sortBy:
        type: object
        properties:
          items:
            type: array
            items:
              type: object
              properties:
                direction:
                  type: string
                  enum:
                    - ASC
                    - DESC
                fieldName:
                  type: string
                  enum:
                    - issueTypeCode
                    - issueSubTypeCode
                    - issueStateCode
                    - createdDate
                    - resolvedDate
                    - hashcode
                    - issueText
                    - issueTextModifiedDate
                    - resolvedByUserUid
                    - reportedByUserUid
        example: [{"direction": "ASC", "fieldName": "createdDate"}, {"direction": "DESC", "fieldName":"resolvedDate"}]
      limit:
        type: integer
        default: 30
        example: 30
        minimum: 0
      offset:
        type: integer
        default: 0
        example: 0
        minimum: 0
      reportedByUserUid:
        type: string
        example: 661801f19693
      issueStateCodes:
        type: array
        items:
          type: string
          enum:
            - OPENED
            - RESOLVED
      issueTypeCodes:
        type: array
        items:
          type: string
          enum:
            - SOURCE
            - TRANSLATION
      issueSubTypeCodes:
        type: array
        items:
          type: string
          enum:
            - CLARIFICATION
            - MISSPELLING
            - POOR_TRANSLATION
            - DOES_NOT_FIT_SPACE
            - PLACEHOLDER_ISSUE
            - GENERAL_ISSUE
            - REVIEW_TRANSLATION
  CountRequest:
    type: object
    properties:
      createdDateBefore:
        type: string
        example: '2015-12-23T18:14:09Z'
      createdDateAfter:
        type: string
        example: '2015-11-10T15:14:09Z'
      resolvedDateBefore:
        type: string
        example: '2015-12-23T18:14:09Z'
      resolvedDateAfter:
        type: string
        example: '2015-11-10T15:14:09Z'
      stringFilter:
        type: object
        properties:
          hashcodes:
            type: array
            items:
              type: string
            example:
              - afe47cdaffe0c0226506919c291d9c1a
              - afe37cdaffe0c0226508919c291d9c1a
              - afe47cdaffe0c02265406919c291d2c1a
          localeIds:
            type: array
            items:
              type: string
            example:
              - ru-RU
      reportedByUserUid:
        type: string
        example: 661801f19693
      issueStateCodes:
        type: array
        items:
          type: string
          enum:
            - OPENED
            - RESOLVED
      issueTypeCodes:
        type: array
        items:
          type: string
          enum:
            - SOURCE
            - TRANSLATION
      issueSubTypeCodes:
        type: array
        items:
          type: string
          enum:
            - CLARIFICATION
            - MISSPELLING
            - POOR_TRANSLATION
            - DOES_NOT_FIT_SPACE
            - PLACEHOLDER_ISSUE
            - GENERAL_ISSUE
            - REVIEW_TRANSLATION

#
# Strings API definitions
#
  CreateStringResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          properties:
            totalCount:
              type: number
            items:
              type: array
              items:
                $ref: '#/definitions/CreatedString'
            wordCount:
              description: Total number of words captured as a result of the request.
              type: number
            stringCount:
              description: Total number of strings captured as a result of the request.
              type: number
            processUid:
              description: If the request takes longer than 60 seconds to process, a `202` response will be returned, indicating the request has not failed, but is not yet complete. Use the processUid value to check the status of the request using the Check Create String Status request.
              type: string

  CreatedString:
    description: Information on the created or updated string
    type: object
    properties:
      variant:
        description: String variant
        type: string
      stringText:
        type: string
        description: The text for this string
      parsedStringText:
        type: string
        description: The text for this string used to define its uniqueness in the Smartling system.  This is after placeholders have been processed and escaping normalization has been applied.
      hashcode:
        description: The generated unique idenitfier for this created or updated string.
        type: string
      overWritten:
        description: Idenitfies if the string was already in the system.
        type: string

  StringResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          properties:
            totalCount:
              type: number
            items:
              type: array
              items:
                $ref: '#/definitions/String'

  String:
    description: Information on string
    type: object
    properties:
      variant:
        description: String variant
        type: string
      stringText:
        type: string
        description: The text for this string
      parsedStringText:
        type: string
        description: The text for this string used to define its uniqueness in the Smartling system.  This is after placeholders have been processed and escaping normalization has been applied.
      hashcode:
        description: The generated unique idenitfier for this created or updated string.
        type: string
      keys:
        description: If this string is associated with one or more resource files this is a list of the associated resource keys.
        type: array
        items:
          type: object
          properties:
            key:
              description: fileUri of the key
              type: string
            fileUri:
              description: resource key
              type: string

  CreateStringStatusResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          properties:
            processUid:
              description: Unique identifer for a create string request.
              type: string
            processState:
              description: State of the request
              type: string
              enum:
                - OPEN
                - CLOSED
                - FAILED
            createdDate:
              description: Total number of strings captured as a result of the request.
              type: string
            modifiedDate:
              description: If the request takes longer than 60 seconds to process, a `202` response will be returned, indicating the request has not failed, but is not yet complete. Use the processUid value to check the status of the request using the Check Create String Status request.
              type: string
            processStatistics:
              description: Information on the created or updated string
              type: object
              properties:
                requested:
                  description: strings requested
                  type: string
                processed:
                  description: strings processed
                  type: string
                errored:
                  description: strings that had errors
                  type: string
                skipped:
                  description: strings skipped
                  type: string

  TranslationResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          properties:
            totalCount:
              type: number
            items:
              type: array
              items:
                $ref: '#/definitions/Translation'

  Translation:
    description: Information on a translation
    type: object
    properties:
      variant:
        description: String variant
        type: string
      stringText:
        type: string
        description: The text for this string
      parsedStringText:
        type: string
        description: The text for this string used to define its uniqueness in the Smartling system.  This is after placeholders have been processed and escaping normalization has been applied.
      hashcode:
        description: The generated unique idenitfier for this created or updated string.
        type: string
      keys:
        description: If this string is associated with one or more resource files this is a list of the associated resource keys.
        type: array
        items:
          type: object
          properties:
            key:
              description: fileUri of the key
              type: string
            fileUri:
              description: resource key
              type: string
      targetlocaleId:
        description: Locale ID of this translation
        type: string
      workflowStepUid:
        description: Current workflow step for this translation
        type: string
        format: uuid
      translations:
        type: array
        items:
          type: object
          properties:
            translation:
              description: Translation text
              type: string
            pluralForm:
              description: Pural form of the translation.  `null` if this translation is not a plural.
              type: string
            modifiedDate:
              description: When this translation was last modified.
              type: string

#
# Glossary API definitions:
#

  Glossary:
    required:
      - glossaryUid
      - name
      - sourceLocaleId
    properties:
      glossaryUid:
        type: string
        example: 50d9dab5-6b8b-11e5-ba24-127b00b163a3
      name:
        type: string
        example: Another document tester-Glossary
      description:
        type: string
        example: Description of a Glossary
      sourceLocaleId:
        type: string
        example: en-US
      createdByUserUid:
        type: string
        example: ah27fhq8
      createdDate:
        type: string
        format: date-time
        example: '2015-11-21T01:51:17Z'

  TermData:
    required:
      - termText
    properties:
      termText:
        type: string
        example: cold calls
      partOfSpeechCode:
        type: string
        example: UNSPECIFIED
      definition:
        type: string
      notes:
        type: string
      caseSensitive:
        type: boolean
      exactMatch:
        type: boolean
      variations:
        type: string
      synonyms:
        type: string
      antonyms:
        type: string
      seo:
        type: boolean
      doNotTranslate:
        type: boolean
  SourceTerm:
    allOf:
    - $ref: '#/definitions/TermData'
    - type: object
      properties:
        termUid:
          type: string
          example: e390a4d6-aef2-11e5-b159-0ad0c2f6b537
        createdDate:
          type: string
          format: 'date-time'
        modifiedDate:
          type: string
          format: 'date-time'

  TranslatedTerm:
    allOf:
    - $ref: '#/definitions/SourceTerm'
    - type: object
      properties:
        translation:
          $ref: '#/definitions/TermTranslation'

  TermWithGlossaryUid:
    allOf:
      - $ref: '#/definitions/TranslatedTerm'
      - type: object
        properties:
          glossaryUid:
            type: string
          createdByUserUid:
            type: string
  TermTranslationData:
    required:
      - localeId
      - translatedTerm
    properties:
      localeId:
        type: string
        example: fr-CA
      translatedTerm:
        type: string
        example: cold calls in french ca
      notes:
        type: string
      lockTranslation:
        type: boolean
  TermTranslation:
    allOf:
      - $ref: '#/definitions/TermTranslationData'
      - type: object
        properties:
          translatorUserUid:
            type: string
          createdDate:
            type: string
            format: 'date-time'
          modifiedDate:
            type: string
            format: 'date-time'

  AuthorizeTerms:
    required:
      - termUids
      - authorization
    type: object
    properties:
      termUids:
        type: array
        items:
          type: string
          example: 65c62a7c-6b8b-11e5-ba24-127b00b163a3
      authorization:
        required:
          - localeWorkflows
        type: object
        properties:
          localeWorkflows:
            type: array
            items:
              $ref: '#/definitions/LocaleWorkflow'
  LocaleWorkflow:
    required:
      - targetLocaleId
      - workflowUid
    properties:
      targetLocaleId:
        type: string
        example: cy-GB
      workflowUid:
        type: string
        example: 9422471c2202
  GlossaryImportJob:
    properties:
      glossaryImportJobUid:
        type: string
      glossary:
        $ref: '#/definitions/Glossary'
      fileName:
        type: string
      accountUid:
        type: string
      glossaryImportJobStatus:
        type: string
        enum: [PENDING, IN_PROGRESS, SUCCESSFUL, FAILED]
      termsNumber:
        type: integer
        format: int32
      termsProcessed:
        type: integer
        format: int32
      localesNumber:
        type: integer
        format: int32
      createdByUserUid:
        type: string
      createdDate:
        type: string
      modifiedDate:
        type: string

  CreateGlossary:
    required:
      - name
      - description
      - sourceLocaleId
    type: object
    properties:
      name:
        type: string
        example: Some test glossary
      description:
        type: string
        example: some desc
      sourceLocaleId:
        type: string
        description: 'A valid Smartling Locale ID'
        example: en-US
  UpdateGlossary:
    allOf:
    - $ref: '#/definitions/CreateGlossary'

  CreateTerm:
    type: object
    allOf:
    - $ref: '#/definitions/TermData'
  UpdateTerm:
    type: object
    allOf:
    - $ref: '#/definitions/TermData'

  PartsOfSpeech:
    required:
      - partOfSpeechCode
    properties:
      partOfSpeechCode:
        type: string
        example: ADJECTIVE
      description:
        type: string
        example: Adjective

  GlossaryResponse:
    required:
      - response
    properties:
      response:
        allOf:
        - $ref: '#/definitions/SuccessResponse'
        - required:
            - data
          properties:
            data:
              $ref: '#/definitions/Glossary'
  GlossaryListResponse:
    required:
      - response
    properties:
      response:
        allOf:
        - $ref: '#/definitions/SuccessResponse'
        - required:
            - data
          properties:
            data:
              properties:
                totalCount:
                  type: number
                items:
                  type: array
                  items:
                    $ref: '#/definitions/Glossary'

  SourceTermListResponse:
    required:
      - response
    properties:
      response:
        allOf:
        - $ref: '#/definitions/SuccessResponse'
        - required:
            - data
          properties:
            data:
              properties:
                totalCount:
                  type: number
                items:
                  type: array
                  items:
                    $ref: '#/definitions/SourceTerm'
  TranslatedTermResponse:
    required:
      - response
    properties:
      response:
        allOf:
        - $ref: '#/definitions/SuccessResponse'
        - required:
            - data
          properties:
            data:
              $ref: '#/definitions/TranslatedTerm'
  TermWithGlossaryUidListResponse:
    required:
      - response
    properties:
      response:
        allOf:
        - $ref: '#/definitions/SuccessResponse'
        - required:
            - data
          properties:
            data:
              properties:
                totalCount:
                  type: number
                items:
                  type: array
                  items:
                    $ref: '#/definitions/TermWithGlossaryUid'
  PartsOfSpeechList:
    required:
      - response
    properties:
      response:
        allOf:
        - $ref: '#/definitions/SuccessResponse'
        - required:
            - data
          properties:
            data:
              properties:
                totalCount:
                  type: number
                items:
                  type: array
                  items:
                    $ref: '#/definitions/PartsOfSpeech'