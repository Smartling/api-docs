swagger: '2.0'
schemes:
  - https
host: api.smartling.com
basePath: /
produces:
  - application/json
consumes:
  - application/json
info:

  title: Smartling REST API Reference
  
  description: |
    Before you begin using the Smartling APIs, we recommend going through our [Getting Started](https://help.smartling.com/hc/en-us/categories/360000731893) section.
    

  version: '2.0.0'
  
  termsOfService: 'https://www.smartling.com/about/terms-and-conditions/'
  contact:
    email: support@smartling.com
  # license:
    # name: Apache 2.0
    # url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'smartling_logo.png'
externalDocs:
  description: Smartling Help Center
  url: 'https://help.smartling.com'


tags:
  - name: "Authentication"
    description: |-
      Smartling uses OAuth2 for authentication. To access the Smartling APIs, you'll first need to authenticate with your user identifier and user secret. An access token is returned that can be attached to the header of any API request. A refresh token is also returned.
      
      To obtain your user identifier and user secret, log in to Smartling.com and go to **API > Create Token**. Authenticating is as simple as calling the `/api.smartling.com/auth-api/v2/authenticate` with your `userIdentifier` and `userSecret`. The access token returned is valid for 5-minutes, and is used in the header of all subsequent requests.

      **Example for generating your access token:**

      ```bash 
        curl -X POST https://api.smartling.com/auth-api/v2/authenticate  -H 'content-type: application/json' -d '{    "userIdentifier": "userIdasdklj4348dk34!", "userSecret": "userSecret34i34kkd5634f" }'`
      ```
      ```
      {
          "response": {
              "code": "SUCCESS",
              "data": {
                      "accessToken": "eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOasdlkjn",
                      "refreshToken": "eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJkMTdkMmEw",
                      "expiresIn": 480,
                      "refreshExpiresIn": 3660,
                      "tokenType": "Bearer"
              }
          }
      }
      ```

      **Example of using your access token to list all projects for your account:**

      ```bash
        curl -X GET -H "Authorization: Bearer {accessToken}" 'https://api.smartling.com/accounts-api/v2/accounts/{accountUid}/projects
      ```
      ```
      {
          "response": {
              "code": "SUCCESS",
              "data": {
                  "totalCount": 1,
                  "items": [{
                               "projectId": "df324sdf5",
                               "projectName": "iOS Strings files",
                               "accountUid": "ab5f1939",
                               "archived": false,
                               "projectTypeCode": "APPLICATION_RESOURCES",
                               "sourceLocaleId": "en",
                               "sourceLocaleDescription": "English"
                           }
                  ]
              }
          }
      }

  - name: "Account & Projects"
    description: |-
      Each client within Smartling is given their own account with a designated `accountUid`. Within each account is any number of projects. All files, content, and jobs are tied to a particular project. The Accounts & Projects API will allow you to programmatically find and use the projects within your account.
  
  - name: "Files"
    description: |-
      Files are typically how you can exchange your content with Smartling to get translations. Smartling supports a wide variety of [file types](https://help.smartling.com/hc/en-us/articles/360001404234). When you upload a file to Smartling, it gets parsed into strings, which will then be sent into the translation queue.

  - name: "Jobs"
    description: |-
      A Smartling project (such as a mobile, web, files, or connector project) may contain one or more jobs. You may have multiple projects, each containing multiple jobs. Each job contains strings, consisting of words or phrases.
      The Jobs feature allows you to group and prioritize your content by name, due date, description, and reference number (optional). It also enables you to monitor the progress of your translations throughout completion.

      The Jobs API allows you to create a job, add a file to a job, authorize a job, and cancel a job, among many other actions. You have full control via the API to manage your job(s).

  - name: "Context"
    description: |-
      Visual context helps Translators make linguistic, layout, and spacing decisions based on where strings appear in your mobile or desktop application. The Context API supports uploading various forms of context (images and HTML), and associate the context with content in Smartling.

  - name: "Issues"
    description: |-
      The Issues feature is a way for users who are working on a translation workflow to communicate with other users about source content and translations. For example, a Translator might create an issue to ask a question about terminology in a particular string. 

      By using Issues, you can record any communication about a string, and this can be seen by anyone working on it. Issues streamline the translation workflow. Translators get answers to their questions about the original content so they can translate it quickly and correctly. Translation resources can review and provide feedback about translations collaboratively. 


      The Issues API provides methods for creating issues, changing the state of an issue, commenting on an issue, requesting detailed information, as well as creating reports on issues and comments.

  - name: "Glossaries"
    description: |-
      The Glossaries API allows you to create and edit glossaries in a Smartling account, and populate it with glossary terms. You can also download your glossaries as CSV or TBX files and import Excel spreadsheets to create new glossaries.

      **Glossaries API Usage Limitations**:
      * Maximum request size is 10MB.
      * Maximum file upload size is 10MB.
      * Maximum HTTP header size is 128KB.
      * For requests that use pagination, maximum page size is 5000 elements.
      * For requests that return entities by their UIDs, maximum is 100 elements.
      Rate limits:
      * Maximum 5 concurrent requests.
      * Maximum rate is 200 requests per 15-second window frame.

  - name: "Strings"
    description: |-
      A string is a piece of translation. Based on the source content, strings can be parsed differently. A string is then broken down further, into one or more segments.
      
      The Strings API allows you to directly upload strings to a Smartling project and fetch original strings or translations.

      For each string in a Smartling project, there is a unique identifier created by hashing together the parsed string text, variant metadata, and in some cases, namespace. When adding strings via the Strings API, each string will be unique. If you try to create a string with identical variant metadata and string text to a string that already exists in the project, the string will be overwritten.

paths:
  '/auth-api/v2/authenticate':
    post:
      description: >-
        Verifies the credentials of the connection attempt.
      summary: Authenticate
      tags:
        - Authentication
      parameters:
        - name: body
          in: body
          description: Authentication Request
          schema:
            $ref: '#/definitions/AuthenticationRequest'
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AuthenticationResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  accessToken: b816424c-2e95-11e7-93ae-92361f002671
                  refreshToken: c0a6f410-2e95-11e7-93ae-92361f002671
                  expiresIn: 480
                  refreshExpiresIn: 3660
                  tokenType: Bearer
        400: &Error400ResponseDefinition
          description: Provided request parameters are invalid.
          schema:
            $ref: '#/definitions/Error400Response'
          examples:
            application/json:
              response:
                code: VALIDATION_ERROR
                errors:
                  key: unknown.field
                  message: The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.
                  details: unknown.parameter
        401: &Error401ResponseDefinition
          description: Provided credentials are not valid.
          schema:
            $ref: '#/definitions/Error401Response'
          examples:
            application/json:
              response:
                code: AUTHENTICATION_ERROR
                errors:
                  key: invalid_token
                  message: Invalid token
                  details: {}
        429: &Error429ResponseDefinition
          description: Too many simultaneous API requests.
          schema:
            $ref: '#/definitions/Error429Response'
          examples:
            application/json:
              response:
                code: MAX_OPERATIONS_LIMIT_EXCEEDED
                errors:
                  key: too.many.requests
                  message: The limit of 10 concurrent Smartling file API operations for this project has been exceeded.
        500: &Error500ResponseDefinition
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error500Response'
      x-code-samples:
        - lang: curl
          source: |
            curl -X POST https://api.smartling.com/auth-api/v2/authenticate \
               -H 'content-type: application/json' \
               -d '{"userIdentifier": "Qw**********", "userSecret": "Zj**********"}'
  '/auth-api/v2/authenticate/refresh':
    post:
      description: >-
        A renewed access token that can be attached to the header of any
        API request.
      summary: Refresh access token
      tags:
        - Authentication
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AuthenticationRefreshRequest'
          description: Refresh token request
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/AuthenticationResponse'
        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
      x-code-samples:
      - lang: curl
        source: |
          curl -X POST https://api.smartling.com/files-api/v2/auth-api/v2/authenticate/refresh \
            -H 'content-type: application/json' \
            -d '{"refreshToken": "eyJhbGciO..."}'

#
# Accounts & Projects
#

  '/accounts-api/v2/accounts/{accountUid}/projects':
    get:
      summary: List projects
      description: |
        Returns the list of projects for the account.
      tags:
        - Account & Projects
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
        - name: projectNameFilter
          in: query
          required: false
          type: string
          description: Substring search of the name of the project. Search is case insensitive.
        - name: includeArchived
          in: query
          required: false
          type: boolean
          description: Indicator whether or not archived projects should be returned. Defaults to false if not specified.
        - name: offset
          in: query
          required: false
          type: integer
          description: Standard Smartling limit and offset to paginate through results.
        - name: limit
          in: query
          required: false
          type: integer
          description: Standard Smartling limit and offset to paginate through results. 500 projects are returned by default if not specified.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/AccountAPIProjectListSuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 2
                  items:
                    - projectId: fd7244365
                      projectName: Android XML Content
                      accountUid: at724e365
                      archived: false
                      projectTypeCode: APPLICATION_RESOURCES
                      sourceLocaleId: en-US
                      sourceLocaleDescription: English
                    - projectId: eqb7243x5
                      projectName: Marketing Website GDN
                      accountUid: at724e365
                      archived: false
                      projectTypeCode: GDN
                      sourceLocaleId: en-US
                      sourceLocaleDescription: English
        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  '/projects-api/v2/projects/{projectId}':
    get:
      summary: Get project details
      description: |
        Returns the details of a project.
      tags:
        - Account & Projects
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: includeDisabledLocales
          in: query
          required: false
          type: boolean
          description: Indicator whether or not disabled locales configured for the project should be returned as part of the targetLocales. By default disabled target locales are not returned.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ProjectDetailsSuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  - projectId: fd7244365
                    projectName: Android XML Content
                    accountUid: at724e365
                    archived: false
                    projectTypeCode: APPLICATION_RESOURCES
                    sourceLocaleId: en-US
                    sourceLocaleDescription: English
                    targetLocales:
                    - localeId: de-DE
                      description: German (Germany)
                      enabled: true
        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  '/projects-api/v2/projects/{projectId}/targetLocales':
    post:
      summary: Add a new target locale
      description: |
        Add a new target locale to the project.
      tags:
        - Account & Projects
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: addLocaleRequest
          in: body
          schema:
            type: object
            properties:
              localeId:
                description: |-
                  The locale identifier (localeId) of the locale to be added to the project.
                type: string
                example: ru-RU
              defaultWorkflowUid:
                description: |-
                  The default workflow that should be used when content is authorized. If not specified, the default workflow configured for the project will be used.
                type: string
                example: ac48ht4qy
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ProjectDetailsSuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  - projectId: fd7244365
                    projectName: Android XML Content
                    accountUid: at724e365
                    archived: false
                    projectTypeCode: APPLICATION_RESOURCES
                    sourceLocaleId: en-US
                    sourceLocaleDescription: English
                    targetLocales:
                    - localeId: de-DE
                      description: German (Germany)
                      enabled: true
                    - localeId: ru-RU
                      description: Russian (Russia)
                      enabled: true
        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  '/projects-api/v2/projects/{projectId}/copy':
    post:
      summary: Copy an existing project
      description: |
        Make a copy of an existing project, thereby creating a new one with a new name
      tags:
        - Account & Projects
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: copyProject
          in: body
          schema:
            type: object
            properties:
              projectName:
                description: The name of the new project to create.
                type: string
                example: New Android Project
              targetLocaleIds:
                type: array
                items:
                  type: string
                description: The list of target locales the new project should be created for. Note, each target locale specified must valid within the source project you are copying, i.e. you can copy all or a subset of locales from the source project to the target project.
                example: ["ru-RU"]
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ProjectCopySuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  processUid: 7908ae61-3489-48e1-9e28-10652634d34e
        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  '/projects-api/v2/projects/{projectId}/copy/{processUid}':
    get:
      summary: Get the status of the project copy request
      description: |
        Used to check if the copy project request is complete and to retrieve the new projectId
      tags:
        - Account & Projects
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: processUid
          in: path
          required: true
          type: string
          description: The uid of the process to check for
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ProjectCopyProcessSuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  processuid: 7908ae61-3489-48e1-9e28-10652634d34e
                  newProjectUid: 8t7q4d643
                  processState: OPEN
                  createdDate: 2016-08-21T0B1:51:17Z
                  modifiedDate: 2016-08-21T0B1:51:17Z
                  processStatistics:
                    requested: 8
                    processed: 6
                    errored: 0
                    skipped: 0
        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

#
# File API
#
  '/files-api/v2/projects/{projectId}/file':
    post:
      summary: Upload file
      description: |
        This uploads original source content to Smartling. 
        
        **Example**
        ```bash
          curl -X POST -H "Authorization: Bearer {token}" -F "file=@file.properties;type=text/plain" -F "fileUri=file.properties"  -F "fileType=javaProperties" 'https://api.smartling.com/files-api/v2/projects/{projectId}/file'
        ```

        The example above will upload your Java properties file directly into the Smartling project identified by the `projectId`. Smartling will ingest this file, parse out the keys and text as strings for translation. At this point, content is ready for translation. 
        
      tags:
        - Files
      consumes:
        - multipart/form-data
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uid
          description: A unique identifier for a project.
        - name: file
          in: formData
          required: true
          type: file
          description: The file contents to upload.
        - name: fileUri
          in: formData
          required: true
          type: string
          description: |
            A value that uniquely identifies the uploaded file. This ID can be used to request the file back. We recommend that you use file path and file name, similar to how version control systems identify the file. 

            Example: `/myproject/i18n/ui.properties`
        - name: fileType
          in: formData
          required: true
          type: string
          description: A unique identifier for the file type.
          enum: &fileTypes
            - android
            - ios
            - gettext
            - html
            - javaProperties
            - yaml
            - xliff
            - xml
            - json
            - docx
            - pptx
            - xlsx
            - idml
            - qt
            - resx
            - plaintext
            - cvs
            - srt
            - stringsdict
            - phpResource
            - freemaker
            - xls
            - doc
            - ppt
            - pres
            - madcap
            - xliffCat
        - name: authorize
          in: formData
          required: false
          type: boolean
          default: false
          description: |
            Determines whether content in the file is authorized (available for translation) in all locales upon submitting the file via the Smartling Dashboard. An error message will be returned if there are insufficient translation funds and authorized is set to `true`. If a string has been completely excluded for translation from all languages, or excluded from translation for a specific language, `authorize` will NOT authorize it. 

            To specify a limited list of locales to authorize, use the `localeIdsToAuthorize[]` parameter.
            
              Value | Description
              ----- | -----------
              true |  Content will be available for translation in all locales upon upload.
              false |  Content will be added to the "Awaiting Authorization" queue upon upload.
        - name: localeIdsToAuthorize[]
          in: formData
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
          description: |
            This value, if set, authorizes strings for translation into specific locales. Use the project/locale/list call to get the list of locales for the project, or view them in the dashboard on the API settings page. Use multiple the `localeIdsToAuthorize` parameter pairs to authorize more than one locale. You can add languages by uploading the file again and indicating the language to authorize with `localeIdsToAuthorize` or all languages with `authorize`, or in the dashboard using the "Show Partially Authorized" filter option from the Awaiting Authorization list. 

            If the string has been completely excluded for translation from all languages, or excluded from translation for a specific language, `localesIdsToAuthorize` will NOT authorize it. 

            **Note**: Do not set the `authorize` parameter to `true` if you want to specify individual locales to authorize. Submitting an upload with both of these parameters set will result in a validation error.
        - name: smartling.namespace
          in: formData
          required: false
          type: string
          description: |
            This is only for accounts created after July 31st, 2015. Define a custom [namespace](https://developer.smartling.com/v2.0/docs/string-sharing-namespaces) for the file. 

            **Note**: While this parameter shares the format of other file directives, it will not work as an inline directive and must be specified in the API call.
        - name: smartling.file_charset
          in: formData
          required: false
          type: string
          description: |
            Specifies a custom charset for text-format files. The value should be the name of the character set. See a full list of supported character sets here.

            If this directive is not used, Smartling will use the ```Content-Type``` request header to determine if the content is encoded with UTF-16, UTF-16B or UTF-16LE. If there is no ```Content-Type``` header, Smartling will examine the file for UTF-16 characters. If none are detected, UTF-8 encoding will be used.

            **Note**: Once this property has been set for a file, it cannot be changed. If you reupload the file, it will use the original charset, even if you change the directive. An error will be returned if this directive is used when uploading binary-format file types, such as Office or IDML files.
        - name: smartling.[command]
          in: formData
          required: false
          type: string
          description: |
            Provides custom parser configuration for supported file types. See [Supported File Types](https://developer.smartling.com/docs/supported-file-types) for more details.
        - name: callbackUrl
          in: formData
          required: false
          type: string
          format: url
          description: |
            A GET request that creates a callback to a URL when a file is 100% published for a locale. The callback gives the fileUri and locale with the format `http[/s]://your.url?locale=xx-XX&fileUri=your.file`. If you upload the file again, without a callbackUrl, it will remove any previous callbackUrl for that file. The RequestBin (http://requestb.in) service is a convenient way to test callback. RequestBin generates a short-lived disposable URL that displays all posted requests.

            If a callback fails, Smartling will make multiple attempts to reach the designated URL, however, we do not keep retrying a failed callback indefinitely. Try to make sure your callback URL is as stable as possible and be aware that callbacks are not a 100% reliable way of being notified that a file is published.

            If the upload has begun but is taking more than a minute to complete, it responds with status `202`.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/FilesAPIUploadSuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  overWritten: true
                  stringCount: 10
                  wordCount: 2
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/FilesAPIUploadAcceptedResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  message: Your file was successfully uploaded. Word and string counts are not available right now.

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        423:
          description: The requested file is currently being processed by another operation. The file will be unlocked after the operation completes.
          schema:
            $ref: '#/definitions/Error423Response'
          examples:
            application/json:
              response:
                code: RESOURCE_LOCKED
                errors:
                  key: resource.locked
                  message: The file is currently being processed and will be available in a few minutes.
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
            
    get:
      summary: Download source file
      description: |
        This downloads the original version of the requested file from Smartling.

        **Example:**
        ```bash
          curl -H "Authorization: Bearer {token}" "https://api.smartling.com/files-api/v2/projects/{projectId}/file?fileUri={your-file-URI}"
        ```
        
        It is important to check the HTTP response status code. If Smartling finds and returns the file normally, you will receive a 200 SUCCESS response. If you receive any other response status code than 200, the requested file will not be part of the response.

        When you upload a UTF-16 character encoded file, then /file/get requests for that file will have a character encoding of UTF-16. All other uploaded files will return with a character encoding of UTF-8.

        You can always use the content-type header in the response of a file/get request to determine the character encoding.
        
        The filename is based on the fileUri associated with the requested file. In most cases, the filename is exactly the fileUri provided. The only exception to this is with .pot gettext files. When a .pot file is specified as the fileUri, Smartling returns a .po file.
          
      tags:
        - Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: A unique identifier for a project.
        - name: fileUri
          in: query
          required: true
          type: string
          description: Value that uniquely identifies the downloaded file
      responses:
        200:
          description: OK
          schema:
            type: file
        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  '/files-api/v2/projects/{projectId}/file/status':
    get:
      summary: Status of file for each locale
      description: |
        Return information on a specific file 

        **Example:**
        ```bash
          curl -X GET -H "Authorization: Bearer {token}" 'https://api.smartling.com/files-api/v2/projects/{projectId}/file/status?fileUri=file.properties'
        ```

      tags:
        - Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: A unique identifier for a project.
        - name: fileUri
          in: query
          required: true
          type: string
          description: Smartling value that uniquely identifies a file in Smartling
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/FilesAPIStatusAllLocalesSuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  fileUri: "/files/test_translation_import.csv"
                  lastUploaded: '2017-09-06T20:29:15Z'
                  created: '2017-09-06T20:29:15Z'
                  fileType: csv
                  parserVersion: 4
                  hasInstructions: false
                  directives:
                    file_uri_as_namespace: 'true'
                  namespace:
                    name: "/files/test_trans_import.csv"
                  totalStringCount: 1
                  totalWordCount: 1
                  totalCount: 1
                  items:
                  - localeId: ru-RU
                    authorizedStringCount: 0
                    authorizedWordCount: 0
                    completedStringCount: 0
                    completedWordCount: 0
                    excludedStringCount: 0
                    excludedWordCount: 0

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  '/files-api/v2/projects/{projectId}/locales/{localeId}/file/status':
    get:
      summary: Status of file for a single locale
      description: |
        Return detailed status information on a specific file

        **Example:**
        ```bash
          curl -X GET -H "Authorization: Bearer {token}" 'https://api.smartling.com/files-api/v2/projects/{projectId}/locales/{localeId}/file/status?fileUri=file.properties'
        ```

      tags:
        - Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: A unique identifier for a project.
        - name: localeId
          in: path
          required: true
          type: string
          description: Identifier for a locale.
        - name: fileUri
          in: query
          required: true
          type: string
          description: Smartling value that uniquely identifies a file in Smartling
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/FilesAPIStatusSingleLocaleSuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  fileUri: "/files/4.properties"
                  lastUploaded: '2017-05-27T12:45:36Z'
                  created: '2017-05-27T12:45:36Z'
                  fileType: javaProperties
                  parserVersion: 4
                  hasInstructions: false
                  directives:
                  namespace:
                  totalStringCount: 5
                  totalWordCount: 9
                  authorizedStringCount: 4
                  authorizedWordCount: 5
                  completedStringCount: 0
                  completedWordCount: 0
                  excludedStringCount: 0
                  excludedWordCount: 0

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  '/files-api/v2/projects/{projectId}/locales/{localeId}/file':
    get:
      summary: Download translated file (single locale)
      description: |
        This downloads the requested file from Smartling.

        It is important to check the HTTP response status code. If Smartling finds and returns the file normally, you will receive a 200 SUCCESS response. If you receive any other response status code than 200, the requested file will not be part of the response.

        When you upload a UTF-16 character encoded file, then /file/get requests for that file will have a character encoding of UTF-16. All other uploaded files will return with a character encoding of UTF-8.

        You can always use the content-type header in the response of a file/get request to determine the character encoding.

        **Example:**
        ```bash
          curl -H "Authorization: Bearer {token}" "https://api.smartling.com/files-api/v2/projects/{projectId}/locales/{localeId}/file?fileUri={your-file-Uri}"
        ```

        **Note**: The filename in response is based on the fileUri associated with the requested file. In most cases, the filename is exactly the fileUri provided. The only exception to this is with .pot gettext files. When a .pot file is specified as the fileUri, Smartling returns a .po file
      tags:
        - Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: A unique identifier for a project.
        - name: localeId
          in: path
          required: true
          type: string
          description: Identifier for a locale.
        - name: fileUri
          in: query
          required: true
          type: string
          description: Value that uniquely identifies the downloaded file
        - name: retrievalType
          in: query
          required: false
          type: string
          description: |
            Determines the desired format for the download. Applies to translated files only.

            | retrievalType | Description |
            |---------------|-------------|
            | pending | Smartling returns any translations (including non-published translations)|
            | published | Smartling returns only published/pre-published translations.|
            | pseudo | Smartling returns a modified version of the original text with certain characters transformed and the text expanded. For example, the uploaded string "This is a sample string", will return as "T~hís ~ís á s~ámpl~é str~íñg". Pseudo translations enable you to test how a longer string integrates into your application|
            | contextMatchingInstrumented | Smartling returns a modified version of the original file with strings wrapped in a specific set of Unicode symbols that can later be recognized and matched by the Chrome Context Capture Extension|
          enum:
            - pending
            - published
            - pseudo
            - contextMatchingInstrumented
        - name: includeOriginalStrings
          in: query
          required: false
          type: boolean
          description: |
            Specifies whether Smartling will return the original string or an empty string where no translation is available. This parameter is supported for gettext, java properties, custom XML, and JSON files only

            | Value | Description |
            |-------|-------------|
            | true | If there is no translation, Smartling returns the original string |
            | false | If there is no translation, Smartling returns an empty string |

      responses:
        200:
          description: OK
          schema:
            type: file

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  '/files-api/v2/projects/{projectId}/locales/all/file/zip':
    get:
      summary: Download all translations of file
      description: |
        Download a ZIP archive with all translations for the requested file.

        Unlike "Download translated file" endpoint you get a ZIP archive with all translations of a specific file.

        It is important to check the HTTP response status code. If Smartling finds and returns the file normally, you will receive a 200 SUCCESS response. If you receive any other response status code than 200, the requested files will not be part of the response.

        When you upload a UTF-16 character encoded file, then /file/get requests for that file will have a character encoding of UTF-16. All other uploaded files will return with a character encoding of UTF-8.

        You can always use the content-type header in the response of a file/get request to determine the character encoding.

        **Example:**
        ```bash
          curl -X GET -H "Authorization: Bearer {token}" 'https://api.smartling.com/files-api/v2/projects/{projectId}/locales/all/file/zip?fileUri=yourfile.json&retrievalType=published'
        ```

      tags:
        - Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: A unique identifier for a project.
        - name: fileUri
          in: query
          required: true
          type: string
          description: Smartling value that uniquely identifies a file in Smartling
        - name: retrievalType
          in: query
          required: false
          type: string
          enum:
            - pending
            - published
            - pseudo
            - contextMatchingInstrumented
          description: |
            Determines the desired format for the download. Applies to translated files only.

            | retrievalType | Description |
            |---------------|-------------|
            | pending | Smartling returns any translations (including non-published translations)|
            | published | Smartling returns only published/pre-published translations.|
            | pseudo | Smartling returns a modified version of the original text with certain characters transformed and the text expanded. For example, the uploaded string "This is a sample string", will return as "T~hís ~ís á s~ámpl~é str~íñg". Pseudo translations enable you to test how a longer string integrates into your application|
            | contextMatchingInstrumented | Smartling returns a modified version of the original file with strings wrapped in a specific set of Unicode symbols that can later be recognized and matched by the Chrome Context Capture Extension|
        - name: includeOriginalStrings
          in: query
          required: false
          type: boolean
          description: |
            Specifies whether Smartling will return the original string or an empty string where no translation is available. This parameter is supported for gettext, java properties, custom XML, and JSON files only

            | Value | Description |
            |-------|-------------|
            | true | If there is no translation, Smartling returns the original string |
            | false | If there is no translation, Smartling returns an empty string |
        - name: zipFileName
          in: query
          required: false
          type: string
          description: Name for the downloaded zip file. If unset, default is ```translations.zip```
      responses:
        200:
          description: OK
          schema:
            type: file

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  '/files-api/v2/projects/{projectId}/files/zip':
    get:
      summary: Download multiple translated files
      description: |
        Download ZIP archive with the requested translated files.

        Unlike "Download all translations of the file" you can specify multiple file URIs and locale IDs to select which
        files and languages you want to download.

        It is important to check the HTTP response status code. If Smartling finds and returns the file normally, you will receive a 200 SUCCESS response. If you receive any other response status code than 200, the requested files will not be part of the response.

        When you upload a UTF-16 character encoded file, then /file/get requests for that file will have a character encoding of UTF-16. All other uploaded files will return with a character encoding of UTF-8.

        You can always use the content-type header in the response of a file/get request to determine the character encoding.

        **Example:**
        ```bash
          curl -X GET -H "Authorization: Bearer {token}" 'https://api.smartling.com/files-api/v2/projects/{projectId}/files/zip?localeIds[]=de-DE&fileUris[]=yourfile.json'
        ```

      tags:
        - Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: A unique identifier for a project.
        - name: fileUris[]
          in: query
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
          description: Smartling Values that each uniquely identify a file
        - name: localeIds[]
          in: query
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
          description: List of locales to download
        - name: retrievalType
          in: query
          required: false
          type: string
          enum:
            - pending
            - published
            - pseudo
            - contextMatchingInstrumented
          description: |
            Determines the desired format for the download. Applies to translated files only.

            | retrievalType | Description |
            |---------------|-------------|
            | pending | Smartling returns any translations (including non-published translations)|
            | published | Smartling returns only published/pre-published translations.|
            | pseudo | Smartling returns a modified version of the original text with certain characters transformed and the text expanded. For example, the uploaded string "This is a sample string", will return as "T~hís ~ís á s~ámpl~é str~íñg". Pseudo translations enable you to test how a longer string integrates into your application|
            | contextMatchingInstrumented | Smartling returns a modified version of the original file with strings wrapped in a specific set of Unicode symbols that can later be recognized and matched by the Chrome Context Capture Extension|
        - name: includeOriginalStrings
          in: query
          required: false
          type: boolean
          description: |
            Specifies whether Smartling will return the original string or an empty string where no translation is available. This parameter is supported for gettext, java properties, custom XML, and JSON files only

            | Value | Description |
            |-------|-------------|
            | true | If there is no translation, Smartling returns the original string |
            | false | If there is no translation, Smartling returns an empty string |
        - name: fileNameMode
          in: query
          required: false
          type: string
          enum:
            - UNCHANGED
            - TRIM_LEADING
            - LOCALE_LAST
          description: |
            Determines how files in the zip file will be named. If not set, the full original file path will be used as the filename

            | fileNameMode | Description |
            |--------------|-------------|
            | UNCHANGED | Full original file path is used |
            | TRIM_LEADING | Remove all except the last path segment. e.g. ```/en/strings/nav.properties``` becomes ```nav.properties```|
            | LOCALE_LAST | Adds a locale folder to the file path directly before the filename. e.g. ```/strings/nav.properties``` becomes ```/strings/en/nav.properties``` |
        - name: localeMode
          in: query
          required: false
          type: string
          enum:
            - LOCALE_IN_PATH
            - LOCALE_IN_NAME
            - LOCALE_IN_NAME_AND_PATH
          description: |
            Determines how locales will be handled in the downloaded zip

            | localeMode | Description |
            |------------|-------------|
            | LOCALE_IN_PATH | Locale code is added to the end of the file path. e.g. ```/strings/es-ES/nav.properties``` |
            | LOCALE_IN_NAME | Locale code is added to the end of the file name e.g. ```/strings/nav_es-ES.properties``` |
            | LOCALE_IN_NAME_AND_PATH | Locale code is added to both the path and the filename. e.g. ```/strings/es-ES/nav_es-ES.properties``` |
        - name: zipFileName
          in: query
          required: false
          type: string
          description: Name for the downloaded zip file. If unset, default is ```translations.zip```
      responses:
        200:
          description: OK
          schema:
            type: file

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  '/files-api/v2/projects/{projectId}/files/list':
    get:
      summary: List recently uploaded files
      description: |
        This lists recently uploaded files, and returns a maximum of 100 files.

        **Example:**
        ```bash
          curl -H "Authorization: Bearer {token}" "https://api.smartling.com/files-api/v2/projects/{projectId}/files/list?fileTypes[]=json&uriMask=strings"
        ```

      tags:
        - Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: A unique identifier for a project.
        - name: uriMask
          in: query
          required: false
          type: string
          description: Return only files with a URI containing the given substring. Case is ignored. For example, the value ```.json``` will match ```strings.json``` and ```STRINGS.JSON``` but not ```json.strings```
        - name: fileTypes[]
          in: query
          required: false
          type: array
          items:
            type: string
            enum: *fileTypes
          collectionFormat: multi
        - name: lastUploadedAfter
          in: query
          required: false
          type: string
          format: YYYY-MM-DDThh:mm:ssZ
          description: Return all files uploaded after the specified date
        - name: lastUploadedBefore
          in: query
          required: false
          type: string
          format: YYYY-MM-DDThh:mm:ssZ
          description: Return all files uploaded before the specified date
        - name: orderBy
          in: query
          type: string
          description: Sets the name and direction of the parameter to order results by. If ascending or descending is not specified, the default is ascending
          enum:
            - created
            - fileUri
            - lastUploaded
            - created_asc
            - created_desc
            - fileUri_asc
            - fileUri_desc
            - lastUploaded_asc
            - lastUploaded_desc
        - name: limit
          in: query
          required: false
          type: integer
          default: 100
          description: |
            See [Limit and Offset](https://developer.smartling.com/v1.0/docs/list-get-1). In order to get consistent pagination, please make sure to specify the ```orderBy``` parameter
        - name: offset
          in: query
          required: false
          type: integer
          default: 0
          description: See [Limit and Offset](https://developer.smartling.com/v1.0/docs/list-get-1)
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/FilesAPIListFilesSuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 2
                  items:
                    - fileUri: /files/translation_import.csv
                      created: '2017-09-06T20:29:15Z'
                      lastUploaded: '2017-09-06T20:29:15Z'
                      fileType: csv
                      hasInstructions: false
                    - fileUri: /files/4.properties
                      created: '2017-05-27T12:45:36Z'
                      lastUploaded: '2017-05-27T12:45:36Z'
                      fileType: javaProperties
                      hasInstructions: false

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  '/files-api/v2/projects/{projectId}/file-types':
    get:
      summary: List all file types
      description: |
        This returns a list of all file types currently represented in the project.

        **Example:**
        ```bash
          curl -H "Authorization: Bearer {token}" "https://api.smartling.com/files-api/v2/projects/{projectId}/file-types"
        ```

      tags:
        - Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: A unique identifier for a project.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/FilesAPIListFileTypesSuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  items:
                    - csv
                    - javaProperties

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  '/files-api/v2/projects/{projectId}/file/rename':
    post:
      summary: Rename file
      description: |
        This renames an uploaded file by changing the `fileUri`. After renaming the file, it will only be identified by the new `fileUri` that you provide.

        **Example:**
        ```bash
          curl -X POST -H "Authorization: Bearer {token}" -F "fileUri=filename.properties" -F "newFileUri=filename2.properties" 'https://api.smartling.com/files-api/v2/projects/{projectId}/file/rename'
        ```

      tags:
        - Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: A unique identifier for a project.
        - name: fileUri
          in: formData
          required: true
          type: string
          description: Current value that uniquely identifies the file
        - name: newFileUri
          in: formData
          required: true
          type: string
          description: |
            The new value for fileUri. We recommend that you use file path + file name, similar to how version control systems identify the file. Example: /myproject/i18n/ui.properties. This must be a fileUri that does not exist in the current Smartling project.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/EmptyResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  '/files-api/v2/projects/{projectId}/file/delete':
    post:
      summary: Delete file
      description: |
        This removes the file from Smartling. The file will no longer be available for download. Any complete translations for the file remain available for use within the system.

        Smartling deletes files asynchronously and it typically takes a few minutes to complete. While deleting a file, you can not upload a file with the same `fileUri`.

        **Example:**
        ```bash
          curl -X POST -H "Authorization: Bearer {token}" -F "fileUri=filename.properties" 'https://api.smartling.com/files-api/v2/projects/{projectId}/file/delete'
        ```

      tags:
        - Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: A unique identifier for a project.
        - name: fileUri
          in: formData
          required: true
          type: string
          description: Smartling value that uniquely identifies a file in Smartling
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/EmptyResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  '/files-api/v2/projects/{projectId}/locales/{localeId}/file/last-modified':
    get:
      summary: Last modified date (single locale)
      description: |
        This returns the date that a file was last modified in a specified locale.

        **Example:**
        ```bash
          curl -X GET -H "Authorization: Bearer {token}" 'https://api.smartling.com/files-api/v2/projects/{projectId}/locales/{localeId}/file/last-modified?fileUri=filename.properties'
        ```

      tags:
        - Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: A unique identifier for a project.
        - name: localeId
          in: path
          required: true
          type: string
          description: Identifier for a locale.
        - name: fileUri
          in: query
          required: true
          type: string
          description: A unique identifier for a file in Smartling.
        - name: lastModifiedAfter
          in: query
          required: false
          type: string
          format: YYYY-MM-DDThh:mm:ssZ
          description: Limits the return to only those file and locale combinations that have a ```lastModified``` date after the parameter ```lastModifiedAfter```. The items array will be empty if the file has not been modified in any of the locales since the `lastModifiedAfter` date specified.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/FilesAPILastModifiedSingleLocaleSuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  localeId: ru-RU
                  lastModified: '2017-09-06T20:25:18Z'

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  '/files-api/v2/projects/{projectId}/file/last-modified':
    get:
      summary: Last modified date (all locales)
      description: |
        This returns the date that a file was last modified in a each locale.

        **Example:**
        ```bash
          curl -X GET -H "Authorization: Bearer {token}" 'https://api.smartling.com/files-api/v2/projects/{projectId}/file/last-modified?fileUri=filename.properties'
        ```

      tags:
        - Files
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: A unique identifier for a project. 
        - name: fileUri
          in: query
          required: true
          type: string
          description: A unique identifier for a file in Smartling.
        - name: lastModifiedAfter
          in: query
          required: false
          type: string
          format: YYYY-MM-DDThh:mm:ssZ
          description: Limits the return to only those file and locale combinations that have a ```lastModified``` date after the parameter ```lastModifiedAfter```. The items array will be empty if the file has not been modified in any of the locales since the `lastModifiedAfter` date specified.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/FilesAPILastModifiedAllLocalesSuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 1
                  items:
                  - localeId: ru-RU
                    lastModified: '2017-09-06T20:25:18Z'

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  '/files-api/v2/projects/{projectId}/locales/{localeId}/file/import':
    post:
      summary: Import translations
      description: |

        **Example:**
        ```bash
          curl -X POST -H "Authorization: Bearer {token}" -F "file=@filename.properties" -F "fileUri=filename.properties" -F "fileType=javaProperties" -F "translationState=PUBLISHED" 'https://api.smartling.com/files-api/v2/projects/{projectId}/locales/{localeId}/file/import'
        ```

      tags:
        - Files
      consumes:
        - multipart/form-data
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: A unique identifier for a project.
        - name: localeId
          in: path
          required: true
          type: string
          description: Identifier for a locale.
        - name: file
          in: formData
          required: true
          type: file
          description: The file contents to upload
        - name: fileUri
          in: formData
          required: true
          type: string
          description: The Smartling URI for file that contains the original language strings already uploaded to Smartling
        - name: fileType
          in: formData
          required: true
          type: string
          description: Unique identifier for the file type. To allow translation imports, XML and JSON files must be uploaded with source_key_paths defined
          enum: *fileTypes
        - name: translationState
          in: formData
          required: true
          type: string
          enum:
            - PUBLISHED
            - POST_TRANSLATION
          description: |
            Value indicating the workflow state to import the translations into. Content will be imported into the language's default workflow

            | Value | Description |
            |-------|-------------|
            | PUBLISHED | The translated content is published |
            | POST_TRANSLATION | The translated content is imported into the first step after translation - if there are none, it will be published |

        - name: overwrite
          in: formData
          required: false
          type: boolean
          description: Whether or not to overwrite existing translations

      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/FilesAPITranslationImportSuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  wordCount: 6
                  stringCount: 3
                  translationImportErrors: []

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  '/files-api/v2/projects/{projectId}/locales/{localeId}/file/get-translations':
    post:
      summary: Export translations
      description: |
        Temporarily uploads a file, then returns a translated version for requested locales.

        This call can be used instead of a standard upload/download if you keep different versions of a file in multiple branches or are triggering rebuilds, and don’t want your files in Smartling to be overwritten by out-of-date versions of a file.

        To use the call, you upload a file and identify the Smartling URI where the main version of that file is saved. Smartling will match strings shared between the uploaded file and the main file and return any available translations.


        **Example:**
        ```bash
          curl -X POST -H "Authorization: Bearer {token}" -F "file=@filename.properties" -F 'fileUri=filename.properties' 'https://api.smartling.com/files-api/v2/projects/{projectId}/locales/{localeId}/file/get-translations'
        ```

      tags:
        - Files
      consumes:
        - multipart/form-data
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: A unique identifier for a project.
        - name: localeId
          in: path
          required: true
          type: string
          description: Identifier for a locale.
        - name: file
          in: formData
          required: true
          type: file
          description: The file contents to upload
        - name: fileUri
          in: formData
          required: true
          type: string
          description: The Smartling URI for file that contains the original language strings already uploaded to Smartling
        - name: retrievalType
          in: formData
          required: false
          type: string
          enum:
            - pending
            - published
            - pseudo
            - contextMatchingInstrumented
          description: |
            Determines the desired format for the download. Applies to translated files only.

            | retrievalType | Description |
            |---------------|-------------|
            | pending | Smartling returns any translations (including non-published translations)|
            | published | Smartling returns only published/pre-published translations.|
            | pseudo | Smartling returns a modified version of the original text with certain characters transformed and the text expanded. For example, the uploaded string "This is a sample string", will return as "T~hís ~ís á s~ámpl~é str~íñg". Pseudo translations enable you to test how a longer string integrates into your application|
            | contextMatchingInstrumented | Smartling returns a modified version of the original file with strings wrapped in a specific set of Unicode symbols that can later be recognized and matched by the Chrome Context Capture Extension|
        - name: includeOriginalStrings
          in: formData
          required: false
          type: boolean
          description: |
            Specifies whether Smartling will return the original string or an empty string where no translation is available. This parameter is supported for gettext, java properties, custom XML, and JSON files only

            | Value | Description |
            |-------|-------------|
            | true | If there is no translation, Smartling returns the original string |
            | false | If there is no translation, Smartling returns an empty string |

      responses:
        200:
          description: OK
          schema:
            type: file

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

#
# Context API endpoints
#
  /context-api/v2/projects/{projectId}/contexts:
    post:
      summary: Upload new context
      description: |-
        Uploads a file or web link that can be linked to translations and shown to linguists as visual context for the strings they're working on.
        
        The following context types are supported:
        
        - *HTML* - HTML files or files with content type text/html
        - *IMAGE* - Image files
        - *VIDEO* - Public link to video:
          - YouTube link
          - Vimeo link
          - Link to .mp4 file
          
        Context type is not specified directly, but rather inferred via analyzing the request body.    

        This endpoint accepts *multipart/form-data* request body.
        
      tags:
        - Context
      consumes:
        - multipart/form-data
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: Unique identifier of a project
          format: uuid
        - name: content
          description: |- 
            The context file to upload. 
            If specified, should be one of the supported content types:
             - `image/\*` 
             - `text/html`
             
            Maximum file upload size is `20MB`
             
            *Note*: should be omitted for **VIDEO** context 
          in: formData
          required: false
          type: file
        - name: name
          in: formData
          required: false
          type: string
          description: |
            Context name. Will override context file name if specified.
            Parameter meaning for different context types:
            
            |Context Type|Meaning|
            |----------|--------|
            | `HTML` | Context URL or file name. If valid URL is used, all relative links to resources within the context file will be resolved based on this URL. If file name is used, context file should have `<base />` tag specified with valid URL to resolve all the relative links to resources. In all other cases links to resources will not be resolved and the context might not show correctly. Defaults to context file name if not specified. |
            | `IMAGE` | Image file name, defaults to context file name if not specified. |
            | `VIDEO` | Publicly available link to video. Required for this context type. |
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ContextResponse'
          examples:
            application/json:
                response:
                  code: SUCCESS
                  data:
                    contextUid: '6e66fe6b-b508-4849-9e65-1e502d65755d'
                    contextType: 'IMAGE'
                    name: 'image.png'
                    created: '2017-05-03T20:47:38Z'
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/Error400Response'
          examples:
            application/json:
              response:
                code: 'VALIDATION_ERROR'
                data:
                  errors:
                  -
                    key: 'wrong_parameters'
                    message: "Check request parameters, error message - 'Content stream is required for this context.', ref id: 'af4706d9-c5c1-40aa-93e4-1ec3498c1f05'"

        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
    get:
      summary: List contexts for the project
      description: |
        Returns a paginated list of metadata for all contexts in a project.
        
        Response is limited to *100* items, to retrieve all items the request should be repeated with **offset** parameter specified.
      tags:
        - Context
      parameters:
        - name: projectId
          in: path
          required: true
          description: Unique identifier of a project.
          type: string
          format: uuid
        - name: nameFilter
          in: query
          type: string
          required: false
          description: Context name (or url) filter.
        - name: offset
          description: |-
            If your original request returns an *offset* value, the set of results is incomplete.
            Run the request again, with the given offset value to see more results.
            When offset is null, there are no more results to return.
          in: query
          type: string
          required: false
        - name: type
          in: query
          type: string
          enum:
          - IMAGE
          - HTML
          - VIDEO
          required: false
          description: Context type filter.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ContextListResponse'
          examples:
            application/json:
                response:
                  code: SUCCESS
                  data:
                    items:
                      -
                        name: "image.png"
                        contextType: "IMAGE"
                        contextUid: "6e66fe6b-b508-4849-9e65-1e502d65755d"
                        created: "2016-12-19T17:28:29Z"
                      -
                        contextUid: "ac79677f-0e0a-4d01-b4e3-b94e2e6ba09c"
                        contextType: "IMAGE"
                        name: "image-context.jpg"
                        created: "2016-11-11T13:23:32Z"
                    offset: null

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  /context-api/v2/projects/{projectId}/contexts/{contextUid}:
    get:
      summary: Get context info
      description: Retrieves basic information about the context.
      tags:
        - Context
      parameters:
        - name: projectId
          in: path
          description: Unique identifier of a project
          required: true
          type: string
          format: uuid
        - name: contextUid
          in: path
          description: Unique identifier of a context
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ContextResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  contextUid: '6e66fe6b-b508-4849-9e65-1e502d65755d'
                  contextType: 'VIDEO'
                  name: 'http://custom-video-hosting.com/path/to/video.mp4'
                  created: '2017-05-03T20:47:38Z'
        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        404:
          description: Context not found
          schema:
            $ref: '#/definitions/Error404Response'
          examples:
            application/json:
              response:
                code: NOT_FOUND_ERROR
                errors:
                - key: 'not_found_error'
                  message: "Context not found, ref id: '9d0f96fa-9969-487f-8cfd-639b41d9c9ec'"
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
    delete:
      summary: Delete the context
      description: |- 
        Removes the context metadata and the content.
        All linked context resources (e.g. CSS, images and fonts) will also be eventually cleaned up if no other context has them linked.
        Bindings of this context to strings are removed as well and strings are marked as having no context.
      tags:
        - Context
      parameters:
        - name: projectId
          in: path
          required: true
          description: Unique identifier of a project
          type: string
          format: uuid
        - name: contextUid
          in: path
          required: true
          description: Unique identifier of a context
          type: string
          format: uuid
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        404:
          description: Context not found
          schema:
            $ref: '#/definitions/Error404Response'
          examples:
            application/json:
              response:
                code: NOT_FOUND_ERROR
                errors:
                - key: 'not_found_error'
                  message: "Context not found, ref id: 'ffd90ec4-5ca8-4720-8ecf-15dce3404823'"
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  /context-api/v2/projects/{projectId}/contexts/{contextUid}/content:
    get:
      summary: Download context file content
      description: |-
        Returns the context content:
        
        |Context Type|Content|
        |---------|--------|
        |`HTML`|HTML document enriched with `data-sl-anchor` attributes for most of the elements, also known as *binding anchors*.|
        |`IMAGE`| Binary image data. Response is accompanied with appropriate `Content-Type` header|
        |`VIDEO`| Empty response|
        
      tags:
        - Context
      parameters:
        - name: projectId
          in: path
          required: true
          description: Unique identifier of a project
          type: string
          format: uuid
        - name: contextUid
          in: path
          required: true
          description: Unique identifier of a context
          type: string
          format: uuid
      responses:
        200:
          description: OK
          schema:
            type: file
          examples:
            text/html: |-
              <html>
                <head>
                  <title>Document title</title>
                </head>
                <body>
                  <div data-sl-anchor="11">html file contents</div>
                </body>
              </html>

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        404:
          description: Context not found
          schema:
            $ref: '#/definitions/Error404Response'
          examples:
            application/json:
              response:
                code: 'NOT_FOUND_ERROR'
                errors:
                - key: 'not_found_error'
                  message: "Context not found, ref id: 'ffd90ec4-5ca8-4720-8ecf-15dce3404823'"
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  /context-api/v2/projects/{projectId}/contexts/upload-and-match-async:
    post:
      summary: Upload HTML and match it with strings to create context bindings
      description: |-
        Uploads a new HTML context and asynhronously matches it with strings in the project.

        Equivalent to calling:
        - `POST /projects/{projectId}/contexts`
        - `POST /projects/{projectId}/contexts/{contextUid}/match/async`
        
        Except the fact that `matchParams` parameter has to be present in `formData` rather than request body.

        If the matching process returns no bindings the context won't be created.
        Supported for `HTML` context only.
        
      tags:
        - Context
      consumes:
        - multipart/form-data
      parameters:
        - name: projectId
          in: path
          required: true
          description: Unique identifier of a project
          type: string
          format: uuid
        - name: content
          in: formData
          required: true
          type: file
          description: |-
            The context file part with content type. Supported content type is `text/html`.
        - name: name
          in: formData
          required: false
          type: string
          description: |-
            Context URL or whatever has to be served as context name.
            Overrides the filename in `content` part.
        - name: matchParams
          in: formData
          description: |-
            Array of string hashcodes to match against, and / or context override specifier.
            If string hashcodes not specified, *all strings from the project will be included in match*.
            If context override not specified, *strings with context will not be bound to this context*.
            
            See parameter type description for `/context-api/v2/projects/{projectId}/contexts/{contextUid}/match/async`
          required: false
          type: string
      responses:
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/AsyncMatchResponse'
          examples:
            application/json:
              response:
                code: 'SUCCESS'
                data:
                  matchId: 'ffd90ec4-5ca8-4720-8ecf-15dce3404823'
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/Error400Response'
          examples:
            application/json:
              response:
                code: 'VALIDATION_ERROR'
                data:
                  errors:
                  -
                    key: 'wrong_parameters'
                    message: "Check request parameters, error message - 'Content stream is required for this context.', ref id: 'af4706d9-c5c1-40aa-93e4-1ec3498c1f05'"
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  /context-api/v2/projects/{projectId}/contexts/{contextUid}/match/async:
    post:
      summary: Run automatic context matching
      description: |-
        Automatically matches context against strings in the project and creates corresponding bindings.
        Optionally, you can restrict matching to only a set of strings that you specify to ensure that no unwanted
        bindings are created.

        Optical Character Recognition (OCR) is used for `IMAGE` context, while `HTML` context uses approximate string matching algorithm.

        This is a convenience method provided to save time and complexity in your integration.
        While our OCR functionality is advanced, it cannot match 100% of strings. If you need complete context coverage,
        either use the manual Create Bindings request or check your context images in the Smartling Dashboard after
        running this request to fill in any blanks. Be mindful of the limitations of OCR if you are using an unusual or
        script-like font.
      consumes:
        - application/json
      tags:
        - Context
      parameters:
        - name: projectId
          in: path
          description: Unique identifier of a project
          required: true
          type: string
          format: uuid
        - name: contextUid
          in: path
          description: Unique identifier of a context
          required: true
          type: string
          format: uuid
        - name: matchParams
          in: body
          description: |-
            Array of string hashcodes to match against, and / or context override specifier.
            If string hashcodes not specified, *all strings from the project will be included in match*.
            If context override not specified, *strings with context will not be bound to this context*.
          required: false
          schema:
            $ref: '#/definitions/MatchRequest'
      responses:
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/AsyncMatchResponse'
          examples:
            application/json:
              response:
                code: 'SUCCESS'
                data:
                  matchId: 'ffd90ec4-5ca8-4720-8ecf-15dce3404823'
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/Error400Response'
          examples:
            application/json:
              response:
                code: 'VALIDATION_ERROR'
                errors:
                - key: 'wrong_parameters'
                  message: "Check request parameters, error message - 'Context with Uid=cb081827-2daa-4611-915c-4d207829be27 doesn't exist', ref id: '11f8b832-8154-4e6e-a196-a69a88009736'"
                  details:
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  /context-api/v2/projects/{projectId}/match/{matchId}:
    get:
      summary: Retrieve asynchronous match results
      description: |-
        Check the status of the match request and get results once the match is completed.
        When the match has been completed, any newly created bindings are also returned in the response.
      tags:
        - Context
      parameters:
        - name: projectId
          in: path
          required: true
          description: Unique identifier of a project
          type: string
          format: uuid
        - name: matchId
          description: Identifier of the match request obtained when running asynchronous match request.
          in: path
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/AsyncMatchStatsResponse'
          examples:
            application/json:
              response:
                code: 'SUCCESS'
                data:
                  matchId: 'a9308883-30c7-4832-a023-6c3b10f6f9b1'
                  createdDate: '2017-05-05T19:06:22Z'
                  modifiedData: '2017-05-05T19:06:22Z'
                  status: 'COMPLETED'
                  bindings:
                    - bindingUid: 'a9308883-30c7-4832-a023-6c3b10f6f9b1'
                      contextUid: '428bf090-60fa-473d-ac07-4a551aa06c47'
                      stringHashcode: '374825f7d147fb5700f23b2b22d6660d'
                      anchors:
                      - '11'
                      - 'custom.anchor'
                    - bindingUid: 'a9308883-30c7-4832-a023-6c3b10f6f9b1'
                      contextUid: '428bf090-60fa-473d-ac07-4a551aa06c47'
                      stringHashcode: '374825f7d147fb5700f23b2b22d6660d'
                      anchors:
                      - '12'

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        404:
          description: Match request expired or does not exist
          schema:
            $ref: '#/definitions/Error404Response'
          examples:
            application/json:
              response:
                code: 'NOT_FOUND_ERROR'
                errors:
                - key: 'not_found'
                  message: 'Match not found'
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  /context-api/v2/projects/{projectId}/bindings/{bindingUid}:
    delete:
      summary: Remove binding of a string to a context
      description: |- 
        Deletes a context binding. 
        The context referenced by the binding will no longer be displayed for the referenced string in the CAT Tool.
      tags:
        - Context
      parameters:
        - name: projectId
          in: path
          required: true
          description: Unique identifier of a project
          type: string
          format: uuid
        - name: bindingUid
          description: Unique identifier for the binding to be deleted
          in: path
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              response:
                code: 'SUCCESS'
                data:

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        404:
          description: Not found response
          schema:
            $ref: '#/definitions/Error404Response'
          examples:
            application/json:
              response:
                code: 'NOT_FOUND_ERROR'
                errors:
                - key: 'not_found_error'
                  message: 'Binding not found'
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  /context-api/v2/projects/{projectId}/contexts/{contextUid}/bindings:
    get:
      summary: Return all strings bindings for the context
      description: |-
        Return all bindings that reference the given context. 
        Result is not paginated.
      tags:
        - Context
      parameters:
        - name: projectId
          in: path
          required: true
          description: Unique identifier of a project
          type: string
          format: uuid
        - name: contextUid
          in: path
          description: Unique identifier of a context
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/BindingsResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 1
                  items:
                    -
                      bindingUid: "d6414f8c-4gdf-4415-9a69-f8e7902ca9ec"
                      contextUid: "25137b65-e075-4341-8362-14b1a3e558f5"
                      stringHashcode: "bd603147d945h3ec74d6874422ebe4e0"
                      coordinates:
                        top: 50
                        left: 50
                        bottom: 400
                        right: 400

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        404:
          description: Context not found error
          schema:
            $ref: '#/definitions/Error404Response'
          examples:
            application/json:
              response:
                code: 'NOT_FOUND_ERROR'
                errors:
                - key: 'not_found_error'
                  message: "Context not found, ref id: 'ffd90ec4-5ca8-4720-8ecf-15dce3404823'"
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  /context-api/v2/projects/{projectId}/strings/{stringHashcode}/bindings:
    get:
      summary: Get bindings for string
      description: Return all bindings that reference given string.
      tags:
        - Context
      parameters:
        - name: projectId
          in: path
          description: Unique identifier of a project
          required: true
          type: string
          format: uuid
        - name: stringHashcode
          description: Hashcode for the string to get bindings for
          in: path
          required: true
          type: string
          format: hash
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/BindingsResponse'
          examples:
            application/json:
              response:
                code: 'SUCCESS'
                data:
                  totalCount: 1
                  items:
                    -
                      bindingUid: "d6414f8c-4gdf-4415-9a69-f8e7902ca9ec"
                      contextUid: "25137b65-e075-4341-8362-14b1a3e558f5"
                      stringHashcode: "bd603147d945h3ec74d6874422ebe4e0"
                      coordinates:
                        top: 50
                        left: 50
                        bottom: 400
                        right: 400

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  /context-api/v2/projects/{projectId}/bindings:
    post:
      summary: Create string to context bindings
      description: |-
        Link context files with the strings they contain. 
        The binding tells Smartling which context images to show translators for which strings.
        A maximum of `150` bindings can be created per request. 
        
        Basic bindings request should contain an object with `bindings` JSON array with at least one element (binding), featuring `contextUid` and `stringHashcode` properties:
        ```JSON
        {
          "bindings": [
            {
               "contextUid": "25137b65-e075-4341-8362-14b1a3e558f5",
               "stringHashcode": "bd603147d945h3ec74d6874422ebe4e0"
            }
          ]
        }
        ```
        
        For `IMAGE` context, each binding may have additional `coordinates` data, which specifies rectangular area, where the string is located in the image. If not specified, binding will still be created with coordinates `[0,0,0,0]`:
        ```JSON
        {
          "bindings": [
            {
               "contextUid": "25137b65-e075-4341-8362-14b1a3e558f5",
               "stringHashcode": "bd603147d945h3ec74d6874422ebe4e0",
               "coordinates": {
                  "top": 50,
                  "left": 50,
                  "width": 400,
                  "height": 400
               }
            }
          ]
        }```
        
        For `HTML` context, each binding may have the `selector` element with `anchors` array, specifying the enclosing the string HTML elements with the corresponding value of the `data-sl-anchor` attribute. 
        If not specified, binding will still be created with the empty `anchors` array, effectively making it not anchored to a particular element and thus invisible in CAT Tool:
        ```JSON
        {
          "bindings": [
            {
               "contextUid": "25137b65-e075-4341-8362-14b1a3e558f5",
               "stringHashcode": "bd603147d945h3ec74d6874422ebe4e0",
               "selector": {
                  "anchors": ["custom.anchor", "11", 44"]
               }
            }
          ]
        }```
        
        For `VIDEO` context, each binding mave the `timecode` data, specifying the start and end time of the string appearance in the video:
        ```JSON
        {
          "bindings": [
            {
                "contextUid": "25137b65-e075-4341-8362-14b1a3e558f5",
                "stringHashcode": "bd603147d945h3ec74d6874422ebe4e0",
                "timecode": {
                   "startTime": 1203,
                   "endTime": 1450
                }
            }
          ]
        }```
      consumes:
        - application/json
      tags:
        - Context
      parameters:
        - name: projectId
          description: Unique identifier of a project
          in: path
          required: true
          type: string
          format: uuid
        - name: request
          description: String-to-context bindings
          in: body
          required: true
          schema:
            $ref: '#/definitions/BindingsRequest'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/CreateBindingsResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 1
                  items:
                    -
                      bindingUid: "d6414f8c-4gdf-4415-9a69-f8e7902ca9ec"
                      contextUid: "25137b65-e075-4341-8362-14b1a3e558f5"
                      stringHashcode: "bd603147d945h3ec74d6874422ebe4e0"
                      coordinates:
                        top: 50
                        left: 50
                        bottom: 400
                        right: 400
        400:
          description: Validation error
          schema:
            $ref: '#/definitions/Error400Response'
          examples:
            application/json:
              response:
                code: 'VALIDATION_ERROR'
                errors:
                - key: 'wrong_parameters'
                  message: 'Please, limit number of bindings to no more than 150 in one request'
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

#
# Issues API endpoints
#
  /issues-api/v2/dictionary/issue-types:
    get:
      summary: List all issue types
      description: >-
        This request returns all current issue types. Smartling may occasionally
        add or change the list of allowed issue types.
      tags:
        - Issues
      produces:
        - application/json
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 2
                  items:
                    - description: Source
                      issueTypeCode: SOURCE
                      subTypes:
                        - issueSubTypeCode: CLARIFICATION
                          description: Clarification
                        - issueSubTypeCode: MISSPELLING
                          description: Misspelling
                    - description: Translation
                      issueTypeCode: TRANSLATION
                      subTypes:
                        - issueSubTypeCode: POOR_TRANSLATION
                          description: Poor Translation
                        - issueSubTypeCode: DOES_NOT_FIT_SPACE
                          description: Doesn't Fit Space
                        - issueSubTypeCode: PLACEHOLDER_ISSUE
                          description: Placeholder Issue
                        - issueSubTypeCode: GENERAL_ISSUE
                          description: General Issue
                        - issueSubTypeCode: REVIEW_TRANSLATION
                          description: Revieanslation

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  /issues-api/v2/dictionary/issue-states:
    get:
      summary: List all issue states
      description: >-
        Currently the only allowed issue states are `OPENED` and `RESOLVED` but
        Smartling may introduce additional states in future. This request
        returns all current allowed states.
      tags:
        - Issues
      produces:
        - application/json
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 2
                  items:
                    - description: Opened
                      issueStateCode: OPENED
                    - description: Resolved
                      issueStateCode: RESOLVED
  '/issues-api/v2/projects/{projectId}/issues':
    post:
      summary: Open issue
      description: >-
        Creates a new issue for a string.

        ##### Issue text is treated as plain text. Smartling will save the text
        as provided and will not attempt to render this text with any special
        formatting in its UIs; it will not be rendered as HTML or markdown.
        Consumers of the issue API should be aware and escape the text as needed
        before attempting to render it. Maximum length is 4000 characters.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: request
          description: New issue for a string
          in: body
          required: true
          schema:
            $ref: '#/definitions/IssueRequest'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  string:
                    hashcode: c32c16cddafd63dfa0dc12449372a093
                    localeId: null
                  resolvedByUserUid: null
                  reportedByUserUid: 661801f19693
                  createdDate: '2015-11-10T16:01:22Z'
                  resolvedDate: null
                  issueText: asdfsd
                  issueUid: dceaa996d417
                  projectId: e8fa915fa
                  issueTypeCode: SOURCE
                  issueSubTypeCode: CLARIFICATION
                  issueStateCode: OPENED
                  issueTextModifiedDate: null

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  '/issues-api/v2/projects/{projectId}/issues/{issueUid}/issueText':
    put:
      summary: Edit issue
      description: >-
        Replaces the text of an issue with new text. Note that only the author
        of the issue can perform this action. The `issueTextModifiedDate`
        property of an issue object shows when it was last updated.

        ##### Issue text is treated as plain text. Smartling will save the text
        as provided and will not attempt to render this text with any special
        formatting in its UIs; it will not be rendered as HTML or markdown.
        Consumers of the issue API should be aware and escape the text as needed
        before attempting to render it. Maximum length is 4000 characters.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
        - name: request
          description: ''
          in: body
          required: true
          schema:
            $ref: '#/definitions/IssueTextRequest'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  issueText: Edited issue text.
                  issueTextModifiedDate: '2015-11-10T16:01:22Z'
  '/issues-api/v2/projects/{projectId}/issues/{issueUid}/state':
    put:
      summary: Open or resolve an issue
      description: The state of the issue. Accepted values are `OPENED` or `RESOLVED`.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
        - name: request
          description: ''
          in: body
          required: true
          schema:
            $ref: '#/definitions/IssueStateRequest'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  issueStateCode: RESOLVED

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  '/issues-api/v2/projects/{projectId}/issues/{issueUid}':
    get:
      summary: Get issue details
      description: >-
        Returns detailed information on a single issue. Note that the
        `resolvedByUserUid` and `reportedByUserUid` values are not currently
        usable for identifying the users who created or resolved issues. In
        future, a People API will be exposed for looking up user details.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  string:
                    hashcode: c32c16cddafd63dfa0dc12449372a093
                    localeId: ru-RU
                  resolvedByUserUid: null
                  reportedByUserUid: 661801f19693
                  createdDate: '2015-11-10T16:01:22Z'
                  resolvedDate: null
                  issueText: This translation is incorrect. Please fix.
                  issueUid: dceaa996d417
                  projectId: e8fa915fa
                  issueTypeCode: TRANSLATION
                  issueSubTypeCode: POOR_TRANSLATION
                  issueStateCode: OPENED
                  issueTextModifiedDate: null


        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  '/issues-api/v2/projects/{projectId}/issues/{issueUid}/comments':
    post:
      summary: Add issue comment
      description: >-
        Create a comment for an issue.

        ##### Comment text is treated as plain text. Smartling will save the
        text as provided and will not attempt to render this text with any
        special formatting in its UIs; it will not be rendered as HTML or
        markdown. Consumers of the issue API should be aware and escape the text
        as needed before attempting to render it. Maximum length is 4000
        characters.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
        - name: request
          description: ''
          in: body
          required: true
          schema:
            $ref: '#/definitions/CommentRequest'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  issueCommentUid: a75fea779bbb
                  commentText: comment text
                  createdByUserUid: 661801f19693
                  createdDate: '2015-12-22T12:34:49Z'
                  commentTextModifiedDate: null

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
    get:
      summary: List all comments of issue
      description: >-
        Returns all comments on an issue. Note that the `createdByUserUid` value
        is not currently usable for identifying the users who created comments.
        In future, a People API will be exposed for looking up user details.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  items:
                    - issueCommentUid: a75fea779bbb
                      commentText: comment text
                      createdByUserUid: 661801f19693
                      createdDate: '2015-12-22T12:34:49Z'
                      commentTextModifiedDate: null
                  totalCount: 1

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  '/issues-api/v2/issues-api/v2/projects/{projectId}/issues/{issueUid}/comments/{issueCommentUid}':
    post:
      summary: Replace issue comment text
      description: >-
        Replaces the text of an issue with new text. Note that only the author
        of the issue can perform this action. The `commentTextModifiedDate`
        property of an issue object shows when it was last updated.

        ##### Comment text is treated as plain text. Smartling will save the
        text as provided and will not attempt to render this text with any
        special formatting in its UIs; it will not be rendered as HTML or
        markdown. Consumers of the issue API should be aware and escape the text
        as needed before attempting to render it. Maximum length is 4000
        characters.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
        - name: issueCommentUid
          in: path
          required: true
          type: string
          description: ''
        - name: request
          description: ''
          in: body
          required: true
          schema:
            $ref: '#/definitions/CommentRequest'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  issueCommentUid: a75fea779bbb
                  commentText: comment text
                  createdByUserUid: 661801f19693
                  createdDate: '2015-12-22T12:34:49Z'
                  commentTextModifiedDate: '2016-12-22T12:34:49Z'

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
    get:
      summary: Get issue comment
      description: >-
        Returns detailed information on a single issue comment. Note that the
        `createdByUserUid` value is not currently usable for identifying the
        users who created comments. In future, a People API will be exposed for
        looking up user details.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
        - name: issueCommentUid
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  createdByUserUid: 661801f19693
                  createdDate: '2015-12-22T11:54:27Z'
                  commentText: test comment
                  issueCommentUid: ac5211a26eca
                  commentTextModifiedDate: null


        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  '/issues-api/v2/projects/{projectId}/issues/list':
    post:
      summary: Find issues
      description: >-
        Returns a list of issues matching specified filter options. You can
        filter based on the date issues were created, target languages, strings,
        issue types and states and the user who opened the issue. Unless
        otherwise specified, request will return a maximum of 30 results. All
        parameters are optional.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: request
          description: ''
          in: body
          required: true
          schema:
            $ref: '#/definitions/FindRequest'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  items:
                    - string:
                        hashcode: c32c16cddafd63dfa0dc12449372a093
                        localeId: ru-RU
                      resolvedByUserUid: null
                      reportedByUserUid: 661801f19693
                      createdDate: '2015-12-21T16:38:48Z'
                      resolvedDate: null
                      issueText: does not fit space
                      issueUid: 902372ac8e1e
                      projectId: e8fa915fa
                      issueTypeCode: TRANSLATION
                      issueSubTypeCode: DOES_NOT_FIT_SPACE
                      issueStateCode: OPENED
                      issueTextModifiedDate: null
                  totalCount: 1

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  '/issues-api/v2/projects/{projectId}/issues/count':
    post:
      summary: Get number of issues
      description: >-
        Returns a count of issues matching specified filter options. You can
        filter based on the date issues were created, strings, target languages,
        issue types and states and the user who opened the issue.. All
        parameters are optional.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: request
          description: ''
          in: body
          required: true
          schema:
            $ref: '#/definitions/CountRequest'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  count: 2

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  '/issues-api/v2/accounts/{accountUid}/watchers':
    post:
      description: >-
        Create a new watcher. Any email address can be added as a watcher to receive notifications about an issue being opened, commented on, or closed.
      summary: Create watcher
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: ''
        - name: request
          description: ''
          in: body
          required: true
          schema:
            $ref: '#/definitions/WatcherRequest'
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                      uid: 323323wsss
                      email: my@mail.com
                      name: Mike Albert
                      enabled: true
                      created: '2015-12-21T16:38:48Z'
                      modified: '2015-12-21T16:38:48Z'

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
    get:
      summary: List all issue watchers
      description: >-
       Get a list of all watchers.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: ''
        - name: email
          in: query
          required: false
          type: string
          description: ''
        - name: limit
          in: query
          required: false
          default: 100
          type: number
          description: ''
        - name: offset
          in: query
          required: false
          default: 0
          type: number
          description: ''
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  items:
                    - uid: 323323wsss
                      email: my@mail.com
                      name: Mike Albert
                      enabled: true
                      created: '2015-12-21T16:38:48Z'
                      modified: '2015-12-21T16:38:48Z'

                  totalCount: 1

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  '/issues-api/v2/accounts/{accountUid}/watchers/{watcherUid}':
    put:
      description: >-
        Update the attributes of a watcher.
      summary: Update watcher
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: ''
        - name: watcherUid
          in: path
          required: true
          type: string
          description: ''
        - name: request
          description: ''
          in: body
          required: true
          schema:
            $ref: '#/definitions/WatcherRequest'

      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                      uid: 323323wsss
                      email: my@mail.com
                      name: Mike Albert
                      enabled: true
                      created: '2015-12-21T16:38:48Z'
                      modified: '2015-12-21T16:38:48Z'

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  '/issues-api/v2/accounts/{accountUid}/projects/{projectId}/issues/{issueUid}/watchers/{watcherUid}':
    put:
      summary: Link watcher to issue
      description: >-
       Associate or assign the watcher to an issue. The watcher will then begin receiving email notifications.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: ''
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
        - name: watcherUid
          in: path
          required: true
          type: string
          description: ''

      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data: null

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
    delete:
      summary: Remove watcher from issue
      description: >-
        An update to an issue is sent to the associated/linked watcher. Once watchers are removed from an issue, email notifications will no longer be received by them.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: ''
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
        - name: watcherUid
          in: path
          required: true
          type: string
          description: ''

      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data: null

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  '/issues-api/v2/accounts/{accountUid}/projects/{projectId}/issues/{issueUid}/watchers':
    get:
      summary: List watchers linked to issue
      description: >-
       Get a list of watchers that are linked to the issue.
      tags:
        - Issues
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: ''
        - name: projectId
          in: path
          required: true
          type: string
          description: ''
        - name: issueUid
          in: path
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  items:
                    - uid: 323323wsss
                      email: my@mail.com
                      name: Mike Albert
                      enabled: true
                      created: '2015-12-21T16:38:48Z'
                      modified: '2015-12-21T16:38:48Z'

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition


#
# Strings API
#
  /strings-api/v2/projects/{projectId}:
    post:
      summary: "Add strings"
      description: |-
        Uploads an array of strings to a Smartling project. A maximum of 100 strings can be created per request. A request with more than 100 items will return an error. Each string has a character limit of 10,000.

        **Note**: You cannot authorize a string via API. Once you have created the strings, they will need to be authorized by a content owner in the Smartling Dashboard.

        Smartling creates a unique hashcode for each string based on the parsed string text and any variant or namespace metadata provided. If you upload a string with the same text, variant and namespace, and therefore the same hashcode, the existng string will be overwritten. This will not change the text of the string, but may update other metadata, such as placeholder and callback values. If the string is currently inactive, overwriting it will cause it to be reactivated. Overwritten strings return `"overWritten": "true"` in the response object.

        Most uploads will return a `200` response indicating success. If processing the request takes longer than 60 seconds, a `202` request will be returned, including a `processUid` value that can be used to check on the progress of the request.

        If you set up a POST callback for the string, you can automatically receive the translation for a string as soon as it is complete. See Callbacks for more details.

      tags:
        - Strings
      consumes:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - in: body
          name: stringRequest
          schema:
            type: object
            properties:
              placeholderFormat:
                description: |-
                  Specifies a standard placeholder format. Accepted values are none, c, ios, python, java, yaml, qt, resx. For more detail on placeholders see Placeholders in Resource Files
                type: string
              placeholderFormatCustom:
                description: |-
                  Specifies a custom placeholder with a Java Regular Expression. For example \\[.+?\\] would capture all values surrounded by square brackets as placeholders. For more detail on placeholders see Placeholders in Resource Files
                type: string
              namespace:
                description: |-
                  Used to generate the unique hashcode for all strings in the request. If you want to have two versions of a string with the same text and variant metadata, you can keep them unique by assigning a different namespace to each string. If not provided, default value is _smartling.strings-api.default.namespace_. A _NULL_ value is permitted.
                type: string
              strings:
                type: array
                items:
                  type: object
                  required:
                    - stringText
                  properties:
                    stringText:
                      description: |-
                        The text of the string you want to create. This is the only required value for a string object.
                      type: string
                    variant:
                      description: Creates variant metadata for a new string.
                      type: string
                    callbackUrl:
                      description: |-
                        If provided a callback request will be sent to this URL when translation for the string is complete. See our callbacks documentation for more details.
                      type: string
                    callbackMethod:
                      description: |-
                        With a given callbackUrl, this defines the http method to use. See our callbacks documentation for more details.
                      type: string
                    instruction:
                      description: |-
                        Creates an instruction that is displayed to translators in the Smartling Translation Interface.
                    maxLength:
                      description: |-
                        Set the maximum character length recommended for this string and its translations.  Not specifying or setting to 'null' implies no maxLength and on update will remove any existing maxLegnth.
                      type: number
                    format:
                      description: |-
                        Sets whether or not the string should be parsed as HTML. Accepted values are 'html', 'plain_text' and 'auto'. If set to auto, Smartling will attempt to detect the presence of HTML tags in the string.

                        "When strings are parsed as HTML, Smartling will automatically ampersand-escape special characters such as angle brackets (<) and quotes (&quot;). For example, if you upload the string _Dave says &quot;hello&quot;_. and set format to HTML, Smartling will return the string with ampersand-escaping: _Dave says &amp;quot;hello&amp;quot;_."
                      type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/CreateStringResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  wordCount: 4
                  stringCount: 1
                  processUid: "d6414f8c-4gdf-4415-9a69-f8e7902ca9ec"
                  items:
                    -
                      variant: "variant value"
                      stringText: "Search results for [city]:"
                      parsedStringText: "Search results for {0}:"
                      hashcode: "bd603147d945h3ec74d6874422ebe4e0"
                      overWritten: "true"
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/CreateStringResponse'

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  /strings-api/v2/projects/{projectId}/processes/{processUid}:
    get:
      summary: "Check string status"
      description: |-
        If an **Add strings** request takes longer than 60 seconds to process, a `202` response will be returned, indicating that the process of creating strings is continuing but not yet complete. This response will include a `proccessUid` value which can be used to check the progress of the request. 

        This request can return:
          * `"processState": "OPEN"` which indicates that the request is still continuing. 
          * `"processState": "CLOSED"` indicates the request has successfully completed.
          * `"processState": "FAILED"` means the request could not be completed.

        Processes have a limited lifespan after they are complete. This request will fail if you specify an expired `processUid`.
      tags:
        - Strings
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - name: processUid
          in: path
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/CreateStringStatusResponse'

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  /strings-api/v2/projects/{projectId}/source-strings:
    get:
      summary: "List all source strings"
      description: |-
        Returns source strings from Smartling. You can get strings by specifying a file you want strings for, or you can specify individual strings by hashcode.

        _If you do not specify at least one of these parameters (`hashcodes` or `fileUri`) no results will be returned._

        **Note**: If you use this call to get strings that are not added via the Strings API, you may see differences in the response.

        You may see a value for `parsedStringText` but a `null` value for `stringText`. The `stringText` records the raw input received by the Strings API, and therefore will only appear for strings uploaded via the Strings API.
        If you are getting a GDN string, the original placeholder values you used will not be returned as these are not saved by Smartling. GDN strings will have placeholders in the format `{0}`, `{1}`, etc.
      tags:
        - Strings
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - name: hashcodes
          in: formData
          description: |-
            Hashcodes for each string you want to get source strings for.
          type: array
          items:
            type: string
        - name: fileUri
          in: formData
          description: |-
            URI of a file you want to get strings for.
          type: string
        - name: limit
          in: formData
          description: |-
            Pagination setting. By default responses will be limited to 500 per request. This is also the maximum allowed value.
          type: number
        - name: offset
          in: formData
          description: |-
            Pagination setting. Default is 0.
          type: number
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/StringResponse'

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  /strings-api/v2/projects/{projectId}/translations:
    get:
      summary: "List all translations"
      description: |-
        Returns translated strings from Smartling. You can get translations by specifying a file you want strings for, or you can specify individual strings by hashcode.

        _If you do not specify at least one of these parameters (`hashcodes` or `fileUri`) no results will be returned._

        **Note**: If you use this call to get strings that were not created via the Strings API, you may see differences in the response.

        Only authorized and active strings will be returned. Excluded, unauthorized, and inactive strings will not be returned.

        You may see a value for `parsedStringText` but a `null` value for `stringText`. The `stringText` records the raw input received by the Strings API, and therefore will only appear for strings uploaded via the Strings API.
        If you are getting a GDN string, the original placeholder values you used will not be returned as these are not saved by Smartling. GDN strings will have placeholders in the format `{0}`, `{1}`, etc.
      tags:
        - Strings
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - name: hashcodes
          in: formData
          description: |-
            Hashcodes for each string you want to get translations for.
          type: array
          items:
            type: string
        - name: targetLocaleId
          in: formData
          description: |-
            Smartling ID for the language you want to get translations for.
          type: string
        - name: retrievalType
          in: formData
          description: |-
            Sets the types of translations you want returned. `published` will only return translations that have completed their workflows and been published. `pending` will return any saved translations.
          type: string
          enum: [pending, published]
        - name: fileUri
          in: formData
          description: |-
            URI of a file you want to get translations for.
          type: string
        - name: limit
          in: formData
          description: |-
            Pagination setting. By default responses will be limited to 500 per request. This is also the maximum allowed value.
          type: number
        - name: offset
          in: formData
          description: |-
            Pagination setting. Default is 0.
          type: number
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TranslationResponse'

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

#
# Glossary API endpoints
#
  /glossary-api/v2/accounts/{accountUid}/glossaries:
    get:
      description: 'Returns a list of all glossaries in an account. Optional filters for glossary name and UID can be added.'
      summary: List glossaries for account
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
        - name: name
          in: query
          type: string
          description: filter for glossary name in LIKE manner (case-insensitive)
        - name: glossaryUids
          in: query
          type: array
          items:
            type: string
          description:  filter for glossary uid in IN manner (might contain up to 100 uids separated by comma e.g glossaryUids=1234,4567)
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/GlossaryListResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 2
                  items:
                  - glossaryUid: 50d9dab5-6b8b-11e5-ba24-127b00b163a3
                    name: Another document tester-Glossary
                    createdByUserUid: ah27fhq8
                    createdDate: '2015-11-21T01:51:17Z'
                    sourceLocaleId: en-US
                    description: some desc
                  - glossaryUid: 50e5c8d3-6b8b-11e5-ba24-127b00b163a3
                    name: BizDocs test Max's project-Glossary
                    createdByUserUid: ah27fhq8
                    createdDate: '2015-11-21T01:51:17Z'
                    sourceLocaleId: en-US
                    description: some desc

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

    post:
      summary: Create glossary
      description: 'Creates a new Glossary in an account.'
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: Unique identifier of corresponding account
        - name: glossary
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateGlossary'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/GlossaryResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  glossaryUid: 50d9dab5-6b8b-11e5-ba24-127b00b163a3
                  name: Another document tester-Glossary
                  description: Description of a Glossary
                  sourceLocaleId: en-US
                  createdByUserUid: ah27fhq8
                  createdDate: '2015-11-21T01:51:17Z'

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition


  /glossary-api/v2/accounts/{accountUid}/glossaries/{glossaryUid}:
    get:
      summary: Get glossary details
      description: 'Gets the name, description, locale, and creation information for a glossary.'
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: Unique identifier of corresponding account
        - name: glossaryUid
          in: path
          required: true
          type: string
          description: Unique identifier of glossary
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/GlossaryResponse'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error500Response'

    put:
      summary: Edit glossary
      description: 'Edits the name, description or source locale of a glossary. This will completely replace the name, description and source locale of the target glossary. If you do not provide a field, or leave it blank, any existing information will be deleted.'
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: Unique identifier of corresponding account
        - name: glossaryUid
          in: path
          required: true
          type: string
          description: Unique identifier of glossary
        - name: glossary
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateGlossary'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/GlossaryResponse'

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

    delete:
      summary: Delete glossary
      description: Deletes a Glossary. Note that if a Glossary has been assigned to a Linguistic Package, you will not be able to delete it. Linguistic Packages are managed in the Smartling Dashboard.
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: Unique identifier of corresponding account
        - name: glossaryUid
          in: path
          required: true
          type: string
          description: Unique identifier of glossary
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  termText: cold call
                  partOfSpeechCode: VERB
                  definition: ''
                  notes: ''
                  caseSensitive: false
                  exactMatch: false
                  variations: ''
                  synonyms: ''
                  antonyms: ''
                  seo: false
                  doNotTranslate: false
                  translation:
                    localeId: fr-CA
                    translatedTerm: cold call french ca
                    notes: some notes from user
                    translatorUserUid: 58870b8e965
                    submittedForTranslation: true
                    lockTranslation: false

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition



  /glossary-api/v2/accounts/{accountUid}/glossaries/{glossaryUid}/terms:
    get:
      description: Returns terms from a Glossary. Only the source term is included in this response.
      summary: Find terms in glossary
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: Unique identifier of corresponding account
        - name: glossaryUid
          in: path
          required: true
          type: string
          description: Unique identifier of glossary
        - name: termText
          in: query
          type: string
          description: filter for term text in LIKE manner (case-insensitive).
        - name: limit
          in: query
          type: integer
          description: pagination portion size
        - name: offset
          in: query
          type: integer
          description: pagination offset value
        - name: sort
          in: query
          type: string
          description:  sorting instructions. represents field to sort by and direction separated by coma (i.e. sort=termText,desc). We support sorting by all fields.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/SourceTermListResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 2
                  items:
                  - termUid: e390a4d6-aef2-11e5-b159-0ad0c2f6b537
                    termText: cold calls
                    caseSensitive: false
                    exactMatch: false
                    partOfSpeechCode: UNSPECIFIED
                    definition: ''
                    variations: ''
                    synonyms: ''
                    antonyms: ''
                    seo: false
                    doNotTranslate: false
                    deprecated: false
                    notes: ''
                    createdDate: '2015-12-30T12:43:12Z'
                    modifiedDate: '2015-12-30T12:43:12Z'
                  - termUid: e390a4d6-aef2-11e5-b159-0ad0c2f6b538
                    termText: cold call
                    caseSensitive: true
                    exactMatch: false
                    partOfSpeechCode: VERB
                    definition: My definition
                    variations: ''
                    synonyms: ''
                    antonyms: ''
                    seo: false
                    doNotTranslate: false
                    deprecated: false
                    notes: My notes
                    createdDate: '2015-12-30T12:43:12Z'
                    modifiedDate: '2015-12-30T12:43:12Z'

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

    post:
      summary: Create glossary term
      description: Creates a new glossary term. The only required parameter is termText. See our Glossary documentation for details on each term parameter. You can only add one translation object in this request. To add additional translations, use Edit Glossary term.
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: Unique identifier of corresponding account
        - name: glossaryUid
          in: path
          required: true
          type: string
          description: Unique identifier of glossary
        - name: term
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateTerm'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TranslatedTermResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  termText: cold call
                  partOfSpeechCode: VERB
                  definition: ''
                  notes: ''
                  caseSensitive: false
                  exactMatch: false
                  variations: ''
                  synonyms: ''
                  antonyms: ''
                  seo: false
                  doNotTranslate: false
                  translation:
                    localeId: fr-CA
                    translatedTerm: cold call french ca
                    notes: some notes from user
                    translatorUserUid: 58870b8e965
                    submittedForTranslation: true
                    lockTranslation: false

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition


  /glossary-api/v2/accounts/{accountUid}/glossaries/{glossaryUid}/terms/batch:
    post:
      summary: Add glossary terms in bulk
      description: Creates a new glossary terms. Validation for the endpoint works in atomic fashion - either all terms passed validation, and then they all will be created, or non of them will be. Translation section is optional.
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: Unique identifier of corresponding account
        - name: glossaryUid
          in: path
          required: true
          type: string
          description: Unique identifier of glossary
        - name: term
          in: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/CreateTerm'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TranslatedTermResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 2
                  items:
                  - termText: term 22
                    partOfSpeechCode: UNSPECIFIED
                    definition: ''
                    notes: ''
                    caseSensitive: false
                    exactMatch: false
                    variations: ''
                    synonyms: ''
                    antonyms: ''
                    seo: false
                    doNotTranslate: false
                  - termText: term 33
                    partOfSpeechCode: UNSPECIFIED
                    definition: ''
                    notes: ''
                    caseSensitive: false
                    exactMatch: false
                    variations: ''
                    synonyms: ''
                    antonyms: ''
                    seo: false
                    doNotTranslate: false
                    translation:
                      localeId: fr-CA
                      translatedTerm: term 33 french ca
                      notes: some notes from user
                      translatorUserUid: 58870b8ee965
                      submittedForTranslation: false
                      lockTranslation: false

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition


  /glossary-api/v2/accounts/{accountUid}/glossaries/{glossaryUid}/locales/{localeId}/terms:
    get:
      summary: Find translations of terms
      description: |-
        Searches translations of glossary terms across all glossaries in account.

        Response contains a list of original glossary terms and translations.
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: Unique identifier of corresponding account
        - name: glossaryUid
          in: path
          required: true
          type: string
          description: Unique identifier of glossary
        - name: localeId
          in: path
          required: true
          type: string
          description: A valid Smartling Locale ID
        - name: termUids
          in: query
          type: array
          items:
            type: string
          description: UIDs of specific terms to be retrieved (validation allows not more than 100 in single request)
        - name: termText
          in: query
          type: string
          description: filter for term text in LIKE manner (case-insensitive).
        - name: translated
          in: query
          type: boolean
          description: flag to filter out terms by criteria of presence of translation. if not specified - it is not taken into account
        - name: limit
          in: query
          type: integer
          description: pagination portion size
        - name: offset
          in: query
          type: integer
          description: pagination offset value
        - name: sort
          in: query
          type: string
          description:  sorting instructions. represents field to sort by and direction separated by coma (i.e. sort=termText,desc). We support sorting by all fields.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TranslatedTermResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 2
                  items:
                  - translation:
                      createdDate: '2015-12-30T12:43:12Z'
                      modifiedDate: '2015-12-30T12:43:12Z'
                      localeId: fr-CA
                      translatedTerm: cold calls in french ca
                      notes: ''
                      submittedForTranslation: true
                      translatorUserUid: 58870b8ee964
                      lockTranslation: false
                    termUid: e390a4d6-aef2-11e5-b159-0ad0c2f6b537
                    termText: cold calls
                    caseSensitive: false
                    exactMatch: false
                    partOfSpeechCode: UNSPECIFIED
                    definition: ''
                    variations: ''
                    synonyms: ''
                    antonyms: ''
                    seo: false
                    doNotTranslate: false
                    deprecated: false
                    notes: ''
                    createdDate: '2015-12-30T12:43:12Z'
                    modifiedDate: '2015-12-30T12:43:12Z'
                  - translation:
                      createdDate: '2015-12-30T12:43:12Z'
                      modifiedDate: '2015-12-30T12:43:12Z'
                      localeId: fr-CA
                      translatedTerm: cold call french ca
                      notes: ''
                      submittedForTranslation: false
                      translatorUserUid: 58870b8ee966
                      lockTranslation: false
                    termUid: e390a4d6-aef2-11e5-b159-0ad0c2f6b538
                    termText: cold call
                    caseSensitive: false
                    exactMatch: false
                    partOfSpeechCode: ADJECTIVE
                    definition: ''
                    variations: ''
                    synonyms: ''
                    antonyms: ''
                    seo: false
                    doNotTranslate: false
                    deprecated: false
                    notes: ''
                    createdDate: '2015-12-30T12:43:12Z'
                    modifiedDate: '2015-12-30T12:43:12Z'

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition


  /glossary-api/v2/accounts/{accountUid}/locales/{localeId}/terms:
    get:
      summary: Find translations of terms across all glossaries
      description: |-
        Searches translations of glossary terms across all glossaries in account.

        Response contains a list of original glossary terms and translations. There is a glossary UID for every term
        to show which glossary it belongs to.
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: Unique identifier of corresponding account
        - name: localeId
          in: path
          required: true
          type: string
          description: A valid Smartling Locale ID
        - name: termUids
          in: query
          type: array
          items:
            type: string
          description: UIDs of specific terms to be retrieved (validation allows not more than 100 in single request)
        - name: termText
          in: query
          type: string
          description: filter for term text in LIKE manner (case-insensitive).
        - name: translated
          in: query
          type: boolean
          description: flag to filter out terms by criteria of presence of translation. if not specified - it is not taken into account
        - name: limit
          in: query
          type: integer
          description: pagination portion size
        - name: offset
          in: query
          type: integer
          description: pagination offset value
        - name: sort
          in: query
          type: string
          description:  sorting instructions. represents field to sort by and direction separated by coma (i.e. sort=termText,desc). We support sorting by all fields.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TermWithGlossaryUidListResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount: 2
                  items:
                  - translation:
                      localeId: fr-FR
                      translatedTerm: arabian architecture in french
                      notes: ''
                      translatorUserUid:
                      lockTranslation: false
                      submittedForTranslation: false
                      createdDate: '2015-10-21T11:08:01Z'
                      modifiedDate: '2015-10-27T13:09:56Z'
                    termUid: 6b3e1e8c-eb40-4c32-a9f7-024e407b0b30
                    termText: arabian architecture
                    caseSensitive: true
                    exactMatch: false
                    partOfSpeechCode: VERB
                    definition: ''
                    variations: ''
                    synonyms: ''
                    antonyms: ''
                    seo: true
                    doNotTranslate: false
                    deprecated: false
                    notes: ''
                    createdByUserUid: kjakjf82v
                    glossaryUid: bdf416ee-98ff-11e5-b159-0ad0c2f6b537
                    createdDate: '2015-10-19T15:48:34Z'
                    modifiedDate: '2015-11-09T15:33:19Z'
                  - translation:
                      localeId: fr-FR
                      translatedTerm: summer time french 22
                      notes: ''
                      translatorUserUid:
                      lockTranslation: false
                      submittedForTranslation: false
                      createdDate: '2015-12-02T14:28:00Z'
                      modifiedDate: '2015-12-02T14:28:00Z'
                    termUid: aaf416ee-98ff-11e5-b159-0ad0c2f6b537
                    termText: summer time
                    caseSensitive: false
                    exactMatch: false
                    partOfSpeechCode: ADJECTIVE
                    definition: ''
                    variations: ''
                    synonyms: ''
                    antonyms: ''
                    seo: false
                    doNotTranslate: false
                    deprecated: false
                    notes: ''
                    createdByUserUid: kjakjf82v
                    glossaryUid: bbf416ee-98ff-11e5-b159-0ad0c2f6b537
                    createdDate: '2015-12-02T14:19:15Z'
                    modifiedDate: '2015-12-02T14:19:15Z'

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition


  /glossary-api/v2/accounts/{accountUid}/glossaries/{glossaryUid}/terms/{termUid}:
    put:
      summary: Edit glossary term
      description: |-
        Edits the details of a glossary term. With the exception of the translation object, you must provide all desired
        fields every time you edit the term. If you do not provide a field or leave it blank, any existing value for
        that field will be deleted. To add translations for multiple locales, make a separate request for each locale.
        Keep all fields except for the translation object identical in each request.

      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: Unique identifier of corresponding account
        - name: glossaryUid
          in: path
          required: true
          type: string
          description: Unique identifier of glossary
        - name: termUid
          in: path
          required: true
          type: string
          description: Unique identifier of specific glossary term
        - name: term
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateTerm'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TranslatedTermResponse'
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error500Response'
    delete:
      description: 'Delete a Glossary term. This will remove the term and all translations.'
      summary: Delete glossary term
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: Unique identifier of corresponding account
        - name: glossaryUid
          in: path
          required: true
          type: string
          description: Unique identifier of glossary
        - name: termUid
          in: path
          required: true
          type: string
          description: Unique identifier of specific glossary term
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  /glossary-api/v2/projects/{projectUid}/glossaries/{glossaryUid}/terms/authorization:
    put:
      summary: Authorize terms for translation
      description: Sends selected terms for translation via specified workflows to chosen target locales.
      tags:
        - Glossaries
      parameters:
        - name: projectUid
          in: path
          required: true
          type: string
          description: Unique identifier of corresponding project
        - name: glossaryUid
          in: path
          required: true
          type: string
          description: Unique identifier of glossary
        - name: request
          in: body
          required: true
          schema:
            $ref: '#/definitions/AuthorizeTerms'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  /glossary-api/v2/accounts/{accountUid}/glossaries/{glossaryUid}/download:
    get:
      summary: Download glossary
      description: Downloads a glossary as a CSV, TBX, or XLSX (Open Excel) file.
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: Unique identifier of corresponding account
        - name: glossaryUid
          in: path
          required: true
          type: string
          description: Unique identifier of glossary
        - name: format
          in: query
          required: true
          type: string
          description: Format that is used for glossary export
          enum: [csv, tbx, xlsx]
        - name: localeIds
          in: query
          type: string
          description: 'Comma-separated list of locales for which to return translations'
      responses:
        200:
          description: OK
          schema:
            type: file

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  /glossary-api/v2/accounts/{accountUid}/import-jobs:
    post:
      summary: Import glossary from Excel file
      description: |-
        Creates a new Glossary in your account from an uploaded Excel spreadsheet. The format of the spreadsheet is
        important. See Import Glossary and Glossary Spreadsheet Format.

      tags:
        - Glossaries
      consumes:
        - multipart/form-data
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: Unique identifier of corresponding account
        - name: name
          in: formData
          required: true
          type: string
          description: 'A name for the glossary. This name must be unique. Attempting to use a name already in use in the account will return an error.'
        - name: sourceLocaleId
          in: formData
          required: true
          type: string
          description: 'Source locale for the glossary.'
        - name: description
          in: formData
          required: true
          type: string
          description: 'Description for the glossary'
        - name: importFile
          in: formData
          required: true
          type: file
          description: 'File containing the Glossary you want to import. See Glossary Spreadsheet Format for details.'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/GlossaryImportJob'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  glossaryImportJobUid: 78d93dde-5e3d-4beb-8171-415f82ca2c7b
                  glossary:
                    glossaryUid: 5c8d2aa8-e254-4ab3-8eb3-3b96b24f8609
                    name: Import keysight test
                    accountUid: 8a196313
                    createdByUserUid: 58870b8ee965
                    sourceLocaleId: en
                    description: test desc
                    createdDate: '2016-05-18T12:04:38Z'
                  fileName: ExampleImportGlossary2.xlsx
                  accountUid: b76d6285
                  glossaryImportJobStatus: PENDING
                  termsNumber: 10
                  termsProcessed: 0
                  localesNumber: 20
                  createdDate: '2016-03-21T15:00:48Z'
                  modifiedDate: '2016-03-21T15:00:48Z'
                  createdByUserUid: 58870b8ee965

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  /glossary-api/v2/accounts/{accountUid}/import-jobs/{glossaryImportJobUid}:
    get:
      summary: Status of glossary import
      description: Checks the status of a glossary import.
      tags:
        - Glossaries
      parameters:
        - name: accountUid
          in: path
          required: true
          type: string
          description: Unique identifier of corresponding account
        - name: glossaryImportJobUid
          in: path
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/GlossaryImportJob'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  glossaryImportJobUid: 78d93dde-5e3d-4beb-8171-415f82ca2c7b
                  glossary:
                    glossaryUid: 5c8d2aa8-e254-4ab3-8eb3-3b96b24f8609
                    name: Import keysight test
                    accountUid: 8a196313
                    createdByUserUid: 58870b8ee965
                    sourceLocaleId: en
                    description: test desc
                    createdDate: '2016-05-18T12:04:38Z'
                  fileName: ExampleImportGlossary2.xlsx
                  accountUid: b76d6285
                  glossaryImportJobStatus: PENDING
                  termsNumber: 10
                  termsProcessed: 0
                  localesNumber: 20
                  createdDate: '2016-03-21T15:00:48Z'
                  modifiedDate: '2016-03-21T15:00:48Z'
                  createdByUserUid: 58870b8ee965

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  /glossary-api/v2/dictionary/parts-of-speech:
    get:
      summary: List parts of speech
      description: Order is fixed and consistent throughout the calls.
      tags:
        - Glossaries
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/PartsOfSpeechList'
          examples:
            response:
              code: SUCCESS
              data:
                totalCount: 9
                items:
                - partOfSpeechCode: NOUN
                  description: Noun
                - partOfSpeechCode: VERB
                  description: Verb
                - partOfSpeechCode: ADJECTIVE
                  description: Adjective
                - partOfSpeechCode: ADVERB
                  description: Adverb
                - partOfSpeechCode: PRONOUN
                  description: Pronoun
                - partOfSpeechCode: PREPOSITION
                  description: Preposition
                - partOfSpeechCode: INTERJECTION
                  description: Interjection
                - partOfSpeechCode: CONJUNCTION
                  description: Conjunction
                - partOfSpeechCode: UNSPECIFIED
                  description: Unspecified

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  #
  # Jobs API endpoints
  #
  /jobs-api/v3/projects/{projectId}/jobs:
    get:
      summary: "List jobs within a project"
      tags:
        - Jobs
      description: "List / search the jobs within a project."
      consumes:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: jobName
          in: query
          type: string
          required: false
          description: Used for searching jobs by `jobName`. Any entry is treated as a LIKE query on the name of the job.
        - name: translationJobUids
          in: query
          type: array
          items:
            type: string
          required: false
          description: Used for searching jobs by `translationJobUid`. Supports up to 500 `translationJobUid`s.
        - name: translationJobStatus
          in: query
          type: array
          items:
            type: string
          required: false
          description: Used for searching jobs by `jobStatus`.
        - name: limit
          in: query
          type: integer
          required: false
          description: The limit on the number of jobs returned.
        - name: offset
          in: query
          type: integer
          required: false
          description: The offset to use when searching for jobs.
        - name: sortBy
          in: query
          type: string
          required: false
          enum:
            - createdDate
            - dueDate
            - jobName
          description: The field to sort by.
        - name: sortDirection
          in: query
          type: string
          enum:
            - ASC
            - DESC
          required: false
          description: The direction to sort.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ListJobsResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount : 2
                  items:
                  - translationJobUid : "abc123abc"
                    jobName : "myJobName"
                    targetLocaleIds : ["fr-FR","es"]
                    description : "my job description"
                    dueDate : "2015-11-21T11:51:17Z"
                    referenceNumber : "myReferenceNumber1"
                    createdDate : "2015-11-21T11:51:17Z"
                    jobStatus : "IN_PROGRESS"
                  - translationJobUid : "abc321xyz"
                    jobName : "myJobName"
                    targetLocaleIds : ["fr-FR","de"]
                    description : "my job description"
                    dueDate : "2015-11-21T11:51:17Z"
                    referenceNumber : "myReferenceNumber1"
                    createdDate : "2015-11-21T11:51:17Z"
                    jobStatus : "IN_PROGRESS"

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
    post:
      summary: "Create job"
      tags:
        - Jobs
      description: "Creates a job within Smartling."
      consumes:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
          format: uuid
        - name: CreateJobRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateJobRequest'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ShallowJobResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  translationJobUid : "abc123abc"
                  jobName : "myJobName"
                  targetLocaleIds : ["fr-FR"]
                  description : "my job description"
                  dueDate : "2015-11-21T11:51:17Z"
                  referenceNumber : "myReferenceNumber1"
                  callbackUrl : "https://www.callback.com/smartling/job"
                  callbackMethod : "GET|POST"
                  createdDate : "2015-11-21T11:51:17Z"
                  modifiedDate : "2015-11-21T11:51:17Z"
                  createdByUserUid : "userUid123abc"
                  modifiedByUserUid : "userUid321abc"
                  jobStatus : "IN_PROGRESS"
                  firstCompletedDate : "2015-11-21T11:51:17Z"
                  lastCompletedDate : "2015-11-21T11:51:17Z"
        400:
          description: Validation error during job creation.
          schema:
            $ref: '#/definitions/Error400Response'
          examples:
            application/json:
              response:
                code: VALIDATION_ERROR
                errors:
                - key: null
                message: 'There is already a job with that name. Please provide a unique name.'
                details:
                  field: jobName
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  /jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/strings/add:
    post:
      summary: "Add strings to job"
      tags:
        - Jobs
      description: |
        Adding strings to a job is useful if you don't manage strings / content through files, but instead need to add strings by some other means other than files.

        When strings are successfully added to a job, a `200` status is returned. When the system can't quickly add strings to the job, a `202` response status is returned. The response contains a link and `processUid` to check the progress of the request. When a `202` is received, the process of adding the content to the job will not be complete until the returned process has completed.
      consumes:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: translationJobUid
          in: path
          required: true
          type: string
        - name: AddStringsJobRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/AddStringsJobRequest'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/SuccessFailCountJobResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  successCount: 100 # number of strings added to the job
                  failCount: 0 # number of strings that could not be added to the job
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/AsyncProcessJobResponse'
          examples:
            application/json:
              response:
                code: ACCEPTED
                data:
                  message: This process will continue asynchronously and may take up to a few minutes.
                  url: "https://api.smartling.com/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/processes/{processUid}"
        400:
          description: Validation error response
          schema:
            $ref: '#/definitions/Error400Response'
          examples:
            application/json:
              response:
                code: VALIDATION_ERROR
                errors:
                - key: null
                message: 'Invalid locales [ad]'
                details:
                  field: targetLocaleIds
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  /jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/strings/remove:
    post:
      summary: "Remove strings from job"
      tags:
        - Jobs
      description: |
        Remove strings from a job. Any strings removed from the job will also be unauthorized within Smartling.

        If strings are successfully removed from a job, a `200` status will be returned. When the system can't quickly add the strings to the job, a `202` response is returned. The response contains a link to check the progress of the request. When a `202` is received, the process of removing the content from the job will not be complete until the returned process has completed.
      consumes:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: translationJobUid
          in: path
          required: true
          type: string
        - name: RemoveStringsJobRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/RemoveStringsJobRequest'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/SuccessFailCountJobResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  successCount: 100 # number of strings removed from the job
                  failCount: 0 # number of strings that could not be removed from the job
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/AsyncProcessJobResponse'
          examples:
            application/json:
              response:
                code: ACCEPTED
                data:
                  message: This process will continue asynchronously and may take up to a few minutes.
                  url: "https://api.smartling.com/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/processes/{processUid}"

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  /jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/close:
    post:
      summary: "Close job"
      tags:
        - Jobs
      description: "This closes a completed job. In order for a job to be closed, it must be in a completed state. All content from the job will be removed when it is closed. Closing a job guarantees that no additional work will be done against the job."
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: translationJobUid
          in: path
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/NullDataJobResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data: null
        400:
          description: Validation error when closing a job
          schema:
            $ref: '#/definitions/Error400Response'
          examples:
            application/json:
              response:
                code: VALIDATION_ERROR
                errors:
                  - key: null
                    message: 'Only a job that is COMPLETE can be closed.'
                    details: null

        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

  /jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/cancel:
    post:
      summary: "Cancel job"
      tags:
        - Jobs
      description: |
        This cancels a job. All content within the job will be removed from the job and the content will be unauthorized.

        If a job is successfully cancelled, a `200` response status will be returned. When the system can't quickly cancel the job, a `202` response is returned. The response contains a link to check the progress of the request. When a `202` is received, the process of canceling and removing the content from the job will not be complete until the returned process has completed.
      consumes:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: translationJobUid
          in: path
          required: true
          type: string
        - name: CancelJobRequest
          in: body
          required: false
          schema:
            $ref: '#/definitions/CancelJobRequest'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/NullDataJobResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data: null
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/AsyncProcessJobResponse'
          examples:
            application/json:
              response:
                code: ACCEPTED
                data:
                  message: This process will continue asynchronously and may take up to a few minutes.
                  url: "https://api.smartling.com/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/processes/{processUid}"
        400:
          description: Validation error when cancelling a job
          schema:
            $ref: '#/definitions/Error400Response'
          examples:
            application/json:
              response:
                code: VALIDATION_ERROR
                errors:
                  - key: null
                    message: 'Job can be cancelled only in DRAFT, AWAITING_AUTHORIZATION, or IN_PROGRESS statuses'
                    details: null
        401:
          description: Authentication error
          schema:
            $ref: '#/definitions/Error401Response'
          examples:
            application/json:
              response:
                code: AUTHENTICATION_ERROR
                errors:
                  - message: Invalid token
                    key: invalid_token
                    details: {}
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  /jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/authorize:
    post:
      summary: "Authorize job"
      tags:
        - Jobs
      description: "This authorizes all content within a job. A job can only be authorized when it has content and is in an AWAITING_AUTHORIZATION state."
      consumes:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: translationJobUid
          in: path
          required: true
          type: string
        - name: AuthorizeJobRequest
          in: body
          required: true
          description: The payload to use when authorizing a job. If no target locales and workflows are provided, empty body `{}` should be provided. Smartling will authorize the job for the default workflows for the given Project.
          schema:
            $ref: '#/definitions/AuthorizeJobRequest'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/NullDataJobResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data: null
        400:
          description: Validation error when authorizing a job
          schema:
            $ref: '#/definitions/Error400Response'
          examples:
            application/json:
            response:
              code: VALIDATION_ERROR
              errors:
                - key: null
                  message: Job can be authorized only in AWAITING_AUTHORIZATION status(es).
                  details: null
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  /jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}:
    get:
      summary: "Get details of job"
      tags:
        - Jobs
      description: "This gets the details of a job such as job name, description, due date, and reference number."
      consumes:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: translationJobUid
          in: path
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/DetailedJobResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  translationJobUid: jhcgalvnb6za
                  jobName: 'test job (Cancelled 2017/11/04 12:01:28)'
                  targetLocaleIds:
                    - uk-UA
                    - ru-RU
                  description: null
                  dueDate: null
                  referenceNumber: null
                  callbackUrl: null
                  callbackMethod: null
                  createdDate: '2017-11-03T14:18:37Z'
                  modifiedDate: '2017-11-04T12:01:28Z'
                  createdByUserUid: '518252370016'
                  modifiedByUserUid: '598d89cce43a'
                  firstCompletedDate: null
                  lastCompletedDate: null
                  jobStatus: CANCELLED
                  sourceFiles:
                    - uri: admin.properties
                      name: admin.properties
        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        404:
          description: Job not found error
          schema:
            $ref: '#/definitions/Error404Response'
          examples:
            application/json:
              response:
                code: NOT_FOUND_ERROR
                errors:
                  - key: null
                    message: null
                    details: null
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
    put:
      summary: "Update job"
      tags:
        - Jobs
      description: "This updates the attributes of the job, such as job name, description, due date, and reference number."
      consumes:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: translationJobUid
          in: path
          required: true
          type: string
        - name: UpdateJobRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateJobRequest'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/DetailedJobResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  translationJobUid: jhcgalvnb6za
                  jobName: 'Test Job'
                  targetLocaleIds:
                    - uk-UA
                    - ru-RU
                  description: 'Description of the job'
                  dueDate: '2020-11-03T14:18:37Z'
                  referenceNumber: null
                  callbackUrl: null
                  callbackMethod: null
                  createdDate: '2017-11-03T14:18:37Z'
                  modifiedDate: '2017-11-04T12:01:28Z'
                  createdByUserUid: '518252370016'
                  modifiedByUserUid: '598d89cce43a'
                  firstCompletedDate: null
                  lastCompletedDate: null
                  jobStatus: AWAITING_AUTHORIZATION
                  sourceFiles:
                    - uri: admin.properties
                      name: admin.properties
        404:
          description: Job not found error
          schema:
            $ref: '#/definitions/Error404Response'
          examples:
            application/json:
              response:
                code: NOT_FOUND_ERROR
                errors:
                  - key: null
                    message: null
                    details: null
        400:
          description: Validation error on updating a job
          schema:
            $ref: '#/definitions/Error400Response'
          examples:
            application/json:
            response:
              code: VALIDATION_ERROR
              errors:
                - key: null
                  message: 'Job can be edited only in DRAFT, AWAITING_AUTHORIZATION, IN_PROGRESS or COMPLETED statuses.'
                  details: null
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  /jobs-api/v3/projects/{projectId}/jobs/search:
    post:
      summary: "Search for job"
      tags:
        - Jobs
      description: "This searches for jobs based on hashcodes (string identifiers), `fileUri`s, and `translationJobUid`s."
      consumes:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: SearchJobRequest
          in: body
          required: true
          description: "The filters to use when searching for jobs within the project."
          schema:
            $ref: '#/definitions/SearchJobRequest'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ListJobsResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount : 2
                  items:
                  - translationJobUid : "abc123abc"
                    jobName : "myJobName"
                    targetLocaleIds :
                    - uk-UA
                    - ru-RU
                    description : "my job description"
                    dueDate : "2015-11-21T11:51:17Z"
                    referenceNumber : "myReferenceNumber1"
                    createdDate : "2015-11-21T11:51:17Z"
                    jobStatus : "IN_PROGRESS"
                  - translationJobUid : "abc321xyz"
                    jobName : "myJobName"
                    targetLocaleIds :
                    - uk-UA
                    - ru-RU
                    description : "my job description"
                    dueDate : "2015-11-21T11:51:17Z"
                    referenceNumber : "myReferenceNumber1"
                    createdDate : "2015-11-21T11:51:17Z"
                    jobStatus : "IN_PROGRESS"

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  /jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/processes/{processUid}:
    get:
      summary: "Check for an async process for job"
      tags:
        - Jobs
      description: "This checks for an asynchronous process for a job."
      consumes:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: translationJobUid
          in: path
          required: true
          type: string
        - name: processUid
          in: path
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ProcessCheckJobResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  processUid : "13424r5-qaswerxs-43435ff"
                  translationJobUid : "784578f-qaswerxs-43435ff"
                  processState : "IN_PROGRESS | COMPLETED | FAILED"
                  createdDate : "2015-11-21T11:51:17Z"
                  modifiedDate : "2015-11-21T11:51:17Z"

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  /jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/file/add:
    post:
      summary: "Add file to job"
      tags:
        - Jobs
      description: |
        This adds a file to a job. By default, the file will be added for all locales of the job, but you can change this by specifying `targetLocaleId`s for the job you wish to add the file into. 

        **Validation rules:**
        - A job can contain a maximum of 5000 files.
        - Content can't be added to the job if the job doesn't contain any locales, and the request to add a file doesn't specify any locales.
        - The file (specified by the `fileUri`) can't be in the process of being uploaded / modified within Smartling. It should complete its upload process before being added to a job.
        - Any targetLocale's specified must be valid within the project the job has been created for

        When the system can quickly add the file and its content to the job, it synchronously responds with status `200`. When the system cannot quickly add the file and its content to the job, then a `202` response is returned. The response contains a link to check the progress of the request. When a `202` is received, the process of adding the content to the job will not be complete until the returned process has completed.
      consumes:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: translationJobUid
          in: path
          required: true
          type: string
        - name: AddFileJobRequest
          in: body
          required: true
          description: "The `fileUri` (unique URI of the file). The file should not currently be in the process of being uploaded to Smartling before being added to a job. To check this, you can invoke the file-api /file/status API on the file and verify a `200` response before requesting the file be added to the job."
          schema:
            $ref: '#/definitions/AddFileJobRequest'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/SuccessFailCountJobResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  successCount: 1 # The number of strings added to the job.
                  failCount: 1 # The number of strings that could not be added to the job.
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/AsyncProcessJobResponse'
          examples:
            application/json:
              response:
                code: ACCEPTED
                data:
                  message: This process will continue asynchronously and may take up to a few minutes.
                  url: "https://api.smartling.com/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/processes/{processUid}"
        400:
          description: Validation error adding file to a job
          schema:
            $ref: '#/definitions/Error400Response'
          examples:
            application/json:
              response:
                code: VALIDATION_ERROR
                errors:
                  - key: null
                    message: 'File not found: <fileUri>'
                    details: null
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  /jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/file/remove:
    post:
      summary: "Remove file from job"
      tags:
        - Jobs
      description: |
        Removes a file from a job. All content that is part of the file contained within that job will be removed from the job and will become unuathorized content.

        When the system can quickly remove the file and its content from the job synchronously responds with status **200**. When the system cannot quickly remove the file and its content to the job, then a 202 response is returned. The response contains a link to check the progress of the request. When a 202 is received, then the process of removing the file and it's contents from the job will not be complete until the returned process has completed.
      consumes:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: translationJobUid
          in: path
          required: true
          type: string
        - name: RemoveFileJobRequest
          in: body
          required: true
          description: The fileUri (unique URI of the file) that is to be removed from the job.
          schema:
            $ref: '#/definitions/RemoveFileJobRequest'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/SuccessFailCountJobResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  successCount: 1 # The number of strings removed from the job
                  failCount: 1 # The number of strings that could not be removed from the job
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/AsyncProcessJobResponse'
          examples:
            application/json:
              response:
                code: ACCEPTED
                data:
                  message: This process will continue asynchronously and may take up to a few minutes.
                  url: "https://api.smartling.com/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/processes/{processUid}"
        404:
          description: Not found validation error
          examples:
            application/json:
              response:
                code: NOT_FOUND_ERROR
                errors:
                  - key: null
                    message: null
                    details: null
        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  /jobs-api/v3/projects/{projectId}/job/{translationJobUid}/files:
    get:
      summary: "List files within job"
      tags:
        - Jobs
      description: "This lists all files within a job."
      consumes:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: translationJobUid
          in: path
          required: true
          type: string
        - name: limit
          in: query
          type: integer
          required: false
          description: The limit on the number of files returned.
        - name: offset
          in: query
          type: integer
          required: false
          description: The offset to use when searching for files.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ListFilesResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  totalCount : 2
                  items:
                  - uri : "/file/app1.properties"
                  - uri : "/file/app2.properties"

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  /jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/locales/{targetLocaleId}:
    post:
      summary: "Add locale to job"
      tags:
        - Jobs
      description: |
        This adds a locale to a job. When the system can quickly add the locale and any content to the job, it synchronously responds with status `200`. When the system can't quickly add the locale and any content to the job, a `202` response is returned. The response contains a link to check the progress of the request. When a `202` is received, the process of adding the content to the job will not be complete until the returned process has completed.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: translationJobUid
          in: path
          required: true
          type: string
        - name: targetLocaleId
          in: path
          required: true
          type: string
        - name: syncContent
          in: query
          required: false
          type: string
          description: Default to true. When a new locale is being added to a job, by default all content in the job will be added to the job for the new locale. If set to false, then no content will be added to the job, and only a locale placeholder will be added to the job.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/NullDataJobResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data: null
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/AsyncProcessJobResponse'
          examples:
            application/json:
              response:
                code: ACCEPTED
                data:
                  message: This process will continue asynchronously and may take up to a few minutes.
                  url: "https://api.smartling.com/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/processes/{processUid}"

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
    delete:
      summary: "Remove locale from job"
      tags:
        - Jobs
      description: |
        This removes a locale from a job. When removing a locale from a job (and thus any content within that job for that locale), the content being removed will be unauthorized.

        When the system can quickly remove the locale and any content from the job, it synchronously responds with status `200`. When the system cannot quickly remove the locale and any content from the job, then a `202` response is returned. The response contains a link to check the progress of the request. When a `202` is received, the process of removing the content from the job will not be complete until the returned process has completed.
      consumes:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: translationJobUid
          in: path
          required: true
          type: string
        - name: targetLocaleId
          in: path
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/NullDataJobResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data: null
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/AsyncProcessJobResponse'
          examples:
            application/json:
              response:
                code: ACCEPTED
                data:
                  message: "This process will continue asynchronously and may take up to a few minutes."
                  url: "https://api.smartling.com/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/processes/{processUid}"

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  /jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/file/progress:
    get:
      summary: "Get progress of file within job"
      tags:
        - Jobs
      description: "This shows the progress of a file within a job."
      consumes:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: translationJobUid
          in: path
          required: true
          type: string
        - name: fileUri
          in: query
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ProgressResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  contentProgressReport:
                    - targetLocaleId: uk-UA
                      targetLocaleDescription: Ukrainian (Ukraine)
                      workflowProgressReportList:
                        - workflowUid: 091e04a9faca
                          workflowName: Project Default
                          workflowStepSummaryReportItemList:
                            - workflowStepUid: 559ce40f2789
                              workflowStepName: Translation
                              stringCount: 4
                              wordCount: 16
                              workflowStepType: TRANSLATION
                            - workflowStepUid: 704a4b554b85
                              workflowStepName: Edit
                              stringCount: 0
                              wordCount: 0
                              workflowStepType: POST_TRANSLATION__EDIT
                            - workflowStepUid: b50f989af2c3
                              workflowStepName: Published
                              stringCount: 0
                              wordCount: 0
                              workflowStepType: PUBLISH
                      unauthorizedProgressReport:
                        stringCount: 0
                        wordCount: 0
                      progress:
                        totalWordCount: 16
                        percentComplete: 25
                    - targetLocaleId: ru-RU
                      targetLocaleDescription: Russian
                      workflowProgressReportList:
                        - workflowUid: 091e04a9faca
                          workflowName: Project Default
                          workflowStepSummaryReportItemList:
                            - workflowStepUid: 559ce40f2789
                              workflowStepName: Translation
                              stringCount: 1
                              wordCount: 4
                              workflowStepType: TRANSLATION
                            - workflowStepUid: 704a4b554b85
                              workflowStepName: Edit
                              stringCount: 2
                              wordCount: 8
                              workflowStepType: POST_TRANSLATION__EDIT
                            - workflowStepUid: b50f989af2c3
                              workflowStepName: Published
                              stringCount: 1
                              wordCount: 4
                              workflowStepType: PUBLISH
                      unauthorizedProgressReport:
                        stringCount: 0
                        wordCount: 0
                      progress:
                        totalWordCount: 16
                        percentComplete: 75
                  progress:
                    totalWordCount: 32
                    percentComplete: 50

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition
  /jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/progress:
    get:
      summary: "Get progress of job"
      tags:
        - Jobs
      description: "This gets the progress of a job."
      consumes:
        - application/json
      parameters:
        - name: projectId
          in: path
          required: true
          type: string
        - name: translationJobUid
          in: path
          required: true
          type: string
        - name: targetLocaleId
          in: query
          required: false
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ProgressResponse'
          examples:
            application/json:
              response:
                code: SUCCESS
                data:
                  contentProgressReport:
                    - targetLocaleId: uk-UA
                      targetLocaleDescription: Ukrainian (Ukraine)
                      workflowProgressReportList:
                        - workflowUid: 091e04a9faca
                          workflowName: Project Default
                          workflowStepSummaryReportItemList:
                            - workflowStepUid: 559ce40f2789
                              workflowStepName: Translation
                              stringCount: 4
                              wordCount: 16
                              workflowStepType: TRANSLATION
                            - workflowStepUid: 704a4b554b85
                              workflowStepName: Edit
                              stringCount: 0
                              wordCount: 0
                              workflowStepType: POST_TRANSLATION__EDIT
                            - workflowStepUid: b50f989af2c3
                              workflowStepName: Published
                              stringCount: 0
                              wordCount: 0
                              workflowStepType: PUBLISH
                      unauthorizedProgressReport:
                        stringCount: 0
                        wordCount: 0
                      progress:
                        totalWordCount: 16
                        percentComplete: 25
                    - targetLocaleId: ru-RU
                      targetLocaleDescription: Russian
                      workflowProgressReportList:
                        - workflowUid: 091e04a9faca
                          workflowName: Project Default
                          workflowStepSummaryReportItemList:
                            - workflowStepUid: 559ce40f2789
                              workflowStepName: Translation
                              stringCount: 1
                              wordCount: 4
                              workflowStepType: TRANSLATION
                            - workflowStepUid: 704a4b554b85
                              workflowStepName: Edit
                              stringCount: 2
                              wordCount: 8
                              workflowStepType: POST_TRANSLATION__EDIT
                            - workflowStepUid: b50f989af2c3
                              workflowStepName: Published
                              stringCount: 1
                              wordCount: 4
                              workflowStepType: PUBLISH
                      unauthorizedProgressReport:
                        stringCount: 0
                        wordCount: 0
                      progress:
                        totalWordCount: 16
                        percentComplete: 75
                  progress:
                    totalWordCount: 32
                    percentComplete: 50

        400: *Error400ResponseDefinition
        401: *Error401ResponseDefinition
        404:
          description: Not found error
          schema:
            $ref: '#/definitions/Error404Response'
          examples:
            application/json:
              response:
                code: NOT_FOUND_ERROR
                errors:
                  - key: null
                    message: null
                    details: null
        429: *Error429ResponseDefinition
        500: *Error500ResponseDefinition

definitions:

  SuccessResponse:
    type: object
    required:
      - code
    properties:
      code:
        type: string
        enum:
          - SUCCESS
        description: Indicates whether the response was successful or what error has occured

  Error:
    type: object
    required:
    - key
    - message
    properties:
      key:
        type: string
        example: general_error
      message:
        type: string
        example: Unexpected server error
      details:
        type: object
        example: {}

  Error500Response:
    type: object
    required:
      - response
    properties:
      response:
        type: object
        required:
          - code
          - errors
        properties:
          code:
            type: string
            enum:
              - GENERAL_ERROR
              - MAINTENANCE_MODE_ERROR
            description: Indicates whether the response was successful or what error has occured
          errors:
            type: array
            items:
              $ref: '#/definitions/Error'

  Error400Response:
    type: object
    required:
    - response
    properties:
      response:
        type: object
        required:
        - code
        - errors
        properties:
          code:
            type: string
            description: Indicates whether the response was successful or what error has occured
            enum:
            - VALIDATION_ERROR
          errors:
            type: array
            items:
              $ref: '#/definitions/Error'

  Error401Response:
    type: object
    required:
    - response
    properties:
      response:
        type: object
        required:
        - code
        - errors
        properties:
          code:
            type: string
            description: Indicates whether the response was successful or what error has occured
            enum:
            - AUTHENTICATION_ERROR
            - AUTHORIZATION_ERROR
          errors:
            type: array
            items:
              $ref: '#/definitions/Error'

  Error404Response:
    type: object
    required:
    - response
    properties:
      response:
        type: object
        required:
        - code
        - errors
        properties:
          code:
            type: string
            description: Indicates whether the response was successful or what error has occured
            enum:
            - NOT_FOUND_ERROR
          errors:
            type: array
            items:
              $ref: '#/definitions/Error'

  Error423Response:
    type: object
    required:
    - response
    properties:
      response:
        type: object
        required:
        - code
        - errors
        properties:
          code:
            type: string
            description: Indicates whether the response was successful or what error has occured
            enum:
            - RESOURCE_LOCKED
          errors:
            type: array
            items:
              $ref: '#/definitions/Error'

  Error429Response:
    type: object
    required:
    - response
    properties:
      response:
        type: object
        required:
        - code
        - errors
        properties:
          code:
            type: string
            description: Indicates whether the response was successful or what error has occured
            enum:
            - MAX_OPERATIONS_LIMIT_EXCEEDED
          errors:
            type: array
            items:
              $ref: '#/definitions/Error'

  EmptyResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          default: null


  AuthenticationRequest:
    type: object
    required:
      - userIdentifier
      - userSecret
    properties:
      userIdentifier:
        type: string
        description: Unique integer used to identify a user.
        example: Qw**********
      userSecret:
        type: string
        description: A personal code that identifies an authorized user of the API endpoint.
        example: Zj**********

  AuthenticationResponse:
    allOf:
      - $ref: '#/definitions/SuccessResponse'
      - type: object
        properties:
          data:
            $ref: '#/definitions/Authentication'
  Authentication:
    type: object
    required:
      - accessToken
      - refreshToken
    properties:
      accessToken:
        description: Contains the security credentials for a login session and identifies the user.
        type: string
      refreshToken:
        description: A kind of token that can be used to obtain a renewed access token.
      expiresIn:
        description: TTL (time-to-live) in seconds for the access token.
        type: integer
      refreshExpiresIn:
        description: TTL (time-to-live) in seconds for the refresh token.
        type: integer
      tokenType:
        description: The access token type.
        type: string
        enum:
          - Bearer

  AuthenticationRefreshRequest:
    type: object
    required:
      - refreshToken
    properties:
      refreshToken:
        type: string
        description: The refresh token returned from a previous authentication request.

  AccountAPIProjectListSuccessResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - totalCount
            - items
          properties:
            totalCount:
              type: integer
              description: The number of projects that match your specified criteria
            items:
              type: array
              items:
                $ref: '#/definitions/AccountAPIListProjectItem'

  AccountAPIListProjectItem:
    type: object
    required:
      - projectId
      - projectName
      - accountUid
      - archived
      - projectTypeCode
      - sourceLocaleId
      - sourceLocaleDescription
    properties:
      projectId:
        type: string
        description: A unique identifier for the project
      projectName:
        type: string
        description: The name of the project. Names of projects are not guaranteed to be unique within an account.
      accountUid:
        type: string
        description: The unique identifier for the account
      archived:
        type: boolean
        description: Indicator whether or not the project has been archived. Archived projects are typically hidden from a user's view, but can still be accessible
      projectTypeCode:
        type: string
        description: Indicator for the type of the project.
      sourceLocaleId:
        type: string
        description: The locale identifier for the source locale of the project. This indicates the base locale for which content should be uploaded to the project.
      sourceLocaleDescription:
        type: string
        description: The full name of the sourceLocaleId
    example:
      projectId: "fd7244365"
      projectName: "fd7244365"
      accountUid: "ab5f1939"
      archived: false
      projectTypeCode: "APPLICATION_RESOURCES"
      sourceLocaleId: "en-US"
      sourceLocaleDescription: "English"

  ProjectCopySuccessResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - processUid
          properties:
            processUid:
              type: string
              description: A unique identifier for a long running process

  ProjectCopyProcessSuccessResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - processUid
            - newProjectUid
            - processState
            - createdDate
            - modifiedDate
            - processStatistics
          properties:
            processUid:
              type: string
              description: A unique identifier for a long running process
            newProjectUid:
              type: string
              description: A unique identifier for the newly created project. This is available once the project copying has finished, which is indicated once it has a processState of CLOSED.
            processState:
              type: string
              enum:
                - OPEN
                - CLOSED
                - FAILED
              description: The status of the copy request. The new projectId will be available once the state is marked as CLOSED.
            createdDate:
              type: string
              format: date-time
            modifiedDate:
              type: string
              format: date-time
            processStatistics:
              description: Information on the copying of the project
              type: object
              properties:
                requested:
                  description: The number of entities being copied
                  type: string
                processed:
                  description: The number of entities processed successfully
                  type: string
                errored:
                  description: The number of entities that failed to copy
                  type: string
                skipped:
                  description: The number of entities that were skipped
                  type: string

  ProjectDetailsSuccessResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - projectId
            - projectName
            - accountUid
            - archived
            - projectTypeCode
            - sourceLocaleId
            - sourceLocaleDescription
            - targetLocales
          properties:
            projectId:
              type: string
              description: A unique identifier for the project
            projectName:
              type: string
              description: The name of the project.
            accountUid:
              type: string
              description: The unique identifier for the account
            archived:
              type: boolean
              description: Indicator whether or not the project has been archived. Archived projects are typically hidden from a user's view, but can still be accessible
            projectTypeCode:
              type: string
              description: Indicator for the type of the project.
            sourceLocaleId:
              type: string
              description: The locale identifier for the source locale of the project. This indicates the base locale for which content should be uploaded to the project.
            sourceLocaleDescription:
              type: string
              description: The full name of the sourceLocaleId
            targetLocales:
              description: The locales configured for translation for this project.
              type: array
              items:
                $ref: '#/definitions/ProjectDetailsLocaleItem'
          example:
            projectId: "fd7244365"
            projectName: "fd7244365"
            accountUid: "ab5f1939"
            archived: false
            projectTypeCode: "APPLICATION_RESOURCES"
            sourceLocaleId: "en-US"
            sourceLocaleDescription: "English"
            targetLocales:

  ProjectDetailsLocaleItem:
    type: object
    required:
      - localeId
      - description
      - enabled
    properties:
      localeId:
        type: string
        description: The identifier for the specific locale configured for the project.
      description:
        type: string
        description: The name of the locale.
      enabled:
        type: boolean
        description: Boolean indicator of the locale is enabled for the project.
    example:
      localeId: "ru-RU"
      description: "Russian (Russia)"
      enabled: "true"

  FilesAPIUploadSuccessResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - overWritten
            - stringCount
            - wordCount
          properties:
            overWritten:
              type: boolean
              description: Indicates whether the uploaded file has overwritten an existing file
            stringCount:
              type: integer
              description: The number of strings in the uploaded file
            wordCount:
              type: integer
              description: The number of words in the uploaded file
              
  FilesAPIUploadAcceptedResponse:
    type: object
    required:
      - code
      - data
    properties:
      code:
        type: string
        enum:
          - ACCEPTED
      data:
        type: object
        required: 
          - message
        properties:
          message:
            type: string

  FilesAPIListFilesSuccessResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - totalCount
            - items
          properties:
            totalCount:
              type: integer
              description: The number of files that match your specified criteria
            items:
              type: array
              items:
                $ref: '#/definitions/FilesAPIListFileItem'

  FilesAPIListFileItem:
    type: object
    required:
      - fileUri
      - created
      - lastUploaded
      - fileType
      - hasInstructions
    properties:
      fileUri:
        type: string
        description: A unique identifier for the uploaded file
      created:
        type: string
        format: YYYY-MM-DDThh:mm:ssZ
        description: The time and date of the first upload
      lastUploaded:
        type: string
        format: YYYY-MM-DDThh:mm:ssZ
        description: The time and date of the last upload
      fileType:
        type: string
        description: The type of file
        enum: *fileTypes
      hasInstructions:
        type: boolean
        description: Whether translator instructions have been captured for the file.
    example:
      fileUri: "file.json"
      created: "2016-12-31T00:00:00Z"
      lastUploaded: "2016-01-01T00:00:00Z"
      fileType: "json"
      hasInstructions: false

  FileTypes:
    type: string
    enum: *fileTypes
    description: |
      Existing values: android ios gettext html javaProperties yaml xliff xml json docx pptx xlsx idml qt resx plaintext cvs stringsdict


  FilesAPIListFileTypesSuccessResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - items
          properties:
            items:
              type: array
              items:
                $ref: '#/definitions/FileTypes'
    example:
      application/json:
        response:
          code: SUCCESS
          data:
            items:
              - android
              - ios
              - gettext
  FilesAPIStatusAllLocalesSuccessResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - fileUri
            - totalStringCount
            - totalWordCount
            - fileType
            - lastUploaded
            - totalCount
            - parserVersion
            - hasInstructions
            - items
          properties:
            fileUri:
              type: string
              description: A unique identifier for the uploaded file
            totalCount:
              type: integer
              description: Total number of locales status is returned for
            totalStringCount:
              type: integer
              description: The number of strings in the uploaded file, minus any excluded content
            totalWordCount:
              type: integer
              description: The number of words in the uploaded file, minus any excluded content
            fileType:
              type: string
              description: The type of file
              enum: *fileTypes
            created:
              type: string
              format: YYYY-MM-DDThh:mm:ssZ
              description: The time and date of the first upload
            lastUploaded:
              type: string
              format: YYYY-MM-DDThh:mm:ssZ
              description: The time and date of the last upload
            parserVersion:
              type: integer
              description: Records the version of Smartling's File Parser used to parse the file
            hasInstructions:
              type: boolean
              description: Whether translator instructions have been captured for the file
            items:
              type: array
              items:
                $ref: '#/definitions/FilesAPIStatusAllLocalesItem'

  FilesAPIStatusAllLocalesItem:
    type: object
    required:
      - localeId
      - authorizedStringCount
      - authorizedWordCount
      - completedStringCount
      - completedWordCount
      - excludedStringCount
      - excludedWordCount
    properties:
      localeId:
        type: string
      authorizedStringCount:
        type: integer
        description: The number of strings in the uploaded file that are authorized (available for translation)
      authorizedWordCount:
        type: integer
        description: The number of words in the uploaded file that are authorized (available for translation)
      completedStringCount:
        type: integer
        description: The number of published strings in the uploaded file
      completedWordCount:
        type: integer
        description: The number of published words in the uploaded file
      excludedStringCount:
        type: integer
        description: The number of excluded strings in the uploaded file
      excludedWordCount:
        type: integer
        description: The number of excluded words in the uploaded file

  FilesAPIStatusSingleLocaleSuccessResponse:
      allOf:
      - $ref: '#/definitions/SuccessResponse'
      - type: object
        properties:
          data:
            type: object
            required:
              - fileUri
              - totalStringCount
              - totalWordCount
              - authorizedStringCount
              - authorizedWordCount
              - completedStringCount
              - completedWordCount
              - excludedStringCount
              - excludedWordCount
              - fileType
              - lastUploaded
              - created
              - parserVersion
              - hasInstructions
            properties:
              authorizedStringCount:
                type: integer
                description: The number of strings in the uploaded file that are authorized (available for translation)
              authorizedWordCount:
                type: integer
                description: The number of words in the uploaded file that are authorized (available for translation)
              completedStringCount:
                type: integer
                description: The number of published strings in the uploaded file
              completedWordCount:
                type: integer
                description: The number of published words in the uploaded file
              excludedStringCount:
                type: integer
                description: The number of excluded strings in the uploaded file
              excludedWordCount:
                type: integer
                description: The number of excluded words in the uploaded file
              fileUri:
                type: string
                description: A unique identifier for the uploaded file
              totalStringCount:
                type: integer
                description: The number of strings in the uploaded file, minus any excluded content
              totalWordCount:
                type: integer
                description: The number of words in the uploaded file, minus any excluded content
              fileType:
                type: string
                description: The type of file
                enum: *fileTypes
              created:
                type: string
                format: YYYY-MM-DDThh:mm:ssZ
                description: The time and date of the first upload
              lastUploaded:
                type: string
                format: YYYY-MM-DDThh:mm:ssZ
                description: The time and date of the last upload
              parserVersion:
                type: integer
                description: Records the version of Smartling's File Parser used to parse the file
              hasInstructions:
                type: integer
                description: Whether translator instructions have been captured for the file

  FilesAPILastModifiedSingleLocaleSuccessResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          $ref: '#/definitions/FilesAPILastModifiedResponseItem'

  FilesAPILastModifiedResponseItem:
      type: object
      required:
        - localeId
        - lastModified
      properties:
        localeId:
          type: string
          description: A unique identifier for the uploaded file
        lastModified:
          type: string
          format: YYYY-MM-DDThh:mm:ssZ
          description: The date the file was last modified for the specified locale

  FilesAPILastModifiedAllLocalesSuccessResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - totalCount
            - items
          properties:
            totalCount:
              type: integer
              description: |
            items:
              type: array
              items:
                $ref: '#/definitions/FilesAPILastModifiedResponseItem'


  FilesAPITranslationImportSuccessResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - wordCount
            - stringCount
            - translationImportErrors
          properties:
            wordCount:
              type: integer
              description: Words imported.
            stringCount:
              type: integer
              description: Strings imported
            translationImportErrors:
              type: array
              items:
                $ref: '#/definitions/FilesApiTranslationImportErrorItem'

  FilesApiTranslationImportErrorItem:
    type: object
    required:
      - importKey
      - stringHashcode
      - fileUri
      - messages
    properties:
      importKey:
        type: string
        description: Key for an imported string affected by the error
      stringHashcode:
        type: string
        description: The hashcode of a string affected by the error
      fileUri:
        type: string
        description: A unique identifier for the uploaded file
      messages:
        type: array
        items:
          type: string
        description: Information about an import error

#
# Context Definitions
#
  ContextListResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
           - items
          properties:
            offset:
              description: Result set is partial, if not empty. To retreive everything, request should be repeated with offset value.
              type: string
            items:
              type: array
              items:
                $ref: '#/definitions/Context'

  ContextResponse:
    type: object
    properties:
      response:
        type: object
        properties:
          code:
            description: Code of the completed operation.
            type: string
            enum:
              - SUCCESS
          data:
            description: Basic information about the context.
            type: object
            properties:
              contextUid:
                description: Unique identifier for the context.
                type: string
              contextType:
                description: Type of context file.
                type: string
                enum:
                  - IMAGE
                  - HTML
                  - VIDEO
              name:
                description: File name for IMAGE context, URL for HTML Context and video URL for VIDEO context.
                type: string
              created:
                description: |-
                  A date when the context was created. Format: ISO8601 date and time string
                type: string
                format: date-time

  AsyncMatchResponse:
    type: object
    properties:
      response:
        type: object
        properties:
          code:
            description: Code of the completed operation.
            type: string
            enum:
              - SUCCESS
          data:
            type: object
            properties:
              matchId:
                description: Identifier of the started match operation. Should be specified for getting matching stats.
                type: string
                format: uuid

  AsyncMatchStatsResponse:
    type: object
    properties:
      response:
        type: object
        properties:
          code:
            description: Code of the completed operation.
            type: string
            enum:
            - SUCCESS
          data:
            type: object
            properties:
              matchId:
                description: Identifier of the started match operation. Should be specified for getting matching stats.
                type: string
                format: uuid
              status:
                type: string
                enum:
                  - IN_PROGRESS
                  - COMPLETED
                  - FAILED
              createdDate:
                type: string
                format: date-time
              modifiedDate:
                type: string
                format: date-time
              bindings:
                type: array
                items:
                  $ref: '#/definitions/Binding'

  CreateBindingsResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - created
          properties:
            created:
              type: object
              required:
                - items
              properties:
                totalCount:
                  type: integer
                items:
                  type: array
                  items:
                    $ref: '#/definitions/Binding'
            errors:
              type: object
              required:
                - items
              properties:
                totalCount:
                  type: integer
                items:
                  type: array
                  items:
                    type: object
                    required:
                      - message
                    properties:
                      message:
                        type: string

  BindingsResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          required:
            - items
          properties:
            totalCount:
              type: integer
            items:
              type: array
              items:
                $ref: '#/definitions/Binding'

  Context:
    description: Basic information about the context.
    type: object
    required:
      - name
    properties:
      contextUid:
        description: Unique identifier for the context file
        type: string
      contextType:
        type: string
        description: Type of context file. Currently, **HTML**, **IMAGE** or **VIDEO** types are supported.
        enum:
          - IMAGE
          - HTML
          - VIDEO
      name:
        description: File name for **IMAGE** context, URL for **HTML** Context and video URL for **VIDEO** context.
        type: string

  Coordinates:
    description: Describes the location and size of a box enclosing the string in a context image. ‘top’ and ‘left’ are the distance in pixels of the top left corner of the string from the top and left of the image. ‘width’ and ‘height’ are the dimensions of the string in pixels. This information is used to highlight the position of the string when displaying the context image in the Translation Interface. If coordinates are not provided, Smartling will attempt to locate the string on the image using Optical Character Recognition. If OCR fails, coordinates will default to 0, 0, 0, 0, meaning the image will be displayed when the string is translated, without any highlighting to show the position of the string.
    type: object
    required:
      - top
      - left
      - height
      - width
    properties:
      top:
        type: number
      left:
        type: number
      height:
        type: number
      width:
        type: number

  Timecode:
    description: Number of seconds for the period of string appearance in a video relative to the video start time.
    type: object
    properties:
      startTime:
        type: integer
        format: int64
      endTime:
        type: integer
        format: int64

  Binding:
    description: String to context binding
    type: object
    required:
      - contextUid
      - stringHashcode
    properties:
      bindingUid:
        type: string
        description: Unique identifier for the context binding.
      contextUid:
        type: string
        description: Unique identifier for the context.
      stringHashcode:
        type: string
        description: Unique identifier for the translatable.
      coordinates:
        $ref: '#/definitions/Coordinates'
      timecode:
        $ref: '#/definitions/Timecode'
      anchors:
        description: Wrapper HTML element anchor numbers
        type: array
        items:
          type: string

  BindingsRequest:
    type: object
    properties:
      bindings:
        description: Array of string-to-context bindings
        type: array
        items:
          description: Binding request
          type: object
          required:
            - contextUid
            - stringHashcode
          properties:
            contextUid:
              description: Unique identifier for the context.
              type: string
              format: uuid
            stringHashcode:
              description: Unique identifier for the translatable.
              type: string
              format: hash
            coordinates:
              $ref: '#/definitions/Coordinates'
            timecode:
              $ref: '#/definitions/Timecode'
            selector:
              description: Values of "data-sl-anchor" attributes of HTML elements
              type: object
              properties:
                anchors:
                  type: array
                  items:
                    type: string

  MatchRequest:
    type: object
    properties:
      overrideContextOlderThanDays:
        type: integer
        minimum: 1
        description: |-
          Specifies whether to override context for strings that were already bound to other context and that context is at least as "overrideContextOlderThanDays" old.
      stringHashcodes:
        type: array
        description: |-
            String hashcodes
        items:
          type: string
          format: hash
          

  WatcherRequest:
    type: object
    required:
      - email
      - name
    properties:
      email:
        type: string
        description: watcher email
        example: my@maul.com
      name:
        type: string
        description: watcher name
        example: Alonso
      enabled:
        type: boolean
        description: should send email notification to this email
        example: true

  IssueRequest:
    type: object
    required:
      - issueText
      - issueTypeCode
      - issueSubTypeCode
      - string
    properties:
      issueText:
        type: string
        description: Free text field explaining an issue.
        example: This translation is incorrect. Please fix.
      issueTypeCode:
        type: string
        enum:
          - SOURCE
          - TRANSLATION
        description: >-
          Identifies the issue type. issueTypeCode is either `SOURCE` or
          `TRANSLATION`. Each have their own set of issueSubType values
      issueSubTypeCode:
        type: string
        enum:
          - CLARIFICATION
          - MISSPELLING
          - POOR_TRANSLATION
          - DOES_NOT_FIT_SPACE
          - PLACEHOLDER_ISSUE
          - GENERAL_ISSUE
          - REVIEW_TRANSLATION
        description: >-
          For issueTypeCode=SOURCE - CLARIFICATION | MISSPELLING, For
          issueTypeCode=TRANSLATION - POOR_TRANSLATION | DOES_NOT_FIT_SPACE |
          PLACEHOLDER_ISSUE | GENERAL_ISSUE | REVIEW_TRANSLATION
      string:
        type: object
        required:
          - hashcode
          - localeId
        properties:
          hashcode:
            type: string
            description: >-
              Unique identifier for a string in Smartling. Used by the Issues
              API to attach an issue to a string. You can get the hashcode for a
              string via String API.
            example: c32c16cddafd63dfa0dc12449372a093
          localeId:
            type: string
            description: An identifying code for a language in Smartling.
            example: ru-RU
  IssueTextRequest:
    type: object
    required:
      - issueText
    properties:
      issueText:
        type: string
        description: Free text field explaining an issue.
        example: Edited issue text.
  IssueStateRequest:
    type: object
    required:
      - issueStateCode
    properties:
      issueStateCode:
        type: string
        enum:
          - OPENED
          - RESOLVED
        description: The state of the issue. Accepted values are `OPENED` or `RESOLVED`.
  CommentRequest:
    type: object
    required:
      - commentText
    properties:
      commentText:
        type: string
        description: Text of the comment you want to make.
        example: 'Hey, are you sure this is what you want?'
  FindRequest:
    type: object
    properties:
      createdDateBefore:
        type: string
        example: '2015-12-23T18:14:09Z'
      createdDateAfter:
        type: string
        example: '2015-11-10T15:14:09Z'
      resolvedDateBefore:
        type: string
        example: '2015-12-23T18:14:09Z'
      resolvedDateAfter:
        type: string
        example: '2015-11-10T15:14:09Z'
      stringFilter:
        type: object
        properties:
          hashcodes:
            type: array
            items:
              type: string
            example:
              - afe47cdaffe0c0226506919c291d9c1a
              - afe37cdaffe0c0226508919c291d9c1a
              - afe47cdaffe0c02265406919c291d2c1a
          localeIds:
            type: array
            items:
              type: string
            example:
              - ru-RU
      sortBy:
        type: object
        properties:
          items:
            type: array
            items:
              type: object
              properties:
                direction:
                  type: string
                  enum:
                    - ASC
                    - DESC
                fieldName:
                  type: string
                  enum:
                    - issueTypeCode
                    - issueSubTypeCode
                    - issueStateCode
                    - createdDate
                    - resolvedDate
                    - hashcode
                    - issueText
                    - issueTextModifiedDate
                    - resolvedByUserUid
                    - reportedByUserUid
        example: [{"direction": "ASC", "fieldName": "createdDate"}, {"direction": "DESC", "fieldName":"resolvedDate"}]
      limit:
        type: integer
        default: 30
        example: 30
        minimum: 0
      offset:
        type: integer
        default: 0
        example: 0
        minimum: 0
      reportedByUserUid:
        type: string
        example: 661801f19693
      issueStateCodes:
        type: array
        items:
          type: string
          enum:
            - OPENED
            - RESOLVED
      issueTypeCodes:
        type: array
        items:
          type: string
          enum:
            - SOURCE
            - TRANSLATION
      issueSubTypeCodes:
        type: array
        items:
          type: string
          enum:
            - CLARIFICATION
            - MISSPELLING
            - POOR_TRANSLATION
            - DOES_NOT_FIT_SPACE
            - PLACEHOLDER_ISSUE
            - GENERAL_ISSUE
            - REVIEW_TRANSLATION
  CountRequest:
    type: object
    properties:
      createdDateBefore:
        type: string
        example: '2015-12-23T18:14:09Z'
      createdDateAfter:
        type: string
        example: '2015-11-10T15:14:09Z'
      resolvedDateBefore:
        type: string
        example: '2015-12-23T18:14:09Z'
      resolvedDateAfter:
        type: string
        example: '2015-11-10T15:14:09Z'
      stringFilter:
        type: object
        properties:
          hashcodes:
            type: array
            items:
              type: string
            example:
              - afe47cdaffe0c0226506919c291d9c1a
              - afe37cdaffe0c0226508919c291d9c1a
              - afe47cdaffe0c02265406919c291d2c1a
          localeIds:
            type: array
            items:
              type: string
            example:
              - ru-RU
      reportedByUserUid:
        type: string
        example: 661801f19693
      issueStateCodes:
        type: array
        items:
          type: string
          enum:
            - OPENED
            - RESOLVED
      issueTypeCodes:
        type: array
        items:
          type: string
          enum:
            - SOURCE
            - TRANSLATION
      issueSubTypeCodes:
        type: array
        items:
          type: string
          enum:
            - CLARIFICATION
            - MISSPELLING
            - POOR_TRANSLATION
            - DOES_NOT_FIT_SPACE
            - PLACEHOLDER_ISSUE
            - GENERAL_ISSUE
            - REVIEW_TRANSLATION

#
# Strings API definitions
#
  CreateStringResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          properties:
            totalCount:
              type: number
            items:
              type: array
              items:
                $ref: '#/definitions/CreatedString'
            wordCount:
              description: Total number of words captured as a result of the request.
              type: number
            stringCount:
              description: Total number of strings captured as a result of the request.
              type: number
            processUid:
              description: If the request takes longer than 60 seconds to process, a `202` response will be returned, indicating the request has not failed, but is not yet complete. Use the processUid value to check the status of the request using the Check Create String Status request.
              type: string

  CreatedString:
    description: Information on the created or updated string
    type: object
    properties:
      variant:
        description: String variant
        type: string
      stringText:
        type: string
        description: The text for this string
      parsedStringText:
        type: string
        description: The text for this string used to define its uniqueness in the Smartling system.  This is after placeholders have been processed and escaping normalization has been applied.
      hashcode:
        description: The generated unique idenitfier for this created or updated string.
        type: string
      overWritten:
        description: Idenitfies if the string was already in the system.
        type: string

  StringResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          properties:
            totalCount:
              type: number
            items:
              type: array
              items:
                $ref: '#/definitions/String'

  String:
    description: Information on string
    type: object
    properties:
      variant:
        description: String variant
        type: string
      stringText:
        type: string
        description: The text for this string
      parsedStringText:
        type: string
        description: The text for this string used to define its uniqueness in the Smartling system.  This is after placeholders have been processed and escaping normalization has been applied.
      hashcode:
        description: The generated unique idenitfier for this created or updated string.
        type: string
      keys:
        description: If this string is associated with one or more resource files this is a list of the associated resource keys.
        type: array
        items:
          type: object
          properties:
            key:
              description: fileUri of the key
              type: string
            fileUri:
              description: resource key
              type: string

  CreateStringStatusResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          properties:
            processUid:
              description: Unique identifer for a create string request.
              type: string
            processState:
              description: State of the request
              type: string
              enum:
                - OPEN
                - CLOSED
                - FAILED
            createdDate:
              description: Total number of strings captured as a result of the request.
              type: string
            modifiedDate:
              description: If the request takes longer than 60 seconds to process, a `202` response will be returned, indicating the request has not failed, but is not yet complete. Use the processUid value to check the status of the request using the Check Create String Status request.
              type: string
            processStatistics:
              description: Information on the created or updated string
              type: object
              properties:
                requested:
                  description: strings requested
                  type: string
                processed:
                  description: strings processed
                  type: string
                errored:
                  description: strings that had errors
                  type: string
                skipped:
                  description: strings skipped
                  type: string

  TranslationResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          properties:
            totalCount:
              type: number
            items:
              type: array
              items:
                $ref: '#/definitions/Translation'

  Translation:
    description: Information on a translation
    type: object
    properties:
      variant:
        description: String variant
        type: string
      stringText:
        type: string
        description: The text for this string
      parsedStringText:
        type: string
        description: The text for this string used to define its uniqueness in the Smartling system.  This is after placeholders have been processed and escaping normalization has been applied.
      hashcode:
        description: The generated unique idenitfier for this created or updated string.
        type: string
      keys:
        description: If this string is associated with one or more resource files this is a list of the associated resource keys.
        type: array
        items:
          type: object
          properties:
            key:
              description: fileUri of the key
              type: string
            fileUri:
              description: resource key
              type: string
      targetlocaleId:
        description: Locale ID of this translation
        type: string
      workflowStepUid:
        description: Current workflow step for this translation
        type: string
        format: uuid
      translations:
        type: array
        items:
          type: object
          properties:
            translation:
              description: Translation text
              type: string
            pluralForm:
              description: Pural form of the translation.  `null` if this translation is not a plural.
              type: string
            modifiedDate:
              description: When this translation was last modified.
              type: string

#
# Glossary API definitions:
#

  Glossary:
    required:
      - glossaryUid
      - name
      - sourceLocaleId
    properties:
      glossaryUid:
        description: Unique identifier for the glossary
        type: string
        example: 50d9dab5-6b8b-11e5-ba24-127b00b163a3
      name:
        description: Glossary name
        type: string
        example: Another document tester-Glossary
      description:
        description: Description of a Glossary
        type: string
        example: Description of a Glossary
      sourceLocaleId:
        description: Glossary source locale
        type: string
        example: en-US
      createdByUserUid:
        description: Unique identifier for the glossary creator
        type: string
        example: ah27fhq8
      createdDate:
        description: Glossary created date
        type: string
        format: date-time
        example: '2015-11-21T01:51:17Z'

  TermData:
    required:
      - termText
    properties:
      termText:
        description: Glossary term text
        type: string
        example: cold calls
      partOfSpeechCode:
        description: Glossary term part of speech
        type: string
        example: UNSPECIFIED
      definition:
        description: Glossary term definition
        type: string
      notes:
        description: Notes
        type: string
      caseSensitive:
        description: Is matching of this glossarry term should be case sensitive
        type: boolean
      exactMatch:
        description: Should be matched exactly
        type: boolean
      variations:
        description: Glossary term variations
        type: string
      synonyms:
        description: Glossary term synonyms
        type: string
      antonyms:
        description: Glossary term antonyms
        type: string
      seo:
        description: It is an indicator to users whether the term is for search engine optimziation
        type: boolean
      doNotTranslate:
        description: It is an indicator to users that term is not translatable
        type: boolean
  SourceTerm:
    allOf:
    - $ref: '#/definitions/TermData'
    - type: object
      properties:
        termUid:
          description: Unique identifier of specific glossary term
          type: string
          example: e390a4d6-aef2-11e5-b159-0ad0c2f6b537
        createdDate:
          description: Created date
          type: string
          format: 'date-time'
        modifiedDate:
          description: Modified date
          type: string
          format: 'date-time'

  TranslatedTerm:
    allOf:
    - $ref: '#/definitions/SourceTerm'
    - type: object
      properties:
        translation:
          $ref: '#/definitions/TermTranslation'

  TermWithGlossaryUid:
    allOf:
      - $ref: '#/definitions/TranslatedTerm'
      - type: object
        properties:
          glossaryUid:
            description: Unique identifier for the glossary
            type: string
          createdByUserUid:
            description: Unique identifier of creator user
            type: string
  TermTranslationData:
    required:
      - localeId
      - translatedTerm
    properties:
      localeId:
        description: A valid Smartling Locale ID
        type: string
        example: fr-CA
      translatedTerm:
        description: Translated term
        type: string
        example: cold calls in french ca
      notes:
        description: Notes
        type: string
      lockTranslation:
        description: It is an indicator that shows if translation is editable
        type: boolean
  TermTranslation:
    allOf:
      - $ref: '#/definitions/TermTranslationData'
      - type: object
        properties:
          translatorUserUid:
            description: Unique identifier of translator user
            type: string
          createdDate:
            description: Created date
            type: string
            format: 'date-time'
          modifiedDate:
            description: Modified date
            type: string
            format: 'date-time'

  AuthorizeTerms:
    required:
      - termUids
      - authorization
    type: object
    properties:
      termUids:
        description: Unique identifiers of glossary terms
        type: array
        items:
          type: string
          example: 65c62a7c-6b8b-11e5-ba24-127b00b163a3
      authorization:
        required:
          - localeWorkflows
        type: object
        properties:
          localeWorkflows:
            description: Locale workflows
            type: array
            items:
              $ref: '#/definitions/LocaleWorkflow'
  LocaleWorkflow:
    required:
      - targetLocaleId
      - workflowUid
    properties:
      targetLocaleId:
        description: A valid Smartling Locale ID
        type: string
        example: cy-GB
      workflowUid:
        description: Unique identifier for workflow
        type: string
        example: 9422471c2202
  GlossaryImportJob:
    properties:
      glossaryImportJobUid:
        description: Unique identifier that corresponds to a single glossary import session
        type: string
      glossary:
        $ref: '#/definitions/Glossary'
      fileName:
        description: File name
        type: string
      accountUid:
        description: Unique identifier for corresponding account
        type: string
      glossaryImportJobStatus:
        description: Status of glossary import jobs
        type: string
        enum: [PENDING, IN_PROGRESS, SUCCESSFUL, FAILED]
      termsNumber:
        description: Number of terms in the import file
        type: integer
        format: int32
      termsProcessed:
        description: Number of processed terms
        type: integer
        format: int32
      localesNumber:
        description: Number of locales
        type: integer
        format: int32
      createdByUserUid:
        description: Unique identifier of creator user
        type: string
      createdDate:
        description: Created date
        type: string
      modifiedDate:
        description: Modified date
        type: string

  CreateGlossary:
    required:
      - name
      - description
      - sourceLocaleId
    type: object
    properties:
      name:
        type: string
        example: Some test glossary
      description:
        type: string
        example: some desc
      sourceLocaleId:
        type: string
        description: 'A valid Smartling Locale ID'
        example: en-US
  UpdateGlossary:
    allOf:
    - $ref: '#/definitions/CreateGlossary'

  CreateTerm:
    type: object
    allOf:
    - $ref: '#/definitions/TermData'
  UpdateTerm:
    type: object
    allOf:
    - $ref: '#/definitions/TermData'

  PartsOfSpeech:
    required:
      - partOfSpeechCode
    properties:
      partOfSpeechCode:
        description: Part of speech
        type: string
        example: ADJECTIVE
      description:
        description: Description
        type: string
        example: Adjective

  GlossaryResponse:
    required:
      - response
    properties:
      response:
        allOf:
        - $ref: '#/definitions/SuccessResponse'
        - required:
            - data
          properties:
            data:
              $ref: '#/definitions/Glossary'
  GlossaryListResponse:
    required:
      - response
    properties:
      response:
        allOf:
        - $ref: '#/definitions/SuccessResponse'
        - required:
            - data
          properties:
            data:
              properties:
                totalCount:
                  description: Amount of returned glossaries
                  type: number
                items:
                  description: Glossaries
                  type: array
                  items:
                    $ref: '#/definitions/Glossary'

  SourceTermListResponse:
    required:
      - response
    properties:
      response:
        allOf:
        - $ref: '#/definitions/SuccessResponse'
        - required:
            - data
          properties:
            data:
              properties:
                totalCount:
                  description: Total count
                  type: number
                items:
                  description: Source terms
                  type: array
                  items:
                    $ref: '#/definitions/SourceTerm'
  TranslatedTermResponse:
    required:
      - response
    properties:
      response:
        allOf:
        - $ref: '#/definitions/SuccessResponse'
        - required:
            - data
          properties:
            data:
              $ref: '#/definitions/TranslatedTerm'
  TermWithGlossaryUidListResponse:
    required:
      - response
    properties:
      response:
        allOf:
        - $ref: '#/definitions/SuccessResponse'
        - required:
            - data
          properties:
            data:
              properties:
                totalCount:
                  description: Total count
                  type: number
                items:
                  type: array
                  description: Terms with glossary uids
                  items:
                    $ref: '#/definitions/TermWithGlossaryUid'
  PartsOfSpeechList:
    required:
      - response
    properties:
      response:
        allOf:
        - $ref: '#/definitions/SuccessResponse'
        - required:
            - data
          properties:
            data:
              properties:
                totalCount:
                  description: Total count
                  type: number
                items:
                  description: Parts of speech
                  type: array
                  items:
                    $ref: '#/definitions/PartsOfSpeech'

  AsyncAcceptedResponse:
    type: object
    properties:
      code:
        type: string
        enum:
          - ACCEPTED
  CancelJobRequest:
    description: The payload to use when cancelling a job.
    type: object
    properties:
      reason:
        type: string
        description: Optional field that can be used to indicate the reason the job was cancelled.
  RemoveFileJobRequest:
    description: The payload to use when removing a file from a job.
    type: object
    properties:
      fileUri:
        type: string
        description: The uri of the file that is to be removed from the job.
  SearchJobRequest:
    description: The payload to use for searching for jobs. At least one of hashcodes, fileUris, and translationJobUids must be specified. The individual param results are AND'd together.
    type: object
    properties:
      hashcodes:
        type: array
        items:
          type: string
        description: (Optional) The hashcodes (string identifiers) to use to search for jobs. Any job containing specified hashcodes will be returned.
      fileUris:
        type: array
        items:
          type: string
        description: (Optional) The `fileUri`s (file identifiers) used to search for jobs. Any job containing the specified `fileUri` will be returned.
      translationJobUids:
        type: array
        items:
          type: string
        description: (Optional) The `translationJobUid`s (translation job identifiers) used to search for jobs. Any job containing the specified `fileUri` will be returned.
  RemoveStringsJobRequest:
    description: The payload to use when removing strings from a job.
    type: object
    properties:
      hashcodes:
        type: array
        items:
          type: string
          example: ["ca51a04da69cf64dce022bb4f146c962"]
        description: The hashcodes (string identifiers) that should be removed from the job.
      localeIds:
        type: array
        items:
          type: string
          example: ["ru-RU"]
        description: (Optional) The array of localeId's that the strings should be removed from. If not specified, the strings will be removed from all locales within that job.
  AddStringsJobRequest:
    description: The payload to use when adding strings to a job.
    type: object
    properties:
      moveEnabled:
        type: boolean
        default: false
        description: (Optional), default is false. A string for a locale can only be in one job. If the string identified in the request is already in a job for a locale then it won't be added. However, `moveEnalbed=true` can be specified, and in this case, the string will be moved into the specified job.
      hashcodes:
        type: array
        items:
          type: string
        description: The array of hashcodes to use to add to the job. The hashcodes must exist within Smartling for the project in order to be added to a job. Hashcodes are required when adding strings to a job. Hashcodes are limited to 1000 per API call.
        maxItems: 1000
      targetLocaleIds:
        type: array
        items:
          type: string
        description: The array of `localeId`s that strings should be added to. If it's not specified, the strings will be added to all locales within that job. If it's specified, the strings will only be added for the locales provided. If the locales were not already part of the job, the job will be extended to contain the additional locales.
  AddFileJobRequest:
    description: The payload to use when adding a file to a job.
    type: object
    properties:
      fileUri:
        type: string
        description: The uri of the file that has been uploaded to Smartling. fileUri is required.
      targetLocaleIds:
        type: array
        items:
          type: string
        description: The array of localeId's that the file should be added to. If not specified, the file will be added to all locales. If specified, the file will only be added for the locales provided. If the locale\'s were not already part of the job, then the job will be extended to contain the additional locales.
  CreateJobRequest:
    description: The payload to use when creating a job.
    type: object
    properties:
      jobName:
        type: string
        example: This is my job name.
        description: The name of the job to create. It must be unique within the Smartling project. `jobName` is **required**.
        maxLength: 170
      targetLocaleIds:
        type: array
        items:
          type: string
        description: The array of `localeId`'s to be used when creating the job. The locale\'s specified must be valid within the Smartling project.
        example: ["ru-RU"]
      description:
        type: string
        example: This is my job description.
        description: The description of the job. The description is limited to 2,000 characters.
      dueDate:
        type: string
        format: date-time
        example: "2020-11-21T01:51:17Z"
        description: The date the job is requested to be completed by.
      referenceNumber:
        type: string
        example: "referenceNumb1"
        description: Customer specific number/identifier for the job.
      callbackUrl:
        type: string
        example: "https://myDomain.com"
        description: The URL for Smartling to invoke when the job is completed.
      callbackMethod:
        type: string
        example: "GET"
        description: The HTTP method to call (GET|POST) when invoking the `callbackUrl`.
  AuthorizeJobRequest:
    type: object
    properties:
      localeWorkflows:
        type: array
        items:
          $ref: '#/definitions/AuthorizeJobItemRequest'
  AuthorizeJobItemRequest:
    description: Indicates which workflow to authorize for a given locale.
    type: object
    properties:
      targetLocaleId:
        type: string
        description: The locale identifier to use when indicating the locale to authorize content for. If `targetLocaleId` is specified, then `workflowUid` is required as well. Both can be ommitted, and the default workflow for that locale will be used.
      workflowUid:
        type: string
        description: The UID of the workflow to authorize content into.
  UpdateJobRequest:
    description: The payload to use when updating a job.
    type: object
    properties:
      jobName:
        type: string
        description: The name of the job. It must be unique within the Smartling project.
        maxLength: 170
      description:
        type: string
        description: The description of the job.
      dueDate:
        type: string
        format: date-time
        example: '2020-11-21T01:51:17Z'
        description: The date by which the job is requested to be completed.
      referenceNumber:
        type: string
        description: Customer specific number/identifier for the job.
        example: 'CustomerReferenceNum1'
      callbackUrl:
        type: string
        description: "The URL for Smartling to invoke once the job is completed."
        example: "https://myDomain.com"
      callbackMethod:
        type: string
        example: "GET"
        description: "The HTTP method to call (GET|POST) when invoking the `callbackUrl`."
  ProgressResponse:
    required:
      - response
    properties:
      response:
        allOf:
        - $ref: '#/definitions/SuccessResponse'
        - required:
            - data
          properties:
            data:
              properties:
                contentProgressReport:
                  type: array
                  items:
                    $ref: '#/definitions/ContentProgressReportItemResponse'
                progress:
                  $ref: '#/definitions/ProgressInfoReposnse'
  ContentProgressReportItemResponse:
    type: object
    properties:
      targetLocaleId:
        type: string
      targetLocaleDescription:
        type: string
      unuathorizedProgressReport:
        $ref: '#/definitions/StringCountWordCountResponse'
      workflowProgressReportList:
        type: array
        items:
          $ref: '#/definitions/WorkflowProgressReportItemResponse'
  WorkflowProgressReportItemResponse:
    type: object
    properties:
      workflowUid:
        type: string
        description: The uid of the workflow.
      workflowName:
        type: string
        description: The name of the workflow.
      workflowStepSummaryReportItemList:
        type: array
        items:
          $ref: '#/definitions/WorkflowStepSummaryReportItemResponse'
  WorkflowStepSummaryReportItemResponse:
    type: object
    properties:
      workflowStepUid:
        type: string
        description: The uid of the workflow step.
      workflowStepName:
        type: string
        description: The name of the workflow step.
      workflowStepType:
        type: string
        description: The type of the step.
      stringCount:
        type: number
        description: The total number of strings within that particular step.
      wordCount:
        type: number
        description: The total number of words within that particular step.
  StringCountWordCountResponse:
    type: object
    properties:
      stringCount:
        type: number
        description: The total number of strings within that particular step.
      wordCount:
        type: number
        description: The total number of words within that particular step.
  ListJobsResponse:
    required:
      - response
    properties:
      response:
        allOf:
        - $ref: '#/definitions/SuccessResponse'
        - required:
            - data
          properties:
            data:
              properties:
                totalCount:
                  type: number
                items:
                  type: array
                  items:
                    $ref: '#/definitions/ListJobsResponseItem'
  ListJobsResponseItem:
    properties:
      data:
        type: object
        properties:
          translationJobUid:
            description: The unique identifier of the job.
            type: string
          jobName:
            description: The name of the job.
            type: string
          targetLocaleIds:
            description: The array of localeIds for the job.
            type: array
            items:
              type: string
              example: de-DE
          description:
            description: The description of the job.
            type: string
          dueDate:
            description: The UTC value of the due date for the job.
            type: string
            format: date-time
            example: 2015-11-21T01:51:17Z
          createdDate:
            description: The UTC value of the date the job was created.
            type: string
            format: date-time
            example: 2015-11-21T01:51:17Z
          jobStatus:
            description: The status of the job
            type: string
            example: DRAFT | AWAITING_AUTHORIZATION | IN_PROGRESS | COMPLETED | CANCELLED | CLOSED
  SuccessFailCountJobResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          properties:
            successCount:
              description: The number of strings per locale added to the job.
              type: string
            failCount:
              description: The number of strings per locale that could not be added to the job.
              type: string
  DetailedJobResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          properties:
            translationJobUid:
              description: The unique identifier created for the job.
              type: string
            jobName:
              description: The name of the job.
              type: string
            targetLocaleIds:
              description: The array of localeIds for the job.
              type: array
              items:
                type: string
                example: de-DE
            description:
              description: The description of the job.
              type: string
            dueDate:
              description: The UTC value of the due date for the job.
              type: string
              format: date-time
              example: 2015-11-21T01:51:17Z
            callbackUrl:
              description: The callback URL to invoke when a job is completed.
              type: string
            callbackMethod:
              description: The http method (GET|POST) to use when Smartling invokes the callback URL upon job completion.
            createdDate:
              description: The UTC value of the date the job was created.
              type: string
              format: date-time
              example: 2015-11-21T01:51:17Z
            modifiedDate:
              description: The UTC value of the date the job was modified.
              type: string
              format: date-time
              example: 2015-11-21T01:51:17Z
            createdByUserUid:
              description: The userUid of whom created the job.
              type: string
            modifiedByUserUid:
              description: The userUid of whom last modified the job.
              type: string
            jobStatus:
              description: The status of the job.
              type: string
              example: DRAFT | AWAITING_AUTHORIZATION | IN_PROGRESS | COMPLETED | CANCELLED | CLOSED
            firstCompletedDate:
              description: The UTC value of when the job was first completed.
              type: string
              format: date-time
              example: 2015-11-21T01:51:17Z
            lastCompletedDate:
              description: The UTC value of when the job was last completed.
              type: string
              format: date-time
              example: 2015-11-21T01:51:17Z
            sourceFiles:
              type: array
              items:
                $ref: '#/definitions/SourceFile'
  AsyncProcessJobResponse:
    allOf:
    - $ref: '#/definitions/AsyncAcceptedResponse'
    - type: object
      properties:
        data:
          type: object
          properties:
            message:
              type: string
              description: User friendly string for the async response explaining the async action taking place.
            processUid:
              type: string
              description: The unique identifier crated for the async process.
            url:
              type: string
              description: The URL that a system can use to check the status of the async processing request.
  NullDataJobResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          properties:
            data:
              type: object
  ProcessCheckJobResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          properties:
            processUid:
              description: The unique identifier for a process.
              type: string
            processState:
              description: The current state of the process. Values returned are IN_PROGRESS | COMPLETED | FAILED.
              type: string
            createdDate:
              description: The UTC value of when the process was created.
              type: string
              format: date-time
              example: 2015-11-21T01:51:17Z
            modifiedDate:
              description: The UTC value of when the process was last modified.
              type: string
              format: date-time
              example: 2015-11-21T01:51:17Z
  ShallowJobResponse:
    allOf:
    - $ref: '#/definitions/SuccessResponse'
    - type: object
      properties:
        data:
          type: object
          properties:
            translationJobUid:
              description: The unique identifier for the job.
              type: string
            jobName:
              description: The name of the job.
              type: string
            targetLocaleIds:
              description: The array of localeIds for the job.
              type: array
              items:
                type: string
            description:
              description: The description of the job.
              type: string
            dueDate:
              description: The UTC value of the due date for the job.
              type: string
              format: date-time
              example: 2015-11-21T01:51:17Z
            callbackUrl:
              description: The callback URL to invoke when a job is completed.
              type: string
            callbackMethod:
              description: The http method (GET|POST) to use when Smartling invokes the callback URL upon job completion.
            createdDate:
              description: The UTC value of the date the job was created.
              type: string
              format: date-time
              example: 2015-11-21T01:51:17Z
            modifiedDate:
              description: The UTC value of the date the job was modified.
              type: string
              format: date-time
              example: 2015-11-21T01:51:17Z
            createdByUserUid:
              description: The userUid of who created the job.
              type: string
            modifiedByUserUid:
              description: The userUid of who last modified the job.
              type: string
            jobStatus:
              description: The status of the job.
              type: string
              example: DRAFT | AWAITING_AUTHORIZATION | IN_PROGRESS | COMPLETED | CANCELLED | CLOSED
            firstCompletedDate:
              description: The UTC value of when the job was first completed.
              type: string
              format: date-time
              example: 2015-11-21T01:51:17Z
            lastCompletedDate:
              description: The UTC value of when the job was last completed.
              type: string
              format: date-time
              example: 2015-11-21T01:51:17Z
  ProgressInfoReposnse:
    type: object
    properties:
      data:
        type: object
        properties:
          totalWordCount:
            description: The total number of words within that particular group (locale/file/job).
            type: number
            example: 192
          percentComplete:
            description: The percent of group (locale/file/job) completeness, 0 - 100.
            type: number
            example: 52
  ListFilesResponse:
    required:
      - response
    properties:
      response:
        allOf:
        - $ref: '#/definitions/SuccessResponse'
        - required:
            - data
          properties:
            data:
              properties:
                totalCount:
                  type: number
                items:
                  type: array
                  items:
                    $ref: '#/definitions/FileUri'
  SourceFile:
    type: object
    properties:
      data:
        type: object
        properties:
          uri:
            description: File uri
            type: string
          name:
            description: File name
            type: string
  FileUri:
    type: object
    properties:
      data:
        type: object
        properties:
          uri:
            description: File uri
            type: string