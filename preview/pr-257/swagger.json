{
  "openapi": "3.0.0",
  "info": {
    "contact": {
      "email": "support@smartling.com"
    },
    "description": "Before you begin using the Smartling APIs, we recommend going through our [Developer documentation](https://help.smartling.com/hc/en-us/categories/1260801686149).\n",
    "termsOfService": "https://www.smartling.com/about/terms-and-conditions/",
    "title": "Smartling REST API Reference",
    "version": "2.0.0",
    "x-logo": {
      "url": "smartling_logo.png"
    }
  },
  "servers": [
    {
      "url": "https://api.smartling.com"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Smartling uses OAuth2 for [authentication](https://help.smartling.com/hc/en-us/articles/1260805176849).\nTo access the Smartling APIs, you'll first need to authenticate with your\nuser identifier and user secret. An access token is returned that can be\nattached to the header of any API request. A refresh token is also returned.\n\nTo obtain your [user identifier and user secret](https://help.smartling.com/hc/en-us/articles/115004187694),\nlog in to Smartling.com and go to **API > Create Token**. Authenticating is as\nsimple as calling the `/api.smartling.com/auth-api/v2/authenticate` with\nyour `userIdentifier` and `userSecret`. The access token returned is valid\nfor 5-minutes, and is used in the header of all subsequent requests.\n\n**Example for generating your access token:**\n\n```bash\ncurl -X POST https://api.smartling.com/auth-api/v2/authenticate  -H 'content-type: application/json' -d '{\"userIdentifier\": \"userIdasdklj4348dk34!\", \"userSecret\": \"userSecret34i34kkd5634f\"}'\n```\n\n```\n{\n    \"response\": {\n        \"code\": \"SUCCESS\",\n        \"data\": {\n                \"accessToken\": \"eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOasdlkjn\",\n                \"refreshToken\": \"eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJkMTdkMmEw\",\n                \"expiresIn\": 480,\n                \"refreshExpiresIn\": 3660,\n                \"tokenType\": \"Bearer\"\n        }\n    }\n}\n```\n\n**Example of using your access token to list all projects for your account:**\n\n```bash\ncurl -X GET -H \"Authorization: Bearer {accessToken}\" https://api.smartling.com/accounts-api/v2/accounts/{accountUid}/projects\n```\n\n```\n{\n    \"response\": {\n        \"code\": \"SUCCESS\",\n        \"data\": {\n            \"totalCount\": 1,\n            \"items\": [{\n                         \"projectId\": \"df324sdf5\",\n                         \"projectName\": \"iOS Strings files\",\n                         \"accountUid\": \"ab5f1939\",\n                         \"archived\": false,\n                         \"projectTypeCode\": \"APPLICATION_RESOURCES\",\n                         \"sourceLocaleId\": \"en\",\n                         \"sourceLocaleDescription\": \"English\"\n                     }\n            ]\n        }\n    }\n}\n```"
    },
    {
      "name": "Account & Projects",
      "description": "Each client within Smartling is given their own account with a designated\n`accountUid`. Within each account is any number of projects. All files,\ncontent, and jobs are tied to a particular project. The Accounts &\nProjects API will allow you to programmatically find and use the projects\nwithin your account.\n\nYou may wish to reference the [Key Concepts for\nDevelopers](https://help.smartling.com/hc/en-us/articles/1260805481390) article\nto better understand how content is organized within Smartling."
    },
    {
      "name": "Locales",
      "description": "Locales are the language and country pairs that are used to identify the\nsource content and the desired target locale for your translated content."
    },
    {
      "name": "People",
      "description": "Smartling users, who process and translate content with the Smartling platform."
    },
    {
      "name": "Files",
      "description": "Files are typically how you can exchange your content with Smartling to\nget translations. Smartling supports a wide variety of [file\ntypes](https://help.smartling.com/hc/en-us/articles/360007998893). When\nyou upload a file to Smartling, it gets parsed into strings, which will\nthen be sent into the translation queue.\n\nThe complete list of supported file types is available [here](https://help.smartling.com/hc/en-us/articles/360007998893). For information on file directives, please refer to the documentation for each specific file type."
    },
    {
      "name": "Machine Translation (MT)",
      "description": "The Smartling platform offers state-of-the-art [Machine Translation capabilities](https://www.smartling.com/software/neural-machine-translation-hub/) through its synchronous account-level Machine Translation API. This API enables seamless translation of content without the need for it to be processed through Smartling Workflows. The API offers access to all MT Profiles, including the highly efficient MT Autoselect feature, providing unparalleled flexibility and control over your translation needs."
    },
    {
      "name": "File Machine Translations (MT)",
      "description": "The File Translations API offers a simple way to upload files and execute actions on them without any complex setup required. All resource-intensive actions are performed asynchronously and return an actionUid. By polling the API with the provided actionUid, you can easily monitor the progress of your file-based tasks in real time."
    },
    {
      "name": "Jobs",
      "description": "A Smartling project (such as a mobile, web, files, or connector project)\nmay contain one or more\n[jobs](https://help.smartling.com/hc/en-us/articles/1260805481390). You may\nhave multiple projects, each containing multiple jobs. Each job contains\nstrings, consisting of words or phrases.\n\nThe Jobs feature allows you to group and prioritize your content by name,\ndue date, description, and reference number (optional). It also enables\nyou to monitor the progress of your translations throughout completion.\n\nThe Jobs API allows you to create a job, add a file to a job, authorize a\njob, and cancel a job, among many other actions. You have full control via\nthe API to manage your job(s)."
    },
    {
      "name": "Job Batches V1",
      "description": "Job batches take care of asynchronous processes when uploading files and\nattaching them to jobs.\n\nGenerally, adding multiple files to a job is associated with polling -\nfile is parsed asynchronously and can't be added to a job until it is\ncompleted, adding file to a job is also asynchronous, and job can't be\nauthorized until all background tasks completed.\n\nThis forces third-party integration poll every file after every step.\n\nBatches hide these asynchronous processes from 3rd party integration -\nafter it accepted file from client it conducts this file through all steps\nup to the Job authorization. As Job Batches Service utilizes internal\nSmartling events it gets more effective than just polling files and jobs.\n\nFrom the client side flow consists of simple steps:\n\n1. Client creates Job (or uses existing one, which isn't currently\nprocessed with another Batch)\n\n2. Client Creates a new Batch for this Job\n\n3. Client adds (uploads) files into the batch giving target locales list\n\n4. When all files are uploaded, client triggers \"execute\" for the batch.\n\n5. Batch execution process waiting until all files are uploaded and added\nto the Job and then, if was requested, authorizes the Job.\n\n6. Clients can check batch status and see if all files uploaded and\nattached successfully, what errors happened for each file, and statistics\nfor added/skipped strings.\n\nAfter Batch is completed it can't be reused.\n\n**Job batches Limitations**\n\n- The service doesn't guarantee the correct processing of multiple batches for the \nsame job in parallel. Adding files to a new batch should only be done \nafter the previous batch has reached the \"completed\" status.\n\n- If the Job or Files are modified in the UI or through another integration,\nthe service cannot guarantee that the Batch will be processed correctly.\n\n- The service retains data for 6 months before permanently deleting it."
    },
    {
      "name": "Job Batches V2",
      "description": "Job batches take care of asynchronous processes when uploading files and\nattaching them to jobs.\n\nGenerally, adding multiple files to a job is associated with polling -\nfile is parsed asynchronously and can't be added to a job until it is\ncompleted. Adding file to a job is also asynchronous, and job can't be\nauthorized until all background tasks completed.\n\nThis forces a third-party integration poll for every file after every step.\n\nBatches hide these asynchronous processes from 3rd party integration -\nafter it accepts the file from the Smartling User, it processes this file\nthrough all steps up to the Job authorization. As Job Batches Service utilizes\ninternal Smartling events it gets more effective than just polling files and jobs.\n\nFrom the Smartling user's perspective, the flow consists of the following simple steps:\n\n1. Create a Job (or uses existing one, which isn't currently\nprocessed with another Batch)\n\n2. Create a new Batch for this Job with the declared list of\nfiles to be uploaded into the Job\n\n3. Upload the files into the batch giving target locales list\nfor each file\n\n4. You can cancel some of the declared files if there is no reason\nin uploading (no translatable content etc.)\n\n5. When all files are uploaded or canceled, \"execute\" is automatically\ntriggered for the batch.\n\n6. Batch execution process waits until all asynchronous processes\nare complete and then, if requested, authorizes the Job for translation.\n\n7. You can check batch status and see if all files have been uploaded and\nattached successfully. You can also see if any errors occurred for each file\nupload and the statistics for ingested/excluded strings.\n\nAfter Batch is completed it can't be reused.\n\n**Job batches Limitations**\n\n- The service doesn't guarantee the correct processing of multiple batches for the \nsame job in parallel. Adding files to a new batch should only be done \nafter the previous batch has reached the \"completed\" status.\n\n- If the Job or Files are modified in the UI or through another integration,\nthe service cannot guarantee that the Batch will be processed correctly.\n\n- The service retains data for 6 months before permanently deleting it."
    },
    {
      "name": "Context",
      "description": "[Visual context](https://help.smartling.com/hc/en-us/articles/360057484273)\nhelps Translators make linguistic, layout, and spacing decisions based on\nwhere strings appear in your mobile or desktop application. The Context\nAPI supports uploading various forms of context (images and HTML), and\nassociate the context with content in Smartling."
    },
    {
      "name": "Issues",
      "description": "The Issues feature is a way for users who are working on a translation\nworkflow to communicate with other users about source content and\ntranslations. For example, a Translator might create an\n[issue](https://help.smartling.com/hc/en-us/articles/115003139313) to ask\na question about terminology in a particular string.\n\nBy using Issues, you can record any communication about a string, and this\ncan be seen by anyone working on it. Issues streamline the translation\nworkflow. Translators get answers to their questions about the original\ncontent so they can translate it quickly and correctly. Translation\nresources can review and provide feedback about translations\ncollaboratively.\n\nThe Issues API provides methods for creating issues, changing the state of\nan issue, commenting on an issue, requesting detailed information, as well\nas creating reports on issues and comments."
    },
    {
      "name": "Strings",
      "description": "A string is a piece of translation. Based on the source content, strings\ncan be parsed differently. A string is then broken down further, into one\nor more segments.\n\nThe Strings API allows you to directly upload strings to a Smartling\nproject and fetch original strings or translations.\n\nFor each string in a Smartling project, there is a unique identifier\ncreated by hashing together the parsed string text, [variant\nmetadata](https://help.smartling.com/hc/en-us/articles/360008143853), and\nin some cases,\n[namespace](https://help.smartling.com/hc/en-us/articles/360008143833).\nWhen adding strings via the Strings API, each string will be unique. If\nyou try to create a string with identical variant metadata and string text\nto a string that already exists in the project, the string will be\noverwritten."
    },
    {
      "name": "Tags",
      "description": "Tags can help you manage your strings. The Tags API allows you to\nadd/remove string tags, and search for tags in a project."
    },
    {
      "name": "Vendors",
      "description": "The Vendors API is for Language Service Providers to view work that's\navailable in Smartling."
    },
    {
      "name": "Reports",
      "description": "The Reports API allows to request various reports available on Smartling\nplatform and specify additional filtering criteria to narrow down data\nreturned by the reports."
    },
    {
      "name": "Attachments",
      "description": "The Attachments API allows for file attachment upload, download and checking linked attachments for an entity.\nAttachment entities can be from three domains: strings, jobs or issues.\nEach entity is referenced by an entity UID. These UIDs have a specific form for each of the domains.\n- jobs: `<jobUid>`\n- issues: `<accountUid>-<issueUid>` or `<accountUid>-<issueUid>-<commentUid>`\n- strings: `<projectUid>:<stringHashcode>`\n\n**Attachments API Usage Limitations**:\n* Maximum attachment size is 500MB."
    },
    {
      "name": "Translation quality checks",
      "description": "The translation quality check service is an API endpoint at which you can check the quality of your translations."
    },
    {
      "name": "Glossary API",
      "description": "During translation process, text may contain specific words, which are very important to has \nconsistent meaning through out the resulted translation for target language. This is usually \nreferenced as terminology, glossary, thesaurus, etc. And one of the vital steps in high-quality\ntranslation is to extract such terms (words/phrases) in a separate set, and define correct \ntranslation to be used during work process. Imagine not correctly translated medical/legal \nterms - or inconsistent translation for the same terms by different translators in one document.\n\n Current section describes glossary manipulation API, such as :\n - glossary manipulation,\n - glossary entries manipulation,\n - import / export (in multiple formats),\n - glossary labels management,\n - etc."
    },
    {
      "name": "Blocklist API",
      "description": "Defines list of terms that should not be used during the translation process.\nBlocklists are tied to glossary functionality.\n\nCurrent section describes blocklists manipulation API, such as :\n - blocklist manipulation,\n - blocklist terms manipulation,\n - import / export (in multiple formats)."
    },
    {
      "name": "Workflow Assignment",
      "description": "The Workflow Assignment API handles workflow step assignments for non agency users."
    }
  ],
  "externalDocs": {
    "description": "Smartling Help Center",
    "url": "https://help.smartling.com"
  },
  "paths": {
    "/auth-api/v2/authenticate": {
      "post": {
        "summary": "Authenticate",
        "description": "Verifies the credentials of the connection attempt.",
        "tags": [
          "Authentication"
        ],
        "operationId": "authenticate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationRequest"
              }
            }
          },
          "description": "Authentication Request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "accessToken": "b816424c-2e95-11e7-93ae-92361f002671",
                          "expiresIn": 480,
                          "refreshExpiresIn": 3660,
                          "refreshToken": "c0a6f410-2e95-11e7-93ae-92361f002671",
                          "tokenType": "Bearer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "smartlingToken=$(curl -s -X POST -H \"Content-Type: application/json\" \\\n  -d \"{\\\"userIdentifier\\\": \\\"$smartlingId\\\", \\\"userSecret\\\": \\\"$smartlingSecret\\\"}\" \\\n  \"https://api.smartling.com/auth-api/v2/authenticate\" \\\n  | sed -E 's/^.*accessToken\":\"//' | sed -E 's/\",\"refreshToken.*//')\n"
          }
        ]
      }
    },
    "/auth-api/v2/authenticate/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "A [renewed access token](https://help.smartling.com/hc/en-us/articles/1260805176849) that can be attached to the header of any API request.",
        "summary": "Refresh access token",
        "operationId": "refreshAccessToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationRefreshRequest"
              }
            }
          },
          "description": "Refresh token request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST https://api.smartling.com/auth-api/v2/authenticate/refresh \\\n  -H 'content-type: application/json' \\\n  -d '{\"refreshToken\": \"eyJhbGciO...\"}'\n"
          }
        ]
      }
    },
    "/accounts-api/v2/accounts/{accountUid}/projects": {
      "get": {
        "tags": [
          "Account & Projects"
        ],
        "description": "Returns the list of projects for the account.\n",
        "summary": "List projects",
        "operationId": "getProjectsByAccount",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Substring search of the name of the project. Search is case insensitive.",
            "in": "query",
            "name": "projectNameFilter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Indicator whether or not archived projects should be returned. Defaults to false if not specified.",
            "in": "query",
            "name": "includeArchived",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Standard Smartling limit and offset to paginate through results.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Standard Smartling limit and offset to paginate through results. 500 projects are returned by default if not specified.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Indicator for the type of the project.",
            "in": "query",
            "name": "projectTypeCode",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Indicator list for the type of the projects.",
            "in": "query",
            "name": "projectTypeCodes",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "accountUid": "at724e365",
                              "archived": false,
                              "projectId": "fd7244365",
                              "projectName": "Android XML Content",
                              "projectTypeCode": "APPLICATION_RESOURCES",
                              "sourceLocaleDescription": "English",
                              "sourceLocaleId": "en-US"
                            },
                            {
                              "accountUid": "at724e365",
                              "archived": false,
                              "projectId": "eqb7243x5",
                              "projectName": "Marketing Website GDN",
                              "projectTypeCode": "GDN",
                              "sourceLocaleDescription": "English",
                              "sourceLocaleId": "en-US"
                            }
                          ],
                          "totalCount": 2
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AccountAPIProjectListSuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/accounts-api/v2/accounts/$smartlingAccountId/projects\n"
          }
        ]
      }
    },
    "/projects-api/v2/projects/{projectId}": {
      "get": {
        "tags": [
          "Account & Projects"
        ],
        "description": "Returns the details of a project.\n",
        "summary": "Get project details",
        "operationId": "getProjectDetails",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Indicator whether or not disabled locales configured for the project should be returned as part of the targetLocales. By default disabled target locales are not returned.",
            "in": "query",
            "name": "includeDisabledLocales",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "accountUid": "at724e365",
                          "archived": false,
                          "projectId": "fd7244365",
                          "projectName": "Android XML Content",
                          "projectTypeCode": "APPLICATION_RESOURCES",
                          "sourceLocaleDescription": "English",
                          "sourceLocaleId": "en-US",
                          "targetLocales": [
                            {
                              "description": "German (Germany)",
                              "enabled": true,
                              "localeId": "de-DE"
                            }
                          ]
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetailsSuccessResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/projects-api/v2/projects/$smartlingProjectId\n"
          }
        ]
      }
    },
    "/projects-api/v2/projects/{projectId}/targetLocales": {
      "post": {
        "summary": "Add a new target locale",
        "tags": [
          "Account & Projects"
        ],
        "description": "Add a new target locale to the project.\n",
        "operationId": "addLocaleToProject",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "defaultWorkflowUid": {
                    "description": "The default workflow that should be used when content is authorized. If not specified, the default workflow configured for the project will be used.",
                    "example": "ac48ht4qy",
                    "type": "string"
                  },
                  "localeId": {
                    "description": "The locale identifier (localeId) of the locale to be added to the project.",
                    "example": "ru-RU",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetailsSuccessResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": [
                          {
                            "accountUid": "at724e365",
                            "archived": false,
                            "projectId": "fd7244365",
                            "projectName": "Android XML Content",
                            "projectTypeCode": "APPLICATION_RESOURCES",
                            "sourceLocaleDescription": "English",
                            "sourceLocaleId": "en-US",
                            "targetLocales": [
                              {
                                "description": "German (Germany)",
                                "enabled": true,
                                "localeId": "de-DE"
                              },
                              {
                                "description": "Russian (Russia)",
                                "enabled": true,
                                "localeId": "ru-RU"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/projects-api/v2/projects/{projectId}/copy": {
      "post": {
        "summary": "Copy an existing project",
        "tags": [
          "Account & Projects"
        ],
        "description": "Make a copy of an existing project, thereby creating a new one with a new name\n",
        "operationId": "copyProject",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "projectName": {
                    "description": "The name of the new project to create.",
                    "example": "New Android Project",
                    "type": "string"
                  },
                  "targetLocaleIds": {
                    "description": "The list of target locales the new project should be created for. Note, each target locale specified must valid within the source project you are copying, i.e. you can copy all or a subset of locales from the source project to the target project.",
                    "example": [
                      "ru-RU"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCopySuccessResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "processUid": "7908ae61-3489-48e1-9e28-10652634d34e"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/projects-api/v2/projects/{projectId}/copy/{processUid}": {
      "get": {
        "tags": [
          "Account & Projects"
        ],
        "description": "Used to check if the copy project request is complete and to retrieve the new projectId\n",
        "summary": "Get the status of the project copy request",
        "operationId": "getProjectCopyRequestStatus",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The uid of the process to check for",
            "in": "path",
            "name": "processUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCopyProcessSuccessResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "createdDate": "2016-08-21T0B1:51:17Z",
                          "modifiedDate": "2016-08-21T0B1:51:17Z",
                          "newProjectUid": "8t7q4d643",
                          "processState": "OPEN",
                          "processStatistics": {
                            "errored": 0,
                            "processed": 6,
                            "requested": 8,
                            "skipped": 0
                          },
                          "processuid": "7908ae61-3489-48e1-9e28-10652634d34e"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/locales-api/v2/dictionary/locales": {
      "get": {
        "summary": "List locales",
        "tags": [
          "Locales"
        ],
        "description": "The list of available locales within Smartling.\n\nTo find out the `localedID` for a specific project, refer to [Get project\ndetails](/#operation/getProjectDetails).\n",
        "operationId": "getAvailableLocalesList",
        "parameters": [
          {
            "description": "Optional parameter to filter to the specified list of locales.",
            "in": "query",
            "name": "localeIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Fetch only supported locales. Otherwise fetch all locales. Default value is \"true\".",
            "in": "query",
            "name": "supportedOnly",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalesAPISuccessResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "description": "English",
                              "mtSupported": true,
                              "language": {
                                "description": "English",
                                "direction": "RTL",
                                "languageId": "en",
                                "wordDelimiter": "CHARACTER"
                              },
                              "localeId": "en-US",
                              "direction": "RTL",
                              "country": {
                                "countryId": "US",
                                "description": "United States"
                              }
                            },
                            {
                              "description": "Italian (Italy) [it-IT]",
                              "mtSupported": true,
                              "language": {
                                "description": "Italian",
                                "direction": "RTL",
                                "languageId": "it",
                                "wordDelimiter": "CHARACTER"
                              },
                              "localeId": "it-IT",
                              "direction": "RTL",
                              "country": {
                                "countryId": "IT",
                                "description": "Italy"
                              }
                            }
                          ],
                          "totalCount": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/people-api/v2/users": {
      "post": {
        "summary": "Get list of user information",
        "tags": [
          "People"
        ],
        "description": "Smartling users, who process and translate content with the Smartling platform.\n",
        "operationId": "getUsersList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "userUids": {
                    "description": "List of user uids.",
                    "example": [
                      "ac48ht4qy"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "excludeProfileImage": {
                    "description": "As a performance optimization, exclude the user's profile image.",
                    "example": false,
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PeopleAPIUserInfosSuccessResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "userUid": "ac48ht4qy",
                              "firstName": "user first name 1",
                              "lastName": "user last name 1",
                              "profileImage": "https://my.gravatar.net/avatar/eeca2d632c1weeeaf5dsd3e32e32ddsasd",
                              "createdDate": 1704110400000
                            }
                          ],
                          "totalCount": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/people-api/v3/accounts/{accountUid}/processes/{processUid}": {
      "get": {
        "summary": "Assignments removal status",
        "description": "Checking state of workflow assignments removal process\n",
        "operationId": "workflowAssignmentsProcess",
        "tags": [
          "Workflow Assignment"
        ],
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "schema": {
              "format": "uid",
              "type": "string"
            }
          },
          {
            "name": "processUid",
            "in": "path",
            "required": true,
            "description": "The process unique identifier.",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowAssignmentProcessResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "processUid": "67f4287b-895f-4fc6-b672-6e3f376b0cd5",
                          "processState": "RUNNING",
                          "createdDate": "2023-12-11T20:40:30Z",
                          "requested": 10,
                          "processed": 5
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/people-api/v3/accounts/{accountUid}/users/{userUid}/workflow-steps/assign": {
      "post": {
        "summary": "Create Steps Assignment",
        "description": "Create new workflow steps assignment",
        "operationId": "workflowAssignmentsCreate",
        "tags": [
          "Workflow Assignment"
        ],
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "schema": {
              "format": "uid",
              "type": "string"
            }
          },
          {
            "name": "userUid",
            "in": "path",
            "required": true,
            "description": "User identifier.",
            "schema": {
              "format": "uid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowAssignmentCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowAssignmentCreateResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "totalCount": 10,
                          "items": {
                            "workflowStepUid": "8312172ed60d",
                            "localePais": {
                              "sourceLocaleId": "en-US",
                              "targetLocaleIds": [
                                "fr-FR",
                                "es-ES"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/people-api/v3/accounts/{accountUid}/users/{userUid}/workflow-steps/remove": {
      "post": {
        "summary": "Remove Step Assignments",
        "description": "Schedule workflow steps assignment removal and returns process uid for status check.",
        "operationId": "workflowAssignmentsRemove",
        "tags": [
          "Workflow Assignment"
        ],
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "schema": {
              "format": "uid",
              "type": "string"
            }
          },
          {
            "name": "userUid",
            "in": "path",
            "required": true,
            "description": "User identifier.",
            "schema": {
              "format": "uid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "workflowStepAssignments": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/WorkflowAssignmentWorkflowStep"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowAssignmentProcessResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "processUid": "67f4287b-895f-4fc6-b672-6e3f376b0cd5",
                          "processState": "RUNNING",
                          "createdDate": "2023-12-11T20:40:30Z",
                          "requested": 10,
                          "processed": 5
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/people-api/v3/accounts/{accountUid}/users/workflow-steps": {
      "post": {
        "summary": "Search For Account Assignments",
        "description": "Search for workflow step assignments within account",
        "operationId": "workflowAssignmentsSearch",
        "tags": [
          "Workflow Assignment"
        ],
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "schema": {
              "format": "uid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "workflowStepUids": {
                    "type": "array",
                    "minimum": 0,
                    "maximum": 1000,
                    "description": "Optional workflow steps uids.",
                    "example": [
                      "8312172ed60d",
                      "42121ad3df2c"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "userUid": {
                    "type": "string",
                    "description": "Optional user identifier.",
                    "example": "ac48ht4qy"
                  },
                  "offsetToken": {
                    "type": "string",
                    "description": "Offset token for next data batch or null",
                    "example": "d966008f-c341-4c75-a986-7e25a0135e01"
                  },
                  "limit": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5000,
                    "description": "Size of batch for single request",
                    "example": 1000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowAssignmentSearchResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "offsetToken": "67f4287b-895f-4fc6-b672-6e3f376b0cd5",
                          "workflowStepUserAssignments": {
                            "userUid": "ac48ht4qy",
                            "roleValue": "ROLE_TRANSLATION_RESOURCE",
                            "agencyUid": null,
                            "workflowStepAssignments": {
                              "workflowStepUid": "8312172ed60d",
                              "localePais": {
                                "sourceLocaleId": "en-US",
                                "targetLocaleIds": [
                                  "fr-FR",
                                  "es-ES"
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/people-api/v3/accounts/{accountUid}/users/{userUid}/workflow-steps": {
      "post": {
        "summary": "Search For User Assignments",
        "description": "Search for workflow step assignments for single user",
        "operationId": "workflowAssignmentsUserSearch",
        "tags": [
          "Workflow Assignment"
        ],
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "schema": {
              "format": "uid",
              "type": "string"
            }
          },
          {
            "name": "userUid",
            "in": "path",
            "required": true,
            "description": "User identifier.",
            "schema": {
              "format": "uid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "offsetToken": {
                    "type": "string",
                    "description": "Offset token for next data batch or null",
                    "example": "67f4287b-895f-4fc6-b672-6e3f376b0cd5"
                  },
                  "limit": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5000,
                    "description": "Size of batch for single request",
                    "example": 1000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowAssignmentSearchResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "offsetToken": "67f4287b-895f-4fc6-b672-6e3f376b0cd5",
                          "workflowStepUserAssignments": {
                            "userUid": "0d1ff048f7e7",
                            "roleValue": "ROLE_TRANSLATION_RESOURCE",
                            "agencyUid": null,
                            "workflowStepAssignments": {
                              "workflowStepUid": "8312172ed60d",
                              "localePais": {
                                "sourceLocaleId": "en-US",
                                "targetLocaleIds": [
                                  "fr-FR",
                                  "es-ES"
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/files-api/v2/projects/{projectId}/file": {
      "post": {
        "summary": "Upload file",
        "description": "This uploads original source content to Smartling.\n\nThe curl example provided will upload your Java properties file directly\ninto the Smartling project identified by the `projectId`. Smartling will\ningest this file, parse out the keys and text as strings for\ntranslation. At this point, content is ready for translation.\n",
        "operationId": "uploadSourceFile",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "format": "uid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file contents to upload."
                  },
                  "fileUri": {
                    "type": "string",
                    "description": "A value that uniquely identifies the uploaded file. This ID\ncan be used to request the file back. We recommend that you\nuse file path and file name, similar to how version control\nsystems identify the file.\n\nExample: `/myproject/i18n/ui.properties`\n"
                  },
                  "fileType": {
                    "$ref": "#/components/schemas/FileType"
                  },
                  "smartling.namespace": {
                    "type": "string",
                    "description": "This is only for accounts created after July 31st, 2015. Define a custom\n[namespace](https://help.smartling.com/hc/en-us/articles/360008143833)\nfor the file.\n\n**Note**: While this parameter shares the format of other\nfile directives, it will not work as an inline directive and\nmust be specified in the API call.\n"
                  },
                  "smartling.file_charset": {
                    "type": "string",
                    "description": "Specifies a custom charset for text-format files. The value\nshould be the name of the character set. See a full list of\nsupported character sets here.\n\nIf this directive is not used, Smartling will use the\n```Content-Type``` request header to determine if the\ncontent is encoded with UTF-16, UTF-16B or UTF-16LE. If\nthere is no ```Content-Type``` header, Smartling will\nexamine the file for UTF-16 characters. If none are\ndetected, UTF-8 encoding will be used.\n\n**Note**: Once this property has been set for a file, it\ncannot be changed. If you reupload the file, it will use the\noriginal charset, even if you change the directive. An error\nwill be returned if this directive is used when uploading\nbinary-format file types, such as Office or IDML files.\n"
                  },
                  "smartling.[command]": {
                    "type": "string",
                    "description": "Provides custom parser configuration for supported file\ntypes. See [Supported File Types](https://help.smartling.com/hc/en-us/articles/360007998893)\nfor more details.\n"
                  },
                  "callbackUrl": {
                    "type": "string",
                    "maxLength": 255,
                    "format": "url",
                    "description": "A GET request that creates a callback to a URL when all authorized strings from a file are 100%\npublished for a locale.* The callback gives the\nfileUri and locale with the format\n`http[/s]://your.url?locale=xx-XX&fileUri=your.file`. If you\nupload the file again, without a callbackUrl, it will remove\nany previous callbackUrl for that file. The RequestBin\n(http://requestb.in) service is a convenient way to test a\ncallback. RequestBin generates a short-lived disposable URL\nthat displays all posted requests.\n\nIf a callback fails, Smartling will make multiple attempts\nto reach the designated URL. However, we do not keep\nretrying a failed callback indefinitely. Try to make sure\nyour callback URL is as stable as possible and be aware that\ncallbacks are not a 100% reliable way of being notified that\na file is published.\n\nIf the upload has begun but is taking more than a minute to\ncomplete, it responds with a `202` status.\n\n*This is the default behavior. There are cases when the callback could be triggered even when not all authorized strings are published, depending on your project configuration. Contact your Smartling Representative if you have questions about your project’s callback configuration.   \n"
                  }
                },
                "required": [
                  "file",
                  "fileUri",
                  "fileType"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesAPIUploadSuccessResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "overWritten": true,
                          "stringCount": 10,
                          "wordCount": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "ACCEPTED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesAPIUploadAcceptedResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "message": "Your file was successfully uploaded. Word and string counts are not available right now."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "423": {
            "description": "The requested file is currently being processed by another operation. The file will be unlocked after the operation completes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error423Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "RESOURCE_LOCKED",
                        "errors": {
                          "key": "resource.locked",
                          "message": "The file is currently being processed and will be available in a few minutes."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -F \"file=@$uploadFilePath;type=text/plain\" -F \"fileUri=$uploadFileSmartlingUri\" -F \"fileType=$uploadFileSmartlingType\" \"https://api.smartling.com/files-api/v2/projects/$smartlingProjectId/file\"\n"
          }
        ]
      },
      "get": {
        "summary": "Download source file",
        "description": "This downloads the original version of the requested file from\nSmartling.\n\nIt is important to check the HTTP response status code. If Smartling\nfinds and returns the file normally, you will receive a `200` SUCCESS\nresponse. If you receive a response status code other than `200`, the\nrequested file will not be part of the response.\n\nWhen you upload a UTF-16 character encoded file, then /file/get requests\nfor that file will have a character encoding of UTF-16. All other\nuploaded files will return with a character encoding of UTF-8.\n\nYou can always use the content-type header in the response of a file/get\nrequest to determine the character encoding.\n\nThe filename is based on the fileUri associated with the requested file.\nIn most cases, the filename is exactly the fileUri provided. The only\nexception to this is with .pot gettext files. When a .pot file is\nspecified as the fileUri, Smartling returns a .po file.\n",
        "tags": [
          "Files"
        ],
        "operationId": "downloadSourceFile",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileUri",
            "description": "Value that uniquely identifies the downloaded file.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" -G --data-urlencode \"fileUri=$smartlingFileUri\" \"https://api.smartling.com/files-api/v2/projects/$smartlingProjectId/file\"\n"
          }
        ]
      }
    },
    "/files-api/v2/projects/{projectId}/file/status": {
      "get": {
        "summary": "Status of file for each locale",
        "tags": [
          "Files"
        ],
        "description": "Returns information on a specific file.\n\n**Example:**\n```bash\n  curl -X GET -H \"Authorization: Bearer {token}\" 'https://api.smartling.com/files-api/v2/projects/{projectId}/file/status?fileUri=file.properties'\n```\n",
        "operationId": "getFileTranslationStatusAllLocales",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileUri",
            "description": "Smartling value that uniquely identifies a file in Smartling",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesAPIStatusAllLocalesSuccessResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "created": "2017-09-06T20:29:15Z",
                          "directives": {
                            "file_uri_as_namespace": "true"
                          },
                          "fileType": "csv",
                          "fileUri": "/files/test_translation_import.csv",
                          "hasInstructions": false,
                          "items": [
                            {
                              "authorizedStringCount": 0,
                              "authorizedWordCount": 0,
                              "completedStringCount": 0,
                              "completedWordCount": 0,
                              "excludedStringCount": 0,
                              "excludedWordCount": 0,
                              "localeId": "ru-RU"
                            }
                          ],
                          "lastUploaded": "2017-09-06T20:29:15Z",
                          "namespace": {
                            "name": "/files/test_trans_import.csv"
                          },
                          "parserVersion": 4,
                          "totalCount": 1,
                          "totalStringCount": 1,
                          "totalWordCount": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/files-api/v2/projects/{projectId}/locales/{localeId}/file/status": {
      "get": {
        "summary": "Status of file for a single locale",
        "description": "Returns detailed status information on a specific file.\n\n**Example:**\n```bash\ncurl -X GET -H \"Authorization: Bearer {token}\" 'https://api.smartling.com/files-api/v2/projects/{projectId}/locales/{localeId}/file/status?fileUri=file.properties'\n```\n",
        "tags": [
          "Files"
        ],
        "operationId": "getFileTranslationStatusSingleLocale",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Identifier for a locale.",
            "in": "path",
            "name": "localeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Smartling value that uniquely identifies a file in Smartling",
            "in": "query",
            "name": "fileUri",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesAPIStatusSingleLocaleSuccessResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "authorizedStringCount": 4,
                          "authorizedWordCount": 5,
                          "completedStringCount": 0,
                          "completedWordCount": 0,
                          "created": "2017-05-27T12:45:36Z",
                          "excludedStringCount": 0,
                          "excludedWordCount": 0,
                          "fileType": "javaProperties",
                          "fileUri": "/files/4.properties",
                          "hasInstructions": false,
                          "lastUploaded": "2017-05-27T12:45:36Z",
                          "parserVersion": 4,
                          "totalStringCount": 5,
                          "totalWordCount": 9
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/files-api/v2/projects/{projectId}/locales/{localeId}/file": {
      "get": {
        "summary": "Download translated file (single locale)",
        "tags": [
          "Files"
        ],
        "description": "This downloads the requested file from Smartling.\n\nIt is important to check the HTTP response status code. If Smartling\nfinds and returns the file normally, you will receive a `200` SUCCESS\nresponse. If you receive any other response status code other than\n`200`, the requested file will not be part of the response.\n\nWhen you upload a UTF-16 character encoded file, then /file/get requests\nfor that file will have a character encoding of UTF-16. All other\nuploaded files will return with a character encoding of UTF-8.\n\nYou can always use the content-type header in the response of a file/get\nrequest to determine the character encoding.\n\n**Note**: The filename in the response header is based on the fileUri\nassociated with the requested file. In most cases, the filename is\nexactly the fileUri provided. The only exception to this is with .pot\ngettext files. When a .pot file is specified as the fileUri, Smartling\nreturns a .po file.`\n",
        "operationId": "downloadTranslatedFileSingleLocale",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "localeId",
            "description": "Identifier for a locale.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileUri",
            "description": "Value that uniquely identifies the downloaded file",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "retrievalType",
            "description": "Determines the desired format for the download. Applies to translated files only.\n\n| retrievalType | Description |\n|---------------|-------------|\n| pending | Smartling returns any translations (including non-published translations)|\n| published | Smartling returns only published/pre-published translations.|\n| pseudo | Smartling returns a modified version of the original text with certain characters transformed and the text expanded. For example, the uploaded string \"This is a sample string\", will return as \"T~hís ~ís á s~ámpl~é str~íñg\". Pseudo translations enable you to test how a longer string integrates into your application.|\n| contextMatchingInstrumented | Smartling returns a modified version of the original file with strings wrapped in a specific set of Unicode symbols that can later be recognized and matched by the Chrome Context Capture Extension.|\n",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "pending",
                "published",
                "pseudo",
                "contextMatchingInstrumented"
              ],
              "type": "string"
            }
          },
          {
            "name": "includeOriginalStrings",
            "description": "Specifies whether Smartling will return the original string or an\nempty string where no translation is available. This parameter is\nonly supported for Android XML, gettext, Java properties, custom\nXML, JSON, and XLIFF files.\n\n| Value | Description |\n|-------|-------------|\n| true | If there is no translation, Smartling returns the original string. |\n| false | If there is no translation, Smartling returns an empty string. |\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" -o $smartlingLocaleId$smartlingFileUri -G --data-urlencode \"fileUri=$smartlingFileUri\" \"https://api.smartling.com/files-api/v2/projects/$smartlingProjectId/locales/$smartlingLocaleId/file\"\n"
          }
        ]
      }
    },
    "/files-api/v2/projects/{projectId}/locales/all/file/zip": {
      "get": {
        "summary": "Download all translations of file",
        "description": "Download a ZIP archive with all translations for the requested file.\n\nUnlike the \"Download translated file\" endpoint, you get a ZIP archive\nwith all translations of a specific file.\n\nIt is important to check the HTTP response status code. If Smartling\nfinds and returns the file normally, you will receive a `200` SUCCESS\nresponse. If you receive any other response status code than `200`, the\nrequested files will not be part of the response.\n\nWhen you upload a UTF-16 character encoded file, then /file/get requests\nfor that file will have a character encoding of UTF-16. All other\nuploaded files will return with a character encoding of UTF-8.\n\nYou can always use the content-type header in the response of a file/get\nrequest to determine the character encoding.\n",
        "tags": [
          "Files"
        ],
        "operationId": "downloadTranslatedFilesAllLocales",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileUri",
            "description": "Smartling value that uniquely identifies a file in Smartling",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "retrievalType",
            "description": "Determines the desired format for the download. Applies to translated files only.\n\n| retrievalType | Description |\n|---------------|-------------|\n| pending | Smartling returns any translations (including non-published translations).|\n| published | Smartling returns only published/pre-published translations.|\n| pseudo | Smartling returns a modified version of the original text with certain characters transformed, and the text expanded. For example, the uploaded string \"This is a sample string\", will return as \"T~hís ~ís á s~ámpl~é str~íñg\". Pseudo translations enable you to test how a longer string integrates into your application.|\n| contextMatchingInstrumented | Smartling returns a modified version of the original file with strings wrapped in a specific set of Unicode symbols that can later be recognized and matched by the Chrome Context Capture Extension.|\n",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "pending",
                "published",
                "pseudo",
                "contextMatchingInstrumented"
              ],
              "type": "string"
            }
          },
          {
            "name": "includeOriginalStrings",
            "description": "Specifies whether Smartling will return the original string or an\nempty string where no translation is available. This parameter is\nonly supported for Android XML, gettext, Java properties, custom\nXML, and JSON files.\n\n| Value | Description |\n|-------|-------------|\n| true | If there is no translation, Smartling returns the original string. |\n| false | If there is no translation, Smartling returns an empty string. |\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "zipFileName",
            "description": "Name for the downloaded zip file. If unset, the default is ```translations.zip```",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET -H \"Authorization: Bearer $smartlingToken\" 'https://api.smartling.com/files-api/v2/projects/{projectId}/locales/all/file/zip?fileUri=yourfile.json&retrievalType=published'\n"
          }
        ]
      }
    },
    "/files-api/v2/projects/{projectId}/files/zip": {
      "get": {
        "summary": "Download multiple translated files",
        "description": "Download ZIP archive with the requested translated files.\n\nUnlike \"Download all translations of the file\" you can specify multiple\nfile URIs (limit is 300 files) and locale IDs to select which files and languages you want to download.\n\nIt is important to check the HTTP response status code. If Smartling\nfinds and returns the file normally, you will receive a `200` SUCCESS\nresponse. If you receive any other response status code than `200`, the\nrequested files will not be part of the response.\n\nWhen you upload a UTF-16 character encoded file, then /file/get requests\nfor that file will have a character encoding of UTF-16. All other\nuploaded files will return with a character encoding of UTF-8.\n\nYou can always use the content-type header in the response of a file/get\nrequest to determine the character encoding.\n\n**Example:**\n\n```bash\n  curl -X GET -H \"Authorization: Bearer {token}\" 'https://api.smartling.com/files-api/v2/projects/{projectId}/files/zip?localeIds[]=de-DE&fileUris[]=yourfile.json'\n```\n",
        "tags": [
          "Files"
        ],
        "operationId": "downloadMultipleTranslatedFiles",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileUris[]",
            "description": "Smartling values that each uniquely identify a file. The limit is 300 files.",
            "explode": true,
            "in": "query",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "name": "localeIds[]",
            "description": "List of locales to download.",
            "explode": true,
            "in": "query",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "name": "retrievalType",
            "description": "Determines the desired format for the download. Applies only to\ntranslated files.\n\n| retrievalType | Description |\n|---------------|-------------|\n| pending | Smartling returns any translations (including non-published translations)|\n| published | Smartling returns only published/pre-published translations.|\n| pseudo | Smartling returns a modified version of the original text with certain characters transformed and the text expanded. For example, the uploaded string \"This is a sample string\", will return as \"T~hís ~ís á s~ámpl~é str~íñg\". Pseudo translations enable you to test how a longer string integrates into your application.|\n| contextMatchingInstrumented | Smartling returns a modified version of the original file with strings wrapped in a specific set of Unicode symbols that can later be recognized and matched by the Chrome Context Capture Extension.|\n",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "pending",
                "published",
                "pseudo",
                "contextMatchingInstrumented"
              ],
              "type": "string"
            }
          },
          {
            "name": "includeOriginalStrings",
            "description": "Specifies whether Smartling will return the original string or an\nempty string where no translation is available. This parameter is\nonly supported for Android XML, gettext, Java properties, custom\nXML, and JSON files.\n\n| Value | Description |\n|-------|-------------|\n| true | If there is no translation, Smartling returns the original string. |\n| false | If there is no translation, Smartling returns an empty string. |\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileNameMode",
            "description": "Determines how files in the ZIP file will be named. If not set, the\nfull original file path will be used as the filename.\n\n| fileNameMode | Description |\n|--------------|-------------|\n| UNCHANGED | Full original file path is used |\n| TRIM_LEADING | Remove all except the last path segment. e.g. ```/en/strings/nav.properties``` becomes ```nav.properties```|\n| LOCALE_LAST | Adds a locale folder to the file path directly before the filename. e.g. ```/strings/nav.properties``` becomes ```/strings/en/nav.properties``` |\n",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "UNCHANGED",
                "TRIM_LEADING",
                "LOCALE_LAST"
              ],
              "type": "string"
            }
          },
          {
            "name": "localeMode",
            "description": "Determines how locales will be handled in the downloaded zip\n\n| localeMode | Description |\n|------------|-------------|\n| LOCALE_IN_PATH | Locale code is added to the end of the file path. e.g. ```/strings/es-ES/nav.properties```. |\n| LOCALE_IN_NAME | Locale code is added to the end of the file name e.g. ```/strings/nav_es-ES.properties```. |\n| LOCALE_IN_NAME_AND_PATH | Locale code is added to both the path and the filename. e.g. ```/strings/es-ES/nav_es-ES.properties```. |\n",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "LOCALE_IN_PATH",
                "LOCALE_IN_NAME",
                "LOCALE_IN_NAME_AND_PATH"
              ],
              "type": "string"
            }
          },
          {
            "name": "zipFileName",
            "description": "Name for the downloaded ZIP file. If unset, default is ```translations.zip```",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/files-api/v2/projects/{projectId}/files/list": {
      "get": {
        "summary": "List recently uploaded files",
        "description": "This lists recently uploaded files, and returns a maximum of 100 files.",
        "tags": [
          "Files"
        ],
        "operationId": "getRecentlyUploadedSourceFilesList",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uriMask",
            "description": "Returns only files with a URI containing the given substring. Case is ignored. For example, the value ```.json``` will match ```strings.json``` and ```STRINGS.JSON``` but not ```json.strings```\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileTypes[]",
            "explode": true,
            "in": "query",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/FileType"
              },
              "type": "array"
            }
          },
          {
            "name": "lastUploadedAfter",
            "description": "Returns all files uploaded after the specified date.",
            "in": "query",
            "required": false,
            "schema": {
              "format": "YYYY-MM-DDThh:mm:ssZ",
              "type": "string"
            }
          },
          {
            "name": "lastUploadedBefore",
            "description": "Returns all files uploaded before the specified date.",
            "in": "query",
            "required": false,
            "schema": {
              "format": "YYYY-MM-DDThh:mm:ssZ",
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "description": "Sets the name and direction of the parameter to order results by. If ascending or descending is not specified, the default is ascending\n",
            "in": "query",
            "schema": {
              "enum": [
                "created",
                "fileUri",
                "lastUploaded",
                "created_asc",
                "created_desc",
                "fileUri_asc",
                "fileUri_desc",
                "lastUploaded_asc",
                "lastUploaded_desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "In order to get consistent pagination, make sure to specify the ```orderBy``` parameter.\n",
            "in": "query",
            "required": false,
            "schema": {
              "default": 100,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "description": "Standard Smartling limit and offset to paginate through results.",
            "in": "query",
            "required": false,
            "schema": {
              "default": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesAPIListFilesSuccessResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "created": "2017-09-06T20:29:15Z",
                              "fileType": "csv",
                              "fileUri": "/files/translation_import.csv",
                              "hasInstructions": false,
                              "lastUploaded": "2017-09-06T20:29:15Z"
                            },
                            {
                              "created": "2017-05-27T12:45:36Z",
                              "fileType": "javaProperties",
                              "fileUri": "/files/4.properties",
                              "hasInstructions": false,
                              "lastUploaded": "2017-05-27T12:45:36Z"
                            }
                          ],
                          "totalCount": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" \"https://api.smartling.com/files-api/v2/projects/$smartlingProjectId/files/list?fileTypes[]=json&uriMask=strings\"\n"
          }
        ]
      }
    },
    "/files-api/v2/projects/{projectId}/file-types": {
      "get": {
        "summary": "List all file types",
        "description": "This returns a list of all file types currently represented in the project.\n",
        "tags": [
          "Files"
        ],
        "operationId": "getFileTypesList",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesAPIListFileTypesSuccessResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            "csv",
                            "javaProperties"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" \"https://api.smartling.com/files-api/v2/projects/$smartlingProjectId/file-types\"\n"
          }
        ]
      }
    },
    "/files-api/v2/projects/{projectId}/file/rename": {
      "post": {
        "summary": "Rename file",
        "description": "This renames an uploaded file by changing the `fileUri`. After renaming the file, it will only be identified by the new `fileUri` that you provide.\n",
        "tags": [
          "Files"
        ],
        "operationId": "renameUploadedSourceFile",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "fileUri": {
                    "description": "Current value that uniquely identifies the file",
                    "type": "string"
                  },
                  "newFileUri": {
                    "description": "The new value for fileUri. We recommend that you use file path and file name, similar to how version control systems identify the file. Example: /myproject/i18n/ui.properties. This must be a fileUri that does not exist in the current Smartling project.\n",
                    "type": "string"
                  }
                },
                "required": [
                  "fileUri",
                  "newFileUri"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": null
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -F \"fileUri=filename.properties\" -F \"newFileUri=filename2.properties\" 'https://api.smartling.com/files-api/v2/projects/$smartlingProjectId/file/rename'\n"
          }
        ]
      }
    },
    "/files-api/v2/projects/{projectId}/file/delete": {
      "post": {
        "summary": "Delete file",
        "description": "This removes the file from Smartling. The file will no longer be available for download. Any complete translations for the file remain available for use within the system.\n\nSmartling deletes files asynchronously and it typically takes a few minutes to complete. While deleting a file, you can not upload a file with the same `fileUri`.\n",
        "tags": [
          "Files"
        ],
        "operationId": "deleteUploadedSourceFile",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "fileUri": {
                    "description": "Smartling value that uniquely identifies a file in Smartling",
                    "type": "string"
                  }
                },
                "required": [
                  "fileUri"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -F \"fileUri=filename.properties\" 'https://api.smartling.com/files-api/v2/projects/$smartlingProjectId/file/delete'\n"
          }
        ]
      }
    },
    "/files-api/v2/projects/{projectId}/locales/{localeId}/file/last-modified": {
      "get": {
        "summary": "Last modified date (single locale)",
        "description": "This returns the date that a file was last modified in a specified locale.\n",
        "tags": [
          "Files"
        ],
        "operationId": "getTranslatedFileLastModifiedDateSingleLocale",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Identifier for a locale.",
            "in": "path",
            "name": "localeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A unique identifier for a file in Smartling.",
            "in": "query",
            "name": "fileUri",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limits the return to only those file and locale combinations that have a ```lastModified``` date after the ```lastModifiedAfter```parameter . The items array will be empty if the file has not been modified in any of the locales since the `lastModifiedAfter` date specified.",
            "in": "query",
            "name": "lastModifiedAfter",
            "required": false,
            "schema": {
              "format": "YYYY-MM-DDThh:mm:ssZ",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesAPILastModifiedSingleLocaleSuccessResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "lastModified": "2017-09-06T20:25:18Z",
                          "localeId": "ru-RU"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET -H \"Authorization: Bearer $smartlingToken\" 'https://api.smartling.com/files-api/v2/projects/$smartlingProjectId/locales/$smartlingLocaleId/file/last-modified?fileUri=filename.properties'\n"
          }
        ]
      }
    },
    "/files-api/v2/projects/{projectId}/file/last-modified": {
      "get": {
        "summary": "Last modified date (all locales)",
        "description": "This returns the date that a file was last modified in each locale.\n",
        "tags": [
          "Files"
        ],
        "operationId": "getTranslatedFileLastModifiedDateAllLocales",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A unique identifier for a file in Smartling.",
            "in": "query",
            "name": "fileUri",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limits the return to only those file and locale combinations that have a ```lastModified``` date after the parameter ```lastModifiedAfter```. The items array will be empty if the file has not been modified in any of the locales since the `lastModifiedAfter` date specified.",
            "in": "query",
            "name": "lastModifiedAfter",
            "required": false,
            "schema": {
              "format": "YYYY-MM-DDThh:mm:ssZ",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesAPILastModifiedAllLocalesSuccessResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "lastModified": "2017-09-06T20:25:18Z",
                              "localeId": "ru-RU"
                            }
                          ],
                          "totalCount": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET -H \"Authorization: Bearer $smartlingToken\" 'https://api.smartling.com/files-api/v2/projects/$smartlingProjectId/file/last-modified?fileUri=filename.properties'\n"
          }
        ]
      }
    },
    "/files-api/v2/projects/{projectId}/locales/{localeId}/file/import": {
      "post": {
        "summary": "Import translations",
        "description": "",
        "tags": [
          "Files"
        ],
        "operationId": "importFileTranslations",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Identifier for a locale.",
            "in": "path",
            "name": "localeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file contents to upload."
                  },
                  "fileUri": {
                    "description": "The Smartling URI for a file that contains the original language strings that are already uploaded to Smartling.",
                    "type": "string"
                  },
                  "fileType": {
                    "description": "Unique identifier for the file type. To allow translation imports, XML and JSON files must be uploaded with `source_key_paths` defined.",
                    "enum": [
                      "android",
                      "ios",
                      "gettext",
                      "java_properties",
                      "yaml",
                      "xml",
                      "json",
                      "qt",
                      "resx",
                      "csv",
                      "pres",
                      "stringsdict",
                      "srt"
                    ],
                    "type": "string"
                  },
                  "translationState": {
                    "description": "Value indicating the workflow state to import the translations into.\nContent will be imported into the language's default workflow.\n\n| Value | Description |\n|-------|-------------|\n| PUBLISHED | The translated content is published. |\n| POST_TRANSLATION | The translated content is imported into the first step after translation - if there is none, it will be published. |\n",
                    "enum": [
                      "PUBLISHED",
                      "POST_TRANSLATION"
                    ],
                    "type": "string"
                  },
                  "overwrite": {
                    "description": "Whether or not to overwrite existing translations.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "file",
                  "fileUri",
                  "fileType",
                  "translationState"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesAPITranslationImportSuccessResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "stringCount": 3,
                          "translationImportErrors": [],
                          "wordCount": 6
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" -F \"file=@filename.properties\" -F \"fileUri=filename.properties\" -F \"fileType=javaProperties\" -F \"translationState=PUBLISHED\" 'https://api.smartling.com/files-api/v2/projects/$smartlingProjectId/locales/$smartlingLocaleId/file/import'\n"
          }
        ]
      }
    },
    "/files-api/v2/projects/{projectId}/locales/{localeId}/file/get-translations": {
      "post": {
        "summary": "Export translations",
        "description": "Temporarily uploads a file, then returns a translated version for requested locales.\n\nThis call can be used instead of a standard upload/download if you keep different versions of a file in multiple branches or are triggering rebuilds, and don’t want your files in Smartling to be overwritten by out-of-date versions of a file.\n\nTo use the call, you upload a file and identify the Smartling URI where the main version of that file is saved. Smartling will match strings shared between the uploaded file and the main file and return any available translations.\n",
        "tags": [
          "Files"
        ],
        "operationId": "exportFileTranslations",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Identifier for a locale.",
            "in": "path",
            "name": "localeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "description": "The file contents to upload.",
                    "type": "string",
                    "format": "binary"
                  },
                  "fileUri": {
                    "description": "The Smartling URI for a file that contains the original language strings that are already uploaded to Smartling",
                    "type": "string"
                  },
                  "retrievalType": {
                    "description": "Determines the desired format for the download. Applies to\ntranslated files only.\n\n| retrievalType | Description |\n|---------------|-------------|\n| pending | Smartling returns any translations (including non-published translations).|\n| published | Smartling returns only published/pre-published translations.|\n| pseudo | Smartling returns a modified version of the original text with certain characters transformed and the text expanded. For example, the uploaded string \"This is a sample string\", will return as \"T~hís ~ís á s~ámpl~é str~íñg\". Pseudo translations enable you to test how a longer string integrates into your application.|\n| contextMatchingInstrumented | Smartling returns a modified version of the original file with strings wrapped in a specific set of Unicode symbols that can later be recognized and matched by the Chrome Context Capture Extension.|\n",
                    "enum": [
                      "pending",
                      "published",
                      "pseudo",
                      "contextMatchingInstrumented"
                    ],
                    "type": "string"
                  },
                  "includeOriginalStrings": {
                    "description": "Specifies whether Smartling will return the original string\nor an empty string where no translation is available. This\nparameter is only supported for Android XML, gettext, Java\nproperties, custom XML, and JSON files.\n\n| Value | Description |\n|-------|-------------|\n| true | If there is no translation, Smartling returns the original string. |\n| false | If there is no translation, Smartling returns an empty string. |\n",
                    "type": "boolean"
                  }
                },
                "required": [
                  "fileUri",
                  "file"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" -F \"file=@filename.properties\" -F 'fileUri=filename.properties' 'https://api.smartling.com/files-api/v2/projects/$smartlingProjectId/locales/$smartlingLocaleId/file/get-translations'\n"
          }
        ]
      }
    },
    "/published-files-api/v2/projects/{projectId}/files/list/recently-published": {
      "get": {
        "summary": "List recently published files",
        "description": "Response is limited to files published after 14 days from the time called.\n",
        "tags": [
          "Files"
        ],
        "operationId": "getRecentlyPublishedFilesList",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Limits the response to only those files that have a ```publishDate``` date after the ```publishedAfter``` parameter. The items array can be empty if no files match this criteria.",
            "in": "query",
            "name": "publishedAfter",
            "required": true,
            "schema": {
              "format": "YYYY-MM-DDThh:mm:ssZ",
              "type": "string"
            }
          },
          {
            "description": "A list of fileUris to filter the response list by. Value must be exact match. Up to 20 fileUris can be specified. See getRecentlyUploadedSourceFilesList to get a project's fileUris.",
            "in": "query",
            "name": "fileUris[]",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "A list of locale identifiers to filter the response list by. Up to 50 localeIds can be specified. See getProjectDetails to get a project's localeIds.",
            "in": "query",
            "name": "localeIds[]",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Standard Smartling limit and offset to paginate through results. Default value is 0.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Standard Smartling limit and offset to paginate through results. Limit is not applied if this parameter is not specified.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishedFilesAPIRecentlyPublishedFilesSuccessResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "fileUri": "files/example1.json",
                              "localeId": "fr-CA",
                              "publishDate": "2019-11-21T11:51:17Z"
                            }
                          ],
                          "totalCount": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" 'https://api.smartling.com/published-files-api/v2/projects/$smartlingProjectId/files/list/recently-published?publishedAfter=2019-11-21T11:51:17Z&fileUris[]=files/example1.json&localeIds[]=fr-CA&limit=10&offset=100'\n"
          }
        ]
      }
    },
    "/context-api/v2/projects/{projectId}/contexts": {
      "post": {
        "summary": "Upload new context",
        "description": "[Visual Context](https://help.smartling.com/hc/en-us/articles/360057484273-Overview-of-Visual-Context) provides a visual representation of the source content to Translators and Editors as\nthey are performing their work, and is a very effective way to ensure high-quality translations. Visual\nContext is displayed in the Smartling CAT Tool - the environment in which translations are performed.\n\nThe following context types are supported via the Smartling API:\n\n- **HTML**: HTML files or files with content type text/html\n- **IMAGE**: Image files\n- **VIDEO**:\n  - Video file\n  - Link to video, such as:\n    - YouTube link\n    - Vimeo link\n    - Direct link to an .mp4 file\n\nContext type is not specified directly, but rather, inferred via\nanalyzing the request body.\n\nThis endpoint accepts *multipart/form-data* request body.",
        "tags": [
          "Context"
        ],
        "operationId": "uploadNewVisualContext",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Context name. Overwrites the `content`'s file name if specified.\nParameter meanings for different context types:\n\n|Context Type|Meaning|\n|----------|--------|\n| `HTML` | Context URL or file name. If a valid URL is used, all relative links to resources within the context file will be resolved based on this URL. If the file name is used, the context file should have the `<base />` tag specified with the valid URL to resolve all relative links to resources. In all other cases, links to resources will not be resolved and the context might not show correctly. Defaults to context file name if not specified. |\n| `IMAGE` | Image file name. |\n| `VIDEO` | Link to a publicly available video in case `content` field is empty. The parameter is required for this particular case. Otherwise, video file name. |\n",
                    "type": "string"
                  },
                  "content": {
                    "type": "string",
                    "format": "binary",
                    "description": "The context file to upload.\n\nIt should be one of the supported content types(user should insert content type instead of the *. E.g. image/jpeg.):\n - `image/*`\n - `text/html`\n - `video/*`\n\nMaximum file upload size is:\n - `20MB` – for HTML and image files.\n - `500MB` – for video files.\n\n**Note**: Exclude this parameter if you choose to upload a\nvideo context pointing to external MP4 file, youtube or vimeo."
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "contextType": "IMAGE",
                          "contextUid": "6e66fe6b-b508-4849-9e65-1e502d65755d",
                          "created": "2017-05-03T20:47:38Z",
                          "name": "image.png"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "data": {
                          "errors": [
                            {
                              "key": "wrong_parameters",
                              "message": "Check request parameters, error message - 'Content stream is required for this context.', ref id: 'af4706d9-c5c1-40aa-93e4-1ec3498c1f05'"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -F \"content=@context1.png;type=image/png\" -F \"name=context1.png\" \"https://api.smartling.com/context-api/v2/projects/$smartlingProjectId/contexts\"\n"
          }
        ]
      },
      "get": {
        "summary": "List contexts for the project",
        "description": "Returns a paginated list of metadata for all contexts in a project.\n\nResponse is limited to *100* items, to retrieve all items the request\nshould be repeated with **offset** parameter specified.\n",
        "tags": [
          "Context"
        ],
        "operationId": "getVisualContextsListByProject",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Context name (or url) filter.",
            "in": "query",
            "name": "nameFilter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If your original request returns an *offset* value, the set of results is incomplete.\nRun the request again, with the given offset value to see more results.\nWhen offset is null, there are no more results to return.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Context type filter.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": [
                "IMAGE",
                "HTML",
                "VIDEO"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextListResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "contextType": "IMAGE",
                              "contextUid": "6e66fe6b-b508-4849-9e65-1e502d65755d",
                              "created": "2016-12-19T17:28:29Z",
                              "name": "image.png"
                            },
                            {
                              "contextType": "IMAGE",
                              "contextUid": "ac79677f-0e0a-4d01-b4e3-b94e2e6ba09c",
                              "created": "2016-11-11T13:23:32Z",
                              "name": "image-context.jpg"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/context-api/v2/projects/{projectId}/contexts/{contextUid}": {
      "get": {
        "summary": "Get context info",
        "description": "Retrieves basic information about the context.",
        "tags": [
          "Context"
        ],
        "operationId": "getVisualContextInfo",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of a context",
            "in": "path",
            "name": "contextUid",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "contextType": "VIDEO",
                          "contextUid": "6e66fe6b-b508-4849-9e65-1e502d65755d",
                          "created": "2017-05-03T20:47:38Z",
                          "name": "http://custom-video-hosting.com/path/to/video.mp4"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "404": {
            "description": "Context not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "NOT_FOUND_ERROR",
                        "errors": [
                          {
                            "key": "not_found_error",
                            "message": "Context not found, ref id: '9d0f96fa-9969-487f-8cfd-639b41d9c9ec'"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      },
      "delete": {
        "summary": "Delete the context",
        "description": "Deletes the context metadata and the content.\nAll linked context resources (e.g. CSS, images, and fonts) will also eventually be cleaned up if no other context has them linked.\nAs well, bindings of this context to strings are removed, and strings are marked as having no context.",
        "tags": [
          "Context"
        ],
        "operationId": "deleteVisualContext",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of a context",
            "in": "path",
            "name": "contextUid",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "response"
                  ],
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": null
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "404": {
            "description": "Context not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "NOT_FOUND_ERROR",
                        "errors": [
                          {
                            "key": "not_found_error",
                            "message": "Context not found, ref id: 'ffd90ec4-5ca8-4720-8ecf-15dce3404823'"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/context-api/v2/projects/{projectId}/contexts/remove/async": {
      "post": {
        "summary": "Delete contexts",
        "description": "Initiates an asynchronous process to delete the contexts.\nAll linked context resources (e.g. CSS, images, and fonts) will also eventually be cleaned up if no other context has them linked.\nAs well, bindings of these contexts to strings are removed, and strings are marked as having no context.",
        "tags": [
          "Context"
        ],
        "operationId": "deleteVisualContextsAsync",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteContextsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncProcessResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "processUid": "ffd90ec4-5ca8-4720-8ecf-15dce3404823"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/context-api/v2/projects/{projectId}/contexts/{contextUid}/content": {
      "get": {
        "summary": "Download context file content",
        "description": "Returns the context content:\n\n|Context Type|Content|\n|---------|--------|\n|`HTML`|HTML document enriched with `data-sl-anchor` attributes for most of the elements, also known as *binding anchors*.|\n|`IMAGE`| Binary image data. Response is accompanied with appropriate `Content-Type` header.|\n|`VIDEO`| Empty response.|",
        "tags": [
          "Context"
        ],
        "operationId": "downloadVisualContextFileContent",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of a context",
            "in": "path",
            "name": "contextUid",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/html": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "response": {
                    "value": "<html>\n  <head>\n    <title>Document title</title>\n  </head>\n  <body>\n    <div data-sl-anchor=\"11\">html file contents</div>\n  </body>\n</html>"
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "404": {
            "description": "Context not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "NOT_FOUND_ERROR",
                        "errors": [
                          {
                            "key": "not_found_error",
                            "message": "Context not found, ref id: 'ffd90ec4-5ca8-4720-8ecf-15dce3404823'"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/context-api/v2/projects/{projectId}/contexts/{contextUid}/match/async": {
      "post": {
        "summary": "Run automatic context matching",
        "description": "Automatically matches context against strings in the project and creates corresponding bindings.\nOptionally, you can restrict matching to only a set of strings that you specify to ensure that no unwanted\nbindings are created.\n\nThe following endpoint does not support video contexts pointing to Youtube or Vimeo videos.\n\nOptical Character Recognition (OCR) is used for `IMAGE` and `VIDEO` contexts, while `HTML` context uses an approximate string matching algorithm.\n\nThis is a convenient method provided to save time and complexity in your integration.\nAlthough that our OCR functionality is advanced, it cannot match 100% of strings. If you need complete context coverage,\nuse either [Create string to context bindings](/#operation/createStringToContextBindings) endpoint to bind\nstrings manually or check your image contexts in the Smartling Dashboard after\nrunning this request to fill in any blanks. Note that OCR quality may be lower if you are using an unusual or\nscript-like font.\n\nApplying this operation to a video context, keep in mind the original context will be removed\nand image contexts will be created instead for each frame that has one matched string at least.\nA string can't be bound to multiple frames simultaneously.",
        "tags": [
          "Context"
        ],
        "operationId": "runAutomaticContextMatching",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of a context",
            "in": "path",
            "name": "contextUid",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchParams"
              }
            }
          },
          "description": "To ensure context is mapped to the correct string, `stringHashcodes`, `contentFileUri` or `translationJobUids` must be specified.\nIf none of `stringHashcodes`, `contentFileUri`, `translationJobUids` are specified, **all strings from the project** will be included in the match.\n<br/>\nIf `overrideContextOlderThanDays` is not specified, **strings with context will not be bound to this context**."
        },
        "responses": {
          "202": {
            "description": "ACCEPTED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncMatchResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "processUid": "ffd90ec4-5ca8-4720-8ecf-15dce3404823"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "wrong_parameters",
                            "message": "Check request parameters, error message - 'Context with Uid=cb081827-2daa-4611-915c-4d207829be27 doesn't exist', ref id: '11f8b832-8154-4e6e-a196-a69a88009736'"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/context-api/v2/projects/{projectId}/contexts/upload-and-match-async": {
      "post": {
        "summary": "Upload new context and run automatic context matching",
        "description": "Combines two endpoints:\n- [Upload new context](/#operation/uploadNewVisualContext)\n- [Run automatic context matching](/#operation/runAutomaticContextMatching)\n\nThe following context types are supported via the Smartling API:\n\n- **HTML**: HTML files or files with content type text/html\n- **IMAGE**: Image files\n- **VIDEO**:\n  - Video file\n  - Link to video, such as:\n    - YouTube link\n    - Vimeo link\n    - Direct link to an .mp4 file\n\nStrings to match are retrieved from the project specified by the `projectId` and\ncan be filtered further by the optional `matchParams` parameter.\n\nIf the uploaded file doesn't match any string, the context may not be created.\n\nExample of the raw request accepted by this API:\n```\nContent-Type: multipart/form-data; boundary\n----------------------------293641908835402749402839\nContent-Disposition: form-data; name=\"content\"; filename=\"example.html\"\nContent-Type: text/html\n<html>\n  <body>\n    <div> bla</div>\n  </body>\n</html>\n----------------------------293641908835402749402839\nContent-Disposition: form-data; name=\"name\"\nhttps://your.domain.com/path/example.html\n----------------------------293641908835402749402839\nContent-Disposition: form-data; name=\"matchParams\"\nContent-Type: application/json\n{\n  \"contentFileUri\":\"example.properties\",\n  \"stringHashcodes\": [],\n  \"overrideContextOlderThanDays\": 1\n}\n```",
        "tags": [
          "Context"
        ],
        "operationId": "uploadAndMatchVisualContext",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Context name. Will overwrites the `content`'s file name if specified.\nParameter meanings for different context types:\n\n|Context Type|Meaning|\n|----------|--------|\n| `HTML` | Context URL or file name. If a valid URL is used, all relative links to resources within the context file will be resolved based on this URL. If the file name is used, the context file should have the `<base />` tag specified with the valid URL to resolve all relative links to resources. In all other cases, links to resources will not be resolved and the context might not show correctly. Defaults to context file name if not specified. |\n| `IMAGE` | Image file name. |\n| `VIDEO` | Link to a publicly available video in case `content` field is empty. The parameter is required for this particular case. Otherwise, video file name. |\n",
                    "type": "string"
                  },
                  "matchParams": {
                    "$ref": "#/components/schemas/MatchParams"
                  },
                  "content": {
                    "type": "string",
                    "format": "binary",
                    "description": "The context file to upload.\n\nIt should be one of the supported content types(user should insert content type instead of the *. E.g. image/jpeg.):\n - `image/*`\n - `text/html`\n - `video/*`\n\nMaximum file upload size is:\n - `20MB` – for HTML and image files.\n - `500MB` – for video files.\n\n**Note**: Exclude this parameter if you choose to upload a\nvideo context pointing to external MP4 file, youtube or vimeo."
                  }
                },
                "type": "object",
                "required": [
                  "content"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "ACCEPTED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncMatchResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "processUid": "ffd90ec4-5ca8-4720-8ecf-15dce3404823"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "data": {
                          "errors": [
                            {
                              "key": "wrong_parameters",
                              "message": "Check request parameters, error message - 'Content stream is required for this context.', ref id: 'af4706d9-c5c1-40aa-93e4-1ec3498c1f05'"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/context-api/v2/projects/{projectId}/match/{matchId}": {
      "get": {
        "summary": "Retrieve asynchronous match results",
        "description": "Check the status of the match request and get results once the match is completed.\nWhen the match has been completed, any newly created bindings are also returned in the response.\nThis endpoint is deprecated and will be deleted. We recommend to use `Retrieve asynchronous process results` endpoint",
        "deprecated": true,
        "tags": [
          "Context"
        ],
        "operationId": "getAsyncContextMatchResults",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Identifier of the match request obtained when running asynchronous match request.",
            "in": "path",
            "name": "matchId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncMatchStatsResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "bindings": [
                            {
                              "anchors": [
                                "11",
                                "custom.anchor"
                              ],
                              "bindingUid": "a9308883-30c7-4832-a023-6c3b10f6f9b1",
                              "contextUid": "428bf090-60fa-473d-ac07-4a551aa06c47",
                              "stringHashcode": "374825f7d147fb5700f23b2b22d6660d"
                            },
                            {
                              "anchors": [
                                "12"
                              ],
                              "bindingUid": "a9308883-30c7-4832-a023-6c3b10f6f9b1",
                              "contextUid": "428bf090-60fa-473d-ac07-4a551aa06c47",
                              "stringHashcode": "374825f7d147fb5700f23b2b22d6660d"
                            }
                          ],
                          "createdDate": "2017-05-05T19:06:22Z",
                          "matchId": "a9308883-30c7-4832-a023-6c3b10f6f9b1",
                          "modifiedDate": "2017-05-05T19:06:22Z",
                          "status": "COMPLETED"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "404": {
            "description": "Match request expired or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "NOT_FOUND_ERROR",
                        "errors": [
                          {
                            "key": "not_found",
                            "message": "Match not found"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/context-api/v2/projects/{projectId}/processes/{processUid}": {
      "get": {
        "summary": "Retrieve asynchronous process results",
        "description": "Check the status of the asynchronous process and get the results once the process is completed",
        "tags": [
          "Context"
        ],
        "operationId": "getAsyncProcessResults",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Identifier of the asynchronous process obtained when running asynchronous request.",
            "in": "path",
            "name": "processUid",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncProcessResultResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "processUid": "00000000-0000-0000-0000-000000000000",
                          "processState": "COMPLETED",
                          "processType": "MATCH_CONTEXT",
                          "createdDate": "2021-01-01T12:00:00Z",
                          "modifiedDate": "2021-01-01T12:30:00Z",
                          "result": {
                            "contextUid": "11111111-1111-1111-1111-111111111111",
                            "checkedStringsCount": 50,
                            "bindings": [
                              {
                                "bindingUid": "22222222-2222-2222-2222-222222222222",
                                "contextUid": "11111111-1111-1111-1111-111111111111",
                                "stringHashcode": "4444444444444444444444444444444a",
                                "coordinates": {
                                  "top": 461,
                                  "left": 432,
                                  "height": 28,
                                  "width": 90
                                }
                              },
                              {
                                "bindingUid": "33333333-3333-3333-3333-333333333333",
                                "contextUid": "11111111-1111-1111-1111-111111111111",
                                "stringHashcode": "5555555555555555555555555555555b",
                                "anchors": [
                                  "123",
                                  "custom.anchor"
                                ]
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "404": {
            "description": "Process request expired or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "NOT_FOUND_ERROR",
                        "errors": [
                          {
                            "key": "not_found",
                            "message": "Asynchronous process not found"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/context-api/v2/projects/{projectId}/bindings": {
      "post": {
        "summary": "Create string to context bindings",
        "description": "Link context files with the strings they contain.\n\nThe binding tells Smartling to show Translators which context images for which strings.\n\nA basic bindings request should contain an object with a `bindings` JSON array, with at least one element (binding) featuring `contextUid` and `stringHashcode` properties:\n```JSON\n{\n  \"bindings\": [\n    {\n       \"contextUid\": \"25137b65-e075-4341-8362-14b1a3e558f5\",\n       \"stringHashcode\": \"bd603147d945h3ec74d6874422ebe4e0\"\n    }\n  ]\n}\n```\n\nFor `IMAGE` context, each binding may have additional `coordinates` data that specifies a rectangular area where the string is located in the image. If not specified, binding will still be created with coordinates `[0,0,0,0]`:\n```JSON\n{\n  \"bindings\": [\n    {\n       \"contextUid\": \"25137b65-e075-4341-8362-14b1a3e558f5\",\n       \"stringHashcode\": \"bd603147d945h3ec74d6874422ebe4e0\",\n       \"coordinates\": {\n          \"top\": 50,\n          \"left\": 50,\n          \"width\": 400,\n          \"height\": 400\n       }\n    }\n  ]\n}\n```\n\nFor `HTML` context, each binding may have the `selector` element with `anchors` array, specifying the enclosing the string HTML elements with the corresponding value of the `data-sl-anchor` attribute.\nEach `anchor` value can have up to 20 characters and consist of the following characters: `0-9` (more preferably), `A-Z`, `a-z`, `.-_`.\nIf not specified, binding will still be created with the empty `anchors` array, effectively making it not anchored to a particular element and thus invisible in CAT Tool:\n```JSON\n{\n  \"bindings\": [\n    {\n       \"contextUid\": \"25137b65-e075-4341-8362-14b1a3e558f5\",\n       \"stringHashcode\": \"bd603147d945h3ec74d6874422ebe4e0\",\n       \"selector\": {\n          \"anchors\": [\"11\", \"22\", \"aa-33\"]\n       }\n    }\n  ]\n}\n```\n\nFor `VIDEO` context, each binding has the `timecode` data, specifying the start and end time of the string appearance in the video:\n```JSON\n{\n  \"bindings\": [\n    {\n        \"contextUid\": \"25137b65-e075-4341-8362-14b1a3e558f5\",\n        \"stringHashcode\": \"bd603147d945h3ec74d6874422ebe4e0\",\n        \"timecode\": {\n           \"startTime\": 1203,\n           \"endTime\": 1450\n        }\n    }\n  ]\n}\n```",
        "tags": [
          "Context"
        ],
        "operationId": "createStringToContextBindings",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BindingsRequest"
              }
            }
          },
          "description": "String-to-context bindings",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "created": {
                            "items": [
                              {
                                "bindingUid": "d6414f8c-4gdf-4415-9a69-f8e7902ca9ec",
                                "contextUid": "25137b65-e075-4341-8362-14b1a3e558f5",
                                "stringHashcode": "bd603147d945h3ec74d6874422ebe4e0",
                                "anchors": [
                                  "11"
                                ],
                                "contextPosition": 11,
                                "coordinates": {
                                  "bottom": 400,
                                  "left": 50,
                                  "right": 400,
                                  "top": 50
                                },
                                "timecode": {
                                  "startTime": 0,
                                  "endTime": 1000
                                }
                              }
                            ],
                            "totalCount": 1
                          },
                          "errors": {
                            "items": [
                              {
                                "message": "error message one"
                              },
                              {
                                "message": "error message two"
                              }
                            ],
                            "totalCount": 2
                          }
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CreateBindingsResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "wrong_parameters",
                            "message": "Please, limit number of bindings to no more than 150 in one request"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/context-api/v2/projects/{projectId}/bindings/list": {
      "post": {
        "summary": "List string to context bindings",
        "description": "Returns a paginated list of bindings according to specified parameters.\n\nResponse is limited to *5000* items, to retrieve all items the request\nshould be repeated with **offset** parameter specified.",
        "tags": [
          "Context"
        ],
        "operationId": "getBindings",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "If your original request returns an *offset* value, the set of results is incomplete.\nRun the request again, with the given offset value to see more results.\nWhen offset is null, there are no more results to return.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchBindingsRequest"
              }
            }
          },
          "description": "Search bindings parameters. Only on of them should be specified.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BindingListResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "wrong_parameters",
                            "message": "Please, limit number of bindings to no more than 150 in one request"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/context-api/v2/projects/{projectId}/bindings/remove": {
      "post": {
        "summary": "Delete string to context bindings",
        "description": "Delete bindings for specified parameters.",
        "tags": [
          "Context"
        ],
        "operationId": "deleteBindings",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteBatchBindingsRequest"
              }
            }
          },
          "description": "Bindings delete parameter. Only on of them should be specified.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "wrong_parameters",
                            "message": "Please, limit number of bindings to no more than 150 in one request"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/issues-api/v2/dictionary/issue-states": {
      "get": {
        "summary": "Get issue states",
        "description": "This request returns all current allowed states. Currently, the only allowed issue states are `OPENED` and `RESOLVED`. However, in the future, Smartling may introduce additional states.",
        "tags": [
          "Issues"
        ],
        "operationId": "getAllIssuesStates",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "description": "Opened",
                              "issueStateCode": "OPENED"
                            },
                            {
                              "description": "Resolved",
                              "issueStateCode": "RESOLVED"
                            }
                          ],
                          "totalCount": 2
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueStatesResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/issues-api/v2/dictionary/issue-states\n"
          }
        ]
      }
    },
    "/issues-api/v2/dictionary/issue-severity-levels": {
      "get": {
        "summary": "Get issue severity levels",
        "description": "Returns a list of issue severity levels.",
        "tags": [
          "Issues"
        ],
        "operationId": "getAllIssueSeverityLevels",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueSeverityLevelsResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "description": "Low",
                              "issueSeverityLevelCode": "LOW"
                            },
                            {
                              "description": "Medium",
                              "issueSeverityLevelCode": "MEDIUM"
                            },
                            {
                              "description": "High",
                              "issueSeverityLevelCode": "HIGH"
                            }
                          ],
                          "totalCount": 3
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/issues-api/v2/dictionary/issue-severity-levels\n"
          }
        ]
      }
    },
    "/issues-api/v2/accounts/{accountUid}/issue-types": {
      "get": {
        "summary": "Get account issue types",
        "description": "This request returns all current issue types for a specific account. Smartling may occasionally add or change the list of allowed issue types.",
        "tags": [
          "Issues"
        ],
        "operationId": "getIssueTypesByAccount",
        "parameters": [
          {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "accountUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountIssueTypesResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "description": "Source",
                              "issueTypeCode": "SOURCE",
                              "subTypes": [
                                {
                                  "description": "Clarification",
                                  "issueSubTypeCode": "CLARIFICATION"
                                },
                                {
                                  "description": "Misspelling",
                                  "issueSubTypeCode": "MISSPELLING"
                                }
                              ]
                            },
                            {
                              "description": "Translation",
                              "issueTypeCode": "TRANSLATION",
                              "subTypes": [
                                {
                                  "description": "Poor translation",
                                  "issueSubTypeCode": "POOR_TRANSLATION"
                                },
                                {
                                  "description": "Doesn't fit the space",
                                  "issueSubTypeCode": "DOES_NOT_FIT_SPACE"
                                },
                                {
                                  "description": "Placeholder issue",
                                  "issueSubTypeCode": "PLACEHOLDER_ISSUE"
                                },
                                {
                                  "description": "Review translation",
                                  "issueSubTypeCode": "REVIEW_TRANSLATION"
                                },
                                {
                                  "description": "MT Error",
                                  "issueSubTypeCode": "MT_ERROR"
                                }
                              ]
                            }
                          ],
                          "totalCount": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/issues-api/v2/accounts/$smartlingAccountId/issue-types\n"
          }
        ]
      }
    },
    "/issues-api/v2/projects/{projectId}/issues": {
      "post": {
        "summary": "Create issue",
        "description": "Creates a new issue for a string. Issue text is treated as plain text. Smartling will save the text as provided, and will not attempt to render this text with any special formatting in its UIs. It will not be rendered as HTML or markdown. Users of the Issues API should be aware, and escape the text as needed before attempting to render it. Maximum length is 4000 characters.",
        "tags": [
          "Issues"
        ],
        "operationId": "createIssue",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New issue for a string",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateIssueResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "answered": false,
                          "createdDate": "2015-11-10T16:01:22Z",
                          "issueSeverityLevelCode": "LOW",
                          "issueStateCode": "OPENED",
                          "issueSubTypeCode": "CLARIFICATION",
                          "issueText": "asdfsd",
                          "issueTypeCode": "SOURCE",
                          "issueUid": "dceaa996d417",
                          "projectId": "e8fa915fa",
                          "accountUid": "2sadsa3se",
                          "issueNumber": 34,
                          "reportedByUserUid": "661801f19693",
                          "string": {
                            "hashcode": "c32c16cddafd63dfa0dc12449372a093"
                          },
                          "issueCommentsCount": 0,
                          "assigneeUserUid": "7c9ff09e71b2",
                          "reopened": false,
                          "reopenedByUserUid": null,
                          "reopenedDate": null
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingIssueTemlateJSON\" https://api.smartling.com/issues-api/v2/projects/$smartlingProjectId/issues\n"
          }
        ]
      }
    },
    "/issues-api/v2/projects/{projectId}/issues/{issueUid}/issueText": {
      "put": {
        "summary": "Edit issue",
        "description": "Replaces the text of an issue with new text.\n\n**Note**: Only the author of the issue can perform this action. The `issueTextModifiedDate` property of an issue object shows when it was last updated.\n\nIssue text is treated as plain text. Smartling will save the text as provided and will not attempt to render this text with any special formatting in its UIs; it will not be rendered as HTML or markdown. When using the Issues API, you should escape the text as needed before attempting to render it. Maximum length is 4000 characters.",
        "tags": [
          "Issues"
        ],
        "operationId": "editIssue",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding issue.",
            "in": "path",
            "name": "issueUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueTextRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "issueText": "Edited issue text.",
                          "issueTextModifiedDate": "2015-11-10T16:01:22Z"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueTextResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingIssueTextJSON\" https://api.smartling.com/issues-api/v2/projects/$smartlingProjectId/issues/$issueUid/issueText\n"
          }
        ]
      }
    },
    "/issues-api/v2/projects/{projectId}/issues/{issueUid}/state": {
      "put": {
        "summary": "Open or close issue",
        "description": "The state of an issue. Accepted values are `OPENED` or `RESOLVED`.",
        "tags": [
          "Issues"
        ],
        "operationId": "openOrCloseIssue",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding issue.",
            "in": "path",
            "name": "issueUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueStateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "issueStateCode": "RESOLVED",
                          "reopened": false
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueStateResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingIssueStateJSON\" https://api.smartling.com/issues-api/v2/projects/$smartlingProjectId/issues/$issueUid/state\n"
          }
        ]
      }
    },
    "/issues-api/v2/projects/{projectId}/issues/{issueUid}": {
      "get": {
        "summary": "Get issue details",
        "description": "Returns detailed information of a single issue.\n\n**Note**: The `resolvedByUserUid` and `reportedByUserUid` values are not currently usable for identifying the users who created or resolved issues. In the future, a People API will be exposed for looking up user details.",
        "tags": [
          "Issues"
        ],
        "operationId": "getIssueDetails",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding issue",
            "in": "path",
            "name": "issueUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "answered": false,
                          "createdDate": "2015-11-10T16:01:22Z",
                          "issueSeverityLevelCode": "LOW",
                          "issueStateCode": "OPENED",
                          "issueSubTypeCode": "POOR_TRANSLATION",
                          "issueText": "This translation is incorrect. Please fix.",
                          "issueTypeCode": "TRANSLATION",
                          "issueUid": "dceaa996d417",
                          "projectId": "e8fa915fa",
                          "accountUid": "dqsd4r5vr",
                          "issueNumber": 53,
                          "reportedByUserUid": "661801f19693",
                          "string": {
                            "hashcode": "c32c16cddafd63dfa0dc12449372a093",
                            "localeId": "ru-RU"
                          },
                          "issueCommentsCount": 5,
                          "assigneeUserUid": "661801f19693",
                          "reopened": true,
                          "reopenedByUserUid": "661801f19693",
                          "reopenedDate": "2015-11-10T16:01:22Z"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueGetResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/issues-api/v2/projects/$smartlingProjectId/issues/$issueUid\n"
          }
        ]
      }
    },
    "/issues-api/v2/projects/{projectId}/issues/{issueUid}/answered": {
      "put": {
        "summary": "Update issue attribute (answered)",
        "description": "Update issue attribute (answered). \"Answered\" is a boolean; (true/false).",
        "tags": [
          "Issues"
        ],
        "operationId": "updateIssueAnsweredStatus",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding issue.",
            "in": "path",
            "name": "issueUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueAnsweredRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "answered": true
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueAnsweredResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingIssueAnsweredJSON\" https://api.smartling.com/issues-api/v2/projects/$smartlingProjectId/issues/$issueUid/answered\n"
          }
        ]
      }
    },
    "/issues-api/v2/projects/{projectId}/issues/{issueUid}/assignee": {
      "put": {
        "summary": "Update issue attribute (assigneeUserUid)",
        "description": "Update issue attribute (assigneeUserUid). \"assigneeUserUid\" is a string.",
        "tags": [
          "Issues"
        ],
        "operationId": "updateIssueAssignee",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding issue.",
            "in": "path",
            "name": "issueUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueAssigneeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "assigneeUserUid": "661801f19693"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueAssigneeResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingIssueAssigneeJSON\" https://api.smartling.com/issues-api/v2/projects/$smartlingProjectId/issues/$issueUid/assignee\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete issue attribute (assigneeUserUid)",
        "description": "Delete issue attribute (assigneeUserUid). \"assigneeUserUid\" is a string.",
        "tags": [
          "Issues"
        ],
        "operationId": "deleteIssueAssignee",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding issue.",
            "in": "path",
            "name": "issueUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueAssigneeDeleteResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          },
          "x-code-samples": [
            {
              "lang": "curl",
              "source": "curl -X DELETE -H \"Authorization: Bearer $smartlingToken\" - https://api.smartling.com/issues-api/v2/projects/$smartlingProjectId/issues/$issueUid/assignee\n"
            }
          ]
        }
      }
    },
    "/issues-api/v2/projects/{projectId}/issues/{issueUid}/severity-level": {
      "put": {
        "summary": "Update issue attribute (severity level)",
        "description": "Update issue attribute (severity level) (LOW / MEDIUM / HIGH)",
        "tags": [
          "Issues"
        ],
        "operationId": "updateIssueSeverityLevel",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding issue.",
            "in": "path",
            "name": "issueUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueSeverityLevelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "issueSeverityLevelCode": "LOW"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueSeverityLevelResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingSeverityLevelJSON\" https://api.smartling.com/issues-api/v2/projects/$smartlingProjectId/issues/$issueUid/severity-level\n"
          }
        ]
      }
    },
    "/issues-api/v2/projects/{projectId}/issues/{issueUid}/change-type": {
      "put": {
        "summary": "Update issue attribute (issue type)",
        "description": "Update issue attribute (issue type) (SOURCE / TRANSLATION)",
        "tags": [
          "Issues"
        ],
        "operationId": "updateIssueType",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding issue.",
            "in": "path",
            "name": "issueUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueChangedTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "issueTypeCode": "TRANSLATION",
                          "issueSubTypeCode": "POOR_TRANSLATION",
                          "localeId": "ru-RU"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueChangedTypeResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingSeverityLevelJSON\" https://api.smartling.com/issues-api/v2/projects/$smartlingProjectId/issues/$issueUid/change-type\n"
          }
        ]
      }
    },
    "/issues-api/v2/projects/{projectId}/issues/{issueUid}/comments": {
      "get": {
        "summary": "Get comments",
        "description": "Returns all comments on an issue.\n\n**Note**: The `createdByUserUid` value is not currently usable for identifying the users who created comments. In the future, a People API will be exposed for looking up user details.",
        "tags": [
          "Issues"
        ],
        "operationId": "getIssueComments",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding issue",
            "in": "path",
            "name": "issueUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "commentText": "comment text",
                              "createdByUserUid": "661801f19693",
                              "createdDate": "2015-12-22T12:34:49Z",
                              "issueCommentUid": "a75fea779bbb"
                            }
                          ],
                          "totalCount": 1
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueCommentsGetResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/issues-api/v2/projects/$smartlingProjectId/issues/$issueUid/comments\n"
          }
        ]
      },
      "post": {
        "summary": "Create comment",
        "description": "Create a comment for an issue. Comment text is treated as plain text. Smartling will save the text as provided, and will not attempt to render this text with any special formatting in its UIs. It will not be rendered as HTML or markdown. If you're using the Issues API, escape the text as needed before attempting to render it. Maximum length is 4000 characters.",
        "tags": [
          "Issues"
        ],
        "operationId": "addIssueComment",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding issue",
            "in": "path",
            "name": "issueUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "commentText": "comment text",
                          "createdByUserUid": "661801f19693",
                          "createdDate": "2015-12-22T12:34:49Z",
                          "issueCommentUid": "a75fea779bbb"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueCommentAddResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingIssueCommentJSON\" https://api.smartling.com/issues-api/v2/projects/$smartlingProjectId/issues/$issueUid/comments\n"
          }
        ]
      }
    },
    "/issues-api/v2/projects/{projectId}/issues/{issueUid}/comments/{issueCommentUid}": {
      "post": {
        "summary": "Edit comment text",
        "description": "Replaces the text of an issue with new text.\n\n**Note**: Only the author of an issue can perform this action. The `commentTextModifiedDate` property of an issue object shows when it was last updated.\n\nComment text is treated as plain text. Smartling will save the text as provided and will not attempt to render this text with any special formatting in its UIs. It will not be rendered as HTML or markdown. If you're using the Issues API, escape the text as needed before attempting to render it. Maximum length is 4000 characters.",
        "tags": [
          "Issues"
        ],
        "operationId": "updateIssueComment",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding issue.",
            "in": "path",
            "name": "issueUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding issue commment.",
            "in": "path",
            "name": "issueCommentUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "commentText": "comment text",
                          "commentTextModifiedDate": "2016-12-22T12:34:49Z",
                          "createdByUserUid": "661801f19693",
                          "createdDate": "2015-12-22T12:34:49Z",
                          "issueCommentUid": "a75fea779bbb"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueCommentEditResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingIssueCommentJSON\" https://api.smartling.com/issues-api/v2/projects/$smartlingProjectId/issues/$issueUid/comments/$issueCommentUid\n"
          }
        ]
      },
      "get": {
        "summary": "Get comment details",
        "description": "Returns detailed information on a single issue comment.\n\n**Note**: The `createdByUserUid` value is not currently usable for identifying the users who created comments. In the future, a People API will be exposed for looking up user details.",
        "tags": [
          "Issues"
        ],
        "operationId": "getIssueCommentDetails",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding issue.",
            "in": "path",
            "name": "issueUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding issue comment.",
            "in": "path",
            "name": "issueCommentUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "commentText": "test comment",
                          "createdByUserUid": "661801f19693",
                          "createdDate": "2015-12-22T11:54:27Z",
                          "issueCommentUid": "ac5211a26eca"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueCommentGetResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/issues-api/v2/projects/$smartlingProjectId/issues/$issueUid/comments/$issueCommentUid\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete comment",
        "description": "Delete comment.\n\n**Note**: The author of the issue comment, account owner and project manager can perform this action.",
        "tags": [
          "Issues"
        ],
        "operationId": "deleteIssueComment",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding issue.",
            "in": "path",
            "name": "issueUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding issue commment.",
            "in": "path",
            "name": "issueCommentUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueCommentDeleteResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X DELETE -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/issues-api/v2/projects/$smartlingProjectId/issues/$issueUid/comments/$issueCommentUid\n"
          }
        ]
      }
    },
    "/issues-api/v2/projects/{projectId}/issues/list": {
      "post": {
        "summary": "Find project issues",
        "description": "Returns a list of issues matching specified filter options. You can filter based on the date issues were created, target languages, strings, issue types, states, issue numbers, job unique ids, issues not associated with strings in a job, issue assignee, and which user opened the issue. Unless otherwise specified, the request will return a maximum of 30 results. All parameters are optional.",
        "tags": [
          "Issues"
        ],
        "operationId": "getProjectIssuesList",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuesFindResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "answered": false,
                              "createdDate": "2015-12-21T16:38:48Z",
                              "issueSeverityLevelCode": "LOW",
                              "issueStateCode": "OPENED",
                              "issueSubTypeCode": "DOES_NOT_FIT_SPACE",
                              "issueText": "does not fit space",
                              "issueTypeCode": "TRANSLATION",
                              "issueUid": "902372ac8e1e",
                              "projectId": "e8fa915fa",
                              "accountUid": "e3e3d44r5d",
                              "issueNumber": 32,
                              "reportedByUserUid": "661801f19693",
                              "assigneeUserUid": "661801f19693",
                              "string": {
                                "hashcode": "c32c16cddafd63dfa0dc12449372a093",
                                "localeId": "ru-RU"
                              },
                              "issueCommentsCount": 4,
                              "reopened": true,
                              "reopenedByUserUid": "661801f19693",
                              "reopenedDate": "2015-12-21T16:38:48Z"
                            }
                          ]
                        },
                        "totalCount": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingIssuesFilterJSON\" https://api.smartling.com/issues-api/v2/projects/$smartlingProjectId/issues/list\n"
          }
        ]
      }
    },
    "/issues-api/v2/projects/{projectId}/issues/count": {
      "post": {
        "summary": "Count project issues",
        "description": "Returns a count of issues matching specified filter options. You can filter based on the date issues were created, strings, target languages, issue types, states, issue numbers, job unique ids, issues not associated with strings in a job, issue assignee, and which user opened the issue. All parameters are optional.",
        "tags": [
          "Issues"
        ],
        "operationId": "getIssuesCount",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "count": 2
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssuesCountResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingIssuesFilterJSON\" https://api.smartling.com/issues-api/v2/projects/$smartlingProjectId/issues/count\n"
          }
        ]
      }
    },
    "/issues-api/v2/accounts/{accountUid}/issues/list": {
      "post": {
        "summary": "Find account issues",
        "description": "Returns a list of issues matching specified filter options. You can filter based on the date issues were created, target languages, strings, issue types, states, issue numbers, project ids, job unique ids, issues not associated with strings in a job, issue assignee, and which user opened the issue. Unless otherwise specified, the request will return a maximum of 30 results. All parameters are optional.",
        "tags": [
          "Issues"
        ],
        "operationId": "getAccountIssuesList",
        "parameters": [
          {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "accountUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindAccountIssuesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuesFindResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "answered": false,
                              "createdDate": "2015-12-21T16:38:48Z",
                              "issueSeverityLevelCode": "LOW",
                              "issueStateCode": "OPENED",
                              "issueSubTypeCode": "DOES_NOT_FIT_SPACE",
                              "issueText": "does not fit space",
                              "issueTypeCode": "TRANSLATION",
                              "issueUid": "902372ac8e1e",
                              "projectId": "e8fa915fa",
                              "accountUid": "e3e3d44r5d",
                              "issueNumber": 32,
                              "reportedByUserUid": "661801f19693",
                              "assigneeUserUid": "661801f19693",
                              "string": {
                                "hashcode": "c32c16cddafd63dfa0dc12449372a093",
                                "localeId": "ru-RU"
                              },
                              "issueCommentsCount": 4,
                              "reopened": true,
                              "reopenedByUserUid": "661801f19693",
                              "reopenedDate": "2015-12-21T16:38:48Z"
                            }
                          ],
                          "totalCount": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingIssuesFilterJSON\" https://api.smartling.com/issues-api/v2/accounts/$smartlingAccountUid/issues/list\n"
          }
        ]
      }
    },
    "/issues-api/v2/accounts/{accountUid}/issues/count": {
      "post": {
        "summary": "Count account issues",
        "description": "Returns a count of issues matching specified filter options. You can filter based on the date issues were created, target languages, strings, issue types, states, issue numbers, project ids, job unique ids, issues not associated with strings in a job, issue assignee, and which user opened the issue. All parameters are optional.",
        "tags": [
          "Issues"
        ],
        "operationId": "getAccountIssuesCount",
        "parameters": [
          {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "accountUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "count": 2
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssuesCountResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingIssuesFilterJSON\" https://api.smartling.com/issues-api/v2/accounts/$smartlingAccountUid/issues/count\n"
          }
        ]
      }
    },
    "/issues-api/v2/accounts/{accountUid}/watchers": {
      "get": {
        "summary": "List account watchers",
        "description": "Get a list of all issue watchers for the entire account.",
        "tags": [
          "Issues"
        ],
        "operationId": "getIssuesWatchersListByAccount",
        "parameters": [
          {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "accountUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Watcher email",
            "in": "query",
            "name": "email",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "limit",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "type": "number"
            }
          },
          {
            "description": "offset",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "created": "2015-12-21T16:38:48Z",
                              "email": "my@mail.com",
                              "enabled": true,
                              "modified": "2015-12-21T16:38:48Z",
                              "name": "Mike Albert",
                              "uid": "323323wsss"
                            }
                          ],
                          "totalCount": 1
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueGetWatchersResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/issues-api/v2/accounts/$smartlingAccountId/watchers\n"
          }
        ]
      },
      "post": {
        "summary": "Create watcher",
        "description": "Create a new watcher.",
        "tags": [
          "Issues"
        ],
        "operationId": "addIssuesWatcher",
        "parameters": [
          {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "accountUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatcherRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "created": "2015-12-21T16:38:48Z",
                          "email": "my@mail.com",
                          "enabled": true,
                          "modified": "2015-12-21T16:38:48Z",
                          "name": "Mike Albert",
                          "uid": "323323wsss"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueWatcherResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingIssueWatcherJSON\" https://api.smartling.com/issues-api/v2/accounts/$smartlingAccountId/watchers\n"
          }
        ]
      }
    },
    "/issues-api/v2/accounts/{accountUid}/watchers/{watcherUid}": {
      "put": {
        "summary": "Update watcher",
        "description": "Update the attributes of a watcher.",
        "tags": [
          "Issues"
        ],
        "operationId": "updateIssuesWatcher",
        "parameters": [
          {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "accountUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the corresponding watcher.",
            "in": "path",
            "name": "watcherUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatcherRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "created": "2015-12-21T16:38:48Z",
                          "email": "my@mail.com",
                          "enabled": true,
                          "modified": "2015-12-21T16:38:48Z",
                          "name": "Mike Albert",
                          "uid": "323323wsss"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueWatcherResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingIssueWatcherJSON\" https://api.smartling.com/issues-api/v2/accounts/$smartlingAccountId/watchers/$issueWatcherUid\n"
          }
        ]
      }
    },
    "/issues-api/v2/accounts/{accountUid}/projects/{projectId}/issues/{issueUid}/watchers/{watcherUid}": {
      "put": {
        "summary": "Link watcher to issue",
        "description": "Associate or assign the watcher to an issue. The watcher will then begin receiving email notifications.  Emails do not have to have access to the Smartling account to be added as a Watcher. If they have access to the account the emails include links to view the issue in the dashboard.",
        "tags": [
          "Issues"
        ],
        "operationId": "addWatcherToIssue",
        "parameters": [
          {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "accountUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding issue",
            "in": "path",
            "name": "issueUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "",
            "in": "path",
            "name": "watcherUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueWatcherAssignResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/issues-api/v2/accounts/$smartlingAccountId/projects/$smartlingProjectId/issues/$issueUid/watchers/$issueWatcherUid\n"
          }
        ]
      },
      "delete": {
        "summary": "Remove watcher from issue",
        "description": "An update to an issue is sent to the associated/linked watcher. Once watchers are removed from an issue, email notifications will no longer be received by them.",
        "tags": [
          "Issues"
        ],
        "operationId": "deleteWatcherFromIssue",
        "parameters": [
          {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "accountUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding issue",
            "in": "path",
            "name": "issueUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding watcher",
            "in": "path",
            "name": "watcherUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueWatcherDeleteResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X DELETE -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/issues-api/v2/accounts/$smartlingAccountId/projects/$smartlingProjectId/issues/$issueUid/watchers/$issueWatcherUid\n"
          }
        ]
      }
    },
    "/issues-api/v2/accounts/{accountUid}/projects/{projectId}/issues/{issueUid}/watchers": {
      "get": {
        "summary": "List watchers linked to issue",
        "description": "Get a list of watchers that are linked to the issue.",
        "tags": [
          "Issues"
        ],
        "operationId": "getWatchersListLinkedToIssue",
        "parameters": [
          {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "accountUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of corresponding issue",
            "in": "path",
            "name": "issueUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "created": "2015-12-21T16:38:48Z",
                              "email": "my@mail.com",
                              "enabled": true,
                              "modified": "2015-12-21T16:38:48Z",
                              "name": "Mike Albert",
                              "uid": "323323wsss"
                            }
                          ],
                          "totalCount": 1
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueWatcherGetListResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/issues-api/v2/accounts/$smartlingAccountId/projects/$smartlingProjectId/issues/$issueUid/watchers\n"
          }
        ]
      }
    },
    "/issues-api/v2/accounts/{accountUid}/issue-types/{issueType}/sub-types": {
      "post": {
        "summary": "Create account issue subtype",
        "description": "Create account issue subtype.",
        "tags": [
          "Issues"
        ],
        "operationId": "createAccountIssuesSubtype",
        "parameters": [
          {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "accountUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier of issue type](#operation/getIssueTypesByAccount)",
            "in": "path",
            "name": "issueType",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountIssueSubtypeModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "issueSubTypeCode": "TEST_CODE",
                          "description": "issue subtype code description"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AccountIssueSubTypeResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingAccountIssueSubTypeJSON\" https://api.smartling.com/issues-api/v2/accounts/$smartlingAccountId/issue-types/$smartlingIssueType/sub-types\n"
          }
        ]
      }
    },
    "/issues-api/v2/accounts/{accountUid}/issue-types/{issueType}/sub-types/{issueSubTypeCode}": {
      "put": {
        "summary": "Update account issue subtype description",
        "description": "Update account issue subtype description that is shown in the Smartling Dashboard UI and can be used for custom integrations to show a user friendly description of the subtype.",
        "tags": [
          "Issues"
        ],
        "operationId": "updateAccountIssuesSubtype",
        "parameters": [
          {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "accountUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier of issue type](#operation/getIssueTypesByAccount)",
            "in": "path",
            "name": "issueType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of issue subtype",
            "in": "path",
            "name": "issueSubTypeCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountIssueSubtypeDescriptionField"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "issueSubTypeCode": "TEST_CODE",
                          "description": "issue subtype code description"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AccountIssueSubTypeResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingAccountIssueSubTypeJSON\" https://api.smartling.com/issues-api/v2/accounts/$smartlingAccountId/issue-types/$smartlingIssueType/sub-types/$smartlingIssueSubTypeCode\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete account issue subtype",
        "description": "Delete account issue subtype.",
        "tags": [
          "Issues"
        ],
        "operationId": "deleteAccountIssuesSubType",
        "parameters": [
          {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "accountUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of issue type",
            "in": "path",
            "name": "issueType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of issue subtype",
            "in": "path",
            "name": "issueSubTypeCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "code": "SUCCESS"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X DELETE -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/issues-api/v2/accounts/$smartlingAccountId/issue-types/$smartlingIssueType/sub-types/$smartlingIssueSubTypeCode\n"
          }
        ]
      }
    },
    "/issues-api/v2/accounts/{accountUid}/issue-types/{issueType}/sub-types/{issueSubTypeCode}/state": {
      "put": {
        "summary": "Update account issue subtype state",
        "description": "Default for new subtypes is 'true'.  If a subtype is updated with enabled = 'false' the subtype cannot be used for new issues. Existing issues will not be affected.",
        "tags": [
          "Issues"
        ],
        "operationId": "updateAccountIssuesSubtypeState",
        "parameters": [
          {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "accountUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "[Unique identifier of issue type](#operation/getIssueTypesByAccount)",
            "in": "path",
            "name": "issueType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of issue subtype",
            "in": "path",
            "name": "issueSubTypeCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountIssueSubtypeStateField"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "enabled": true
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AccountIssueSubTypeStateResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingAccountIssueSubTypeJSON\" https://api.smartling.com/issues-api/v2/accounts/$smartlingAccountId/issue-types/$smartlingIssueType/sub-types/$smartlingIssueSubTypeCode/state\n"
          }
        ]
      }
    },
    "/issues-api/v2/accounts/{accountUid}/webhook": {
      "put": {
        "summary": "Set up issue webhooks",
        "description": "This URL is the Smartling API endpoint for receiving issue webhook setup requests.",
        "tags": [
          "Issue Webhooks"
        ],
        "operationId": "setupIssuesWebhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountUid"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setupWebhookRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "response": {
                    "code": "SUCCESS",
                    "data": {
                      "webhookUrl": "https://your.domain.com/send/webhook/here",
                      "enabled": true
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/setupWebhookResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingIssueWebhookTemlateJSON\" https://api.smartling.com/issues-api/v2/accounts/$smartlingAccountId/webhook\n"
          }
        ]
      },
      "get": {
        "summary": "Get issue webhook settings",
        "description": "This URL is the Smartling API endpoint for receiving issue webhook settings.",
        "tags": [
          "Issue Webhooks"
        ],
        "operationId": "getIssuesWebhoookSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountUid"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "response": {
                    "code": "SUCCESS",
                    "data": {
                      "webhookUrl": "https://your.domain.com/send/webhook/here",
                      "enabled": true
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/setupWebhookResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/issues-api/v2/accounts/$smartlingAccountId/webhook\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete issue webhook settings",
        "description": "This URL is the Smartling API endpoint for deleting issue webhook settings.",
        "tags": [
          "Issue Webhooks"
        ],
        "operationId": "deleteIssuesWebhookSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountUid"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/receiveWebhookResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X DELETE -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/issues-api/v2/accounts/$smartlingAccountId/webhook\n"
          }
        ]
      }
    },
    "/your.domain.com/send/webhook/here": {
      "post": {
        "summary": "Receive issue webhooks",
        "description": "This client-side API endpoint should be configured to receive issue webhooks.",
        "tags": [
          "Issue Webhooks"
        ],
        "operationId": "receiveIssueWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/issueCreatedRequest"
                  },
                  {
                    "$ref": "#/components/schemas/issueDeletedRequest"
                  },
                  {
                    "$ref": "#/components/schemas/issueStateChangedRequest"
                  },
                  {
                    "$ref": "#/components/schemas/issueAnsweredRequest"
                  },
                  {
                    "$ref": "#/components/schemas/issueSeverityLevelChangedRequest"
                  },
                  {
                    "$ref": "#/components/schemas/issueCommentAdded"
                  },
                  {
                    "$ref": "#/components/schemas/issueWatcherAdded"
                  },
                  {
                    "$ref": "#/components/schemas/issueDescriptionChanged"
                  },
                  {
                    "$ref": "#/components/schemas/issueTypeChanged"
                  },
                  {
                    "$ref": "#/components/schemas/issueSubTypeChanged"
                  },
                  {
                    "$ref": "#/components/schemas/issueLocaleChanged"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/receiveWebhookResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/issues-api/v2/dictionary/issue-types": {
      "get": {
        "summary": "Get issue types",
        "description": "This is deprecated. Instead, use this endpoint: /issues-api/v2/accounts/{accountUid}/issue-types. This request returns all current issue types. Smartling may occasionally add or change the list of allowed issue types.",
        "deprecated": true,
        "tags": [
          "Issues"
        ],
        "operationId": "getAllIssueTypes",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "description": "Source",
                              "issueTypeCode": "SOURCE",
                              "subTypes": [
                                {
                                  "description": "Clarification",
                                  "issueSubTypeCode": "CLARIFICATION"
                                },
                                {
                                  "description": "Misspelling",
                                  "issueSubTypeCode": "MISSPELLING"
                                }
                              ]
                            },
                            {
                              "description": "Translation",
                              "issueTypeCode": "TRANSLATION",
                              "subTypes": [
                                {
                                  "description": "Poor Translation",
                                  "issueSubTypeCode": "POOR_TRANSLATION"
                                },
                                {
                                  "description": "Doesn't Fit Space",
                                  "issueSubTypeCode": "DOES_NOT_FIT_SPACE"
                                },
                                {
                                  "description": "Placeholder Issue",
                                  "issueSubTypeCode": "PLACEHOLDER_ISSUE"
                                },
                                {
                                  "description": "Review translation",
                                  "issueSubTypeCode": "REVIEW_TRANSLATION"
                                },
                                {
                                  "description": "MT Error",
                                  "issueSubTypeCode": "MT_ERROR"
                                }
                              ]
                            }
                          ],
                          "totalCount": 2
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/IssueTypesResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/strings-api/v2/projects/{projectId}": {
      "post": {
        "summary": "Add strings",
        "description": "Uploads an array of strings to a Smartling project. A maximum of 100 strings can be created per request. A request with more than 100 items will return an error. Each string has a character limit of 10,000.\n\n**Note**: You cannot authorize a string via API. Once you have created the strings, they will need to be authorized by a content owner in the Smartling Dashboard.\n\nSmartling creates a unique hashcode for each string based on the parsed string text and any variant or namespace metadata provided. If you upload a string with the same text, variant and namespace, and therefore the same hashcode, the existng string will be overwritten. This will not change the text of the string, but may update other metadata, such as placeholder and callback values. If the string is currently inactive, overwriting it will cause it to be reactivated. Overwritten strings return `\"overWritten\": \"true\"` in the response object.\n\nMost uploads will return a `200` response indicating success. If processing the request takes longer than 60 seconds, a `202` request will be returned, including a `processUid` value that can be used to check on the progress of the request.\n\nIf you set up a POST callback for the string, you can automatically receive the translation for a string as soon as it is complete. See [Callbacks](https://help.smartling.com/hc/en-us/articles/1260805504109) for more details.",
        "tags": [
          "Strings"
        ],
        "operationId": "addStringsToProject",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "strings (Required)": {
                    "items": {
                      "properties": {
                        "stringText": {
                          "description": "The text of the string you want to create. This is the only required value for a string object.",
                          "type": "string"
                        },
                        "variant": {
                          "description": "Creates variant metadata for a new string.",
                          "type": "string"
                        },
                        "callbackUrl": {
                          "description": "If provided a callback request will be sent to this URL when translation for the string is complete. See our callbacks documentation for more details.",
                          "type": "string"
                        },
                        "callbackMethod": {
                          "description": "With a given callbackUrl, this defines the http method to use. See our callbacks documentation for more details.",
                          "type": "string"
                        },
                        "instruction": {
                          "description": "Creates an instruction that is displayed to translators in the Smartling Translation Interface.",
                          "type": "string"
                        },
                        "maxLength": {
                          "description": "Set the maximum character length recommended for this string and its translations.  Not specifying or setting to 'null' implies no maxLength and on update will remove any existing maxLegnth.",
                          "type": "number"
                        },
                        "format": {
                          "description": "Sets whether or not the string should be parsed as HTML. Accepted values are 'html', 'plain_text' and 'auto'. If set to auto, Smartling will attempt to detect the presence of HTML tags in the string.\n\n\"When strings are parsed as HTML, Smartling will automatically ampersand-escape special characters such as angle brackets (<) and quotes (&quot;). For example, if you upload the string _Dave says &quot;hello&quot;_. and set format to HTML, Smartling will return the string with ampersand-escaping: _Dave says &amp;quot;hello&amp;quot;_.\"",
                          "type": "string"
                        }
                      },
                      "required": [
                        "stringText"
                      ],
                      "type": "object"
                    },
                    "minItems": 1,
                    "type": "array"
                  },
                  "placeholderFormat": {
                    "description": "Specifies a standard placeholder format. Accepted values are none, c, ios, python, java, yaml, qt, resx. See [Placeholders in Resource Files](https://help.smartling.com/hc/en-us/articles/360008143433) for more detail.",
                    "type": "string"
                  },
                  "placeholderFormatCustom": {
                    "description": "Specifies a custom placeholder with a Java Regular Expression. For example \\\\[.+?\\\\] would capture all values surrounded by square brackets as placeholders. See [Placeholders in Resource Files](https://help.smartling.com/hc/en-us/articles/360008143433) for more detail.",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Used to generate the unique hashcode for all strings in the request. If you want to have two versions of a string with the same text and variant metadata, you can keep them unique by assigning a different namespace to each string. If not provided, default value is _smartling.strings-api.default.namespace_. A _NULL_ value is permitted.",
                    "type": "string"
                  }
                },
                "type": "object",
                "required": [
                  "strings"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "hashcode": "bd603147d945h3ec74d6874422ebe4e0",
                              "overWritten": "true",
                              "parsedStringText": "Search results for {0}:",
                              "stringText": "Search results for [city]:",
                              "variant": "variant value"
                            }
                          ],
                          "processUid": "d6414f8c-4gdf-4415-9a69-f8e7902ca9ec",
                          "stringCount": 1,
                          "wordCount": 4
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CreateStringResponse"
                }
              }
            },
            "description": "OK"
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateStringResponse"
                }
              }
            },
            "description": "ACCEPTED"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringJSON\" https://api.smartling.com/strings-api/v2/projects/$smartlingProjectId\n"
          }
        ]
      }
    },
    "/strings-api/v2/projects/{projectId}/processes/{processUid}": {
      "get": {
        "summary": "Check string status",
        "description": "If an **Add strings** request takes longer than 60 seconds to process, a `202` response will be returned, indicating that the process of creating strings is continuing but not yet complete. This response will include a `proccessUid` value which can be used to check the progress of the request.\n\nThis request can return:\n  * `\"processState\": \"OPEN\"` which indicates that the request is still continuing.\n  * `\"processState\": \"CLOSED\"` indicates the request has successfully completed.\n  * `\"processState\": \"FAILED\"` means the request could not be completed.\n\nProcesses have a limited lifespan after they are complete. This request will fail if you specify an expired `processUid`.",
        "tags": [
          "Strings"
        ],
        "operationId": "getAddStringsToProjectRequestStatus",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "processUid",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateStringStatusResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" -G https://api.smartling.com/strings-api/v2/projects/$smartlingProjectId/processes/$processUid\n"
          }
        ]
      }
    },
    "/strings-api/v2/projects/{projectId}/source-strings": {
      "get": {
        "summary": "List all source strings",
        "description": "Returns source strings from Smartling. You can get strings by specifying a file you want strings for, or you can specify individual strings by hashcode.\n\n_If you do not specify at least one of these parameters (`hashcodes` or `fileUri`) no results will be returned._\n\n**Note**: If you use this call to get strings that are not added via the Strings API, you may see differences in the response.\n\nYou may see a value for `parsedStringText` but a `null` value for `stringText`. The `stringText` records the raw input received by the Strings API, and therefore will only appear for strings uploaded via the Strings API.\nIf you are getting a GDN string, the original placeholder values you used will not be returned as these are not saved by Smartling. GDN strings will have placeholders in the format `{0}`, `{1}`, etc.",
        "tags": [
          "Strings"
        ],
        "operationId": "getAllSourceStringsByProject",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Hashcodes for each string you want to get source strings for.",
            "in": "query",
            "name": "hashcodes",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "URI of a file you want to get strings for.",
            "in": "query",
            "name": "fileUri",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "By default, responses will be limited to 500 per request. This is also the maximum allowed value.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "Pagination setting. Default is 0.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" -G -d \"fileUri=$smartlingFileUri\" https://api.smartling.com/strings-api/v2/projects/$smartlingProjectId/source-strings\n"
          }
        ]
      }
    },
    "/strings-api/v2/projects/{projectId}/translations": {
      "get": {
        "summary": "List all translations",
        "description": "Returns translated strings from Smartling. You can get translations by specifying a file you want strings for, or you can specify individual strings by hashcode.\n\n_If you do not specify at least one of these parameters (`hashcodes` or `fileUri`) no results will be returned._\n\n**Note**: If you use this call to get strings that were not created via the Strings API, you may see differences in the response.\n\nOnly authorized and active strings will be returned. Excluded, unauthorized, and inactive strings will not be returned.\n\nYou may see a value for `parsedStringText` but a `null` value for `stringText`. The `stringText` records the raw input received by the Strings API, and therefore will only appear for strings uploaded via the Strings API.\nIf you are getting a GDN string, the original placeholder values you used will not be returned as these are not saved by Smartling. GDN strings will have placeholders in the format `{0}`, `{1}`, etc.",
        "tags": [
          "Strings"
        ],
        "operationId": "getAllTranslationsByProject",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Hashcodes for each string you want to get translations for.",
            "in": "query",
            "name": "hashcodes",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Smartling ID for the language you want to get translations for.",
            "in": "query",
            "name": "targetLocaleId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sets the types of translations you want returned. `published` will only return translations that have completed their workflows and been published. `pending` will return any saved translations.",
            "in": "query",
            "name": "retrievalType",
            "schema": {
              "enum": [
                "pending",
                "published"
              ],
              "type": "string"
            }
          },
          {
            "description": "URI of a file you want to get translations for.",
            "in": "query",
            "name": "fileUri",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pagination setting. By default, responses will be limited to 500 per request. This is also the maximum allowed value.",
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "Pagination setting. Default is 0.",
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranslationResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" -G https://api.smartling.com/strings-api/v2/projects/$smartlingProjectId/translations\n"
          }
        ]
      }
    },
    "/estimates-api/v2/projects/{projectId}/jobs/{translationJobUid}/reports/fuzzy": {
      "get": {
        "summary": "Get List of Job Fuzzy Estimate Reports",
        "description": "List fuzzy estimate reports.",
        "tags": [
          "Estimates"
        ],
        "operationId": "getJobFuzzyEstimateReports",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "translationJobUid",
            "description": "A unique translation job identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportStatus",
            "description": "Status of report.",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "NOT_FOUND",
                "PENDING",
                "PROCESSING",
                "COMPLETED",
                "FAILED",
                "TIMEOUT"
              ],
              "type": "string"
            }
          },
          {
            "name": "contentCoverage",
            "description": "Specifies level of content coverage report should have.",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "FULL",
                "PARTIAL"
              ],
              "type": "string"
            }
          },
          {
            "name": "creatorUserUids",
            "description": "Array of report creator uids.",
            "in": "query",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "name": "translationJobSchemaContents",
            "description": "if report was generated for the job,.",
            "in": "query",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "TRANSLATION",
                  "ALL_CONTENT",
                  "CLAIMING",
                  "UNAUTHORIZED"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "name": "tags",
            "description": "Search is done via or logic, i.e. if a report has any of the given tags, it will be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "name": "createdFrom",
            "description": "Date filter for report.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdTo",
            "description": "Date filter for report.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "Paging parameter. The number of reports to return.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "description": "Paging parameter. The index of the repor to start with.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateJobReportResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "totalCount": 4,
                          "items": [
                            {
                              "reportUid": "f84491fc",
                              "schemaType": "siteLocales",
                              "reportType": "FUZZY",
                              "schema": "{\"schema\":\"siteLocales\",\"projectId\":\"fd7244365\"}",
                              "reportStatus": "PROCESSING",
                              "totalStrings": 27828,
                              "projectId": "fd7244365",
                              "creatorUserUid": "58870b8ee965",
                              "creatorUserRole": "ROLE_ACCOUNT_OWNER",
                              "contentCoverage": "FULL",
                              "creatorAgencyUid": "",
                              "createdDate": "2016-03-21T15:00:48Z",
                              "totalWordCount": 3634,
                              "totalWeightedWordCount": 3614,
                              "priceInformation": null,
                              "localeEstimates": null,
                              "tags": null,
                              "warnings": [
                                "No rates specified for 'fr-FR' locale."
                              ],
                              "errors": [
                                "Report generation failed. Rates of account defined in different currencies: USD, JPY. Only one should be used per account. Please fix this and re-run estimation."
                              ]
                            },
                            {
                              "reportUid": "0ec805d4",
                              "schemaType": "job",
                              "reportType": "COST",
                              "schema": "{\"schema\":\"job\",\"jobUid\":\"e2f3dcac30cc\"}",
                              "reportStatus": "COMPLETED",
                              "totalStrings": 3200,
                              "projectId": "fd7244365",
                              "creatorUserUid": "58870b8ee965",
                              "creatorUserRole": "ROLE_ACCOUNT_OWNER",
                              "contentCoverage": "FULL",
                              "creatorAgencyUid": "",
                              "createdDate": "2016-03-21T15:00:48Z",
                              "totalWordCount": 3634,
                              "totalWeightedWordCount": 3614,
                              "priceInformation": [
                                {
                                  "priceMin": 999.35,
                                  "priceMax": 1090.2,
                                  "currencyCode": "EUR"
                                }
                              ],
                              "localeEstimates": null,
                              "tags": [
                                "bbbbb456566"
                              ],
                              "warnings": null,
                              "errors": null
                            },
                            {
                              "reportUid": "702cdae5",
                              "schemaType": "listView",
                              "schema": "{\"schema\":\"listView\",\"projectId\":\"fd7244365\",\"localeList\":[\"hy-AM\"],\"stringState\":\"IN_TRANSLATION\",\"stringIds\":[\"5086f27e4a123ac0e573b7d45240b674\",\"9d67960622910cb2e6ab0525fb8ec747\",\"816a4bf2e30577ea2cfcb2eec231e50e\"],\"workflowStepIds\":[\"19565\",\"120859\",\"120860\",\"19567\",\"19571\",\"19570\",\"19569\",\"57497\",\"65867\",\"57499\",\"61329\",\"67758\",\"67760\",\"109463\",\"109465\",\"136550\",\"110388\",\"136548\",\"136549\"]}",
                              "reportStatus": "COMPLETED",
                              "reportType": "COST",
                              "totalStrings": 2,
                              "projectId": "fd7244365",
                              "creatorUserUid": "58870b8ee965",
                              "creatorUserRole": "ROLE_ACCOUNT_OWNER",
                              "contentCoverage": "FULL",
                              "creatorAgencyUid": "",
                              "createdDate": "2016-03-21T15:00:48Z",
                              "totalWordCount": 3634,
                              "totalWeightedWordCount": 3614,
                              "priceInformation": [
                                {
                                  "priceMin": 999.35,
                                  "priceMax": 1090.2,
                                  "currencyCode": "USD"
                                }
                              ],
                              "localeEstimates": null,
                              "tags": null,
                              "warnings": null,
                              "errors": null
                            },
                            {
                              "reportUid": "8532918d",
                              "schemaType": "unauthorized",
                              "schema": "{\"schema\":\"unauthorized\",\"projectId\":\"fd7244365\",\"localeList\":[\"hy-AM\",\"zh-TW\",\"nl-BE\",\"pt-BR\",\"ru-RU\",\"uk-UA\",\"cy-GB\"],\"stringState\":\"AWAITING_APPROVAL\",\"stringIds\":[\"975d88fd8c9290c8356364b91f88af02\",\"33eb5a93062cb5981168533500668a49\",\"a781299a67d7bd57511a14cffce40257\",\"afdf1b5d0aa538184cd67372c0acc7c2\",\"302d3f85228cd41d2267c7505dafb9e5\"]}",
                              "reportStatus": "COMPLETED",
                              "reportType": "COST",
                              "totalStrings": 700,
                              "projectId": "fd7244365",
                              "creatorUserUid": "58870b8ee965",
                              "creatorUserRole": "ROLE_ACCOUNT_OWNER",
                              "contentCoverage": "FULL",
                              "creatorAgencyUid": "",
                              "createdDate": "2016-03-21T15:00:48Z",
                              "totalWordCount": 3634,
                              "totalWeightedWordCount": 3614,
                              "priceInformation": [
                                {
                                  "priceMin": 999.35,
                                  "priceMax": 1090.2,
                                  "currencyCode": "USD"
                                },
                                {
                                  "priceMin": 999.35,
                                  "priceMax": 1090.2,
                                  "currencyCode": "EUR"
                                }
                              ],
                              "localeEstimates": null,
                              "tags": [
                                "new label"
                              ],
                              "warnings": null,
                              "errors": null
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Generate Fuzzy Estimate Report for the Job",
        "description": "Generate Fuzzy report for the Job.",
        "tags": [
          "Estimates"
        ],
        "operationId": "generateJobFuzzyEstimateReports",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "translationJobUid",
            "description": "A unique translation job identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateJobFuzzyReportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateJobGenericReportResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "reportUid": "f84491fc",
                          "reportType": "FUZZY",
                          "reportStatus": "PENDING"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/estimates-api/v2/projects/{projectId}/jobs/{translationJobUid}/reports/cost": {
      "get": {
        "summary": "Get List of Job Cost Estimate Reports",
        "description": "List cost estimate reports.",
        "tags": [
          "Estimates"
        ],
        "operationId": "getJobCostEstimateReports",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "translationJobUid",
            "description": "A unique translation job identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportStatus",
            "description": "Status of report.",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "NOT_FOUND",
                "PENDING",
                "PROCESSING",
                "COMPLETED",
                "FAILED",
                "TIMEOUT"
              ],
              "type": "string"
            }
          },
          {
            "name": "contentCoverage",
            "description": "Specifies level of content coverage report should have.",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "FULL",
                "PARTIAL"
              ],
              "type": "string"
            }
          },
          {
            "name": "creatorUserUids",
            "description": "Array of report creator uids.",
            "in": "query",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "name": "translationJobSchemaContents",
            "description": "if report was generated for the job,.",
            "in": "query",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "TRANSLATION",
                  "ALL_CONTENT",
                  "CLAIMING",
                  "UNAUTHORIZED"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "name": "tags",
            "description": "Search is done via or logic, i.e. if a report has any of the given tags, it will be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "name": "createdFrom",
            "description": "Date filter for report.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdTo",
            "description": "Date filter for report.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "Paging parameter. The number of reports to return.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "description": "Paging parameter. The index of the repor to start with.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateJobReportResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "totalCount": 4,
                          "items": [
                            {
                              "reportUid": "f84491fc",
                              "schemaType": "siteLocales",
                              "reportType": "FUZZY",
                              "schema": "{\"schema\":\"siteLocales\",\"projectId\":\"fd7244365\"}",
                              "reportStatus": "PROCESSING",
                              "totalStrings": 27828,
                              "projectId": "fd7244365",
                              "creatorUserUid": "58870b8ee965",
                              "creatorUserRole": "ROLE_ACCOUNT_OWNER",
                              "contentCoverage": "FULL",
                              "creatorAgencyUid": "",
                              "createdDate": "2016-03-21T15:00:48Z",
                              "totalWordCount": 3634,
                              "totalWeightedWordCount": 3614,
                              "priceInformation": null,
                              "localeEstimates": null,
                              "tags": null,
                              "warnings": [
                                "No rates specified for 'fr-FR' locale."
                              ],
                              "errors": [
                                "Report generation failed. Rates of account defined in different currencies: USD, JPY. Only one should be used per account. Please fix this and re-run estimation."
                              ]
                            },
                            {
                              "reportUid": "0ec805d4",
                              "schemaType": "job",
                              "reportType": "COST",
                              "schema": "{\"schema\":\"job\",\"jobUid\":\"e2f3dcac30cc\"}",
                              "reportStatus": "COMPLETED",
                              "totalStrings": 3200,
                              "projectId": "fd7244365",
                              "creatorUserUid": "58870b8ee965",
                              "creatorUserRole": "ROLE_ACCOUNT_OWNER",
                              "contentCoverage": "FULL",
                              "creatorAgencyUid": "",
                              "createdDate": "2016-03-21T15:00:48Z",
                              "totalWordCount": 3634,
                              "totalWeightedWordCount": 3614,
                              "priceInformation": [
                                {
                                  "priceMin": 999.35,
                                  "priceMax": 1090.2,
                                  "currencyCode": "EUR"
                                }
                              ],
                              "localeEstimates": null,
                              "tags": [
                                "bbbbb456566"
                              ],
                              "warnings": null,
                              "errors": null
                            },
                            {
                              "reportUid": "702cdae5",
                              "schemaType": "listView",
                              "schema": "{\"schema\":\"listView\",\"projectId\":\"fd7244365\",\"localeList\":[\"hy-AM\"],\"stringState\":\"IN_TRANSLATION\",\"stringIds\":[\"5086f27e4a123ac0e573b7d45240b674\",\"9d67960622910cb2e6ab0525fb8ec747\",\"816a4bf2e30577ea2cfcb2eec231e50e\"],\"workflowStepIds\":[\"19565\",\"120859\",\"120860\",\"19567\",\"19571\",\"19570\",\"19569\",\"57497\",\"65867\",\"57499\",\"61329\",\"67758\",\"67760\",\"109463\",\"109465\",\"136550\",\"110388\",\"136548\",\"136549\"]}",
                              "reportStatus": "COMPLETED",
                              "reportType": "COST",
                              "totalStrings": 2,
                              "projectId": "fd7244365",
                              "creatorUserUid": "58870b8ee965",
                              "creatorUserRole": "ROLE_ACCOUNT_OWNER",
                              "contentCoverage": "FULL",
                              "creatorAgencyUid": "",
                              "createdDate": "2016-03-21T15:00:48Z",
                              "totalWordCount": 3634,
                              "totalWeightedWordCount": 3614,
                              "priceInformation": [
                                {
                                  "priceMin": 999.35,
                                  "priceMax": 1090.2,
                                  "currencyCode": "USD"
                                }
                              ],
                              "localeEstimates": null,
                              "tags": null,
                              "warnings": null,
                              "errors": null
                            },
                            {
                              "reportUid": "8532918d",
                              "schemaType": "unauthorized",
                              "schema": "{\"schema\":\"unauthorized\",\"projectId\":\"fd7244365\",\"localeList\":[\"hy-AM\",\"zh-TW\",\"nl-BE\",\"pt-BR\",\"ru-RU\",\"uk-UA\",\"cy-GB\"],\"stringState\":\"AWAITING_APPROVAL\",\"stringIds\":[\"975d88fd8c9290c8356364b91f88af02\",\"33eb5a93062cb5981168533500668a49\",\"a781299a67d7bd57511a14cffce40257\",\"afdf1b5d0aa538184cd67372c0acc7c2\",\"302d3f85228cd41d2267c7505dafb9e5\"]}",
                              "reportStatus": "COMPLETED",
                              "reportType": "COST",
                              "totalStrings": 700,
                              "projectId": "fd7244365",
                              "creatorUserUid": "58870b8ee965",
                              "creatorUserRole": "ROLE_ACCOUNT_OWNER",
                              "contentCoverage": "FULL",
                              "creatorAgencyUid": "",
                              "createdDate": "2016-03-21T15:00:48Z",
                              "totalWordCount": 3634,
                              "totalWeightedWordCount": 3614,
                              "priceInformation": [
                                {
                                  "priceMin": 999.35,
                                  "priceMax": 1090.2,
                                  "currencyCode": "USD"
                                },
                                {
                                  "priceMin": 999.35,
                                  "priceMax": 1090.2,
                                  "currencyCode": "EUR"
                                }
                              ],
                              "localeEstimates": null,
                              "tags": [
                                "new label"
                              ],
                              "warnings": null,
                              "errors": null
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Generate Cost Estimate Report for the Job",
        "description": "Generate Cost Estimate Report for the Job",
        "tags": [
          "Estimates"
        ],
        "operationId": "generateJobCostEstimateReports",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "translationJobUid",
            "description": "A unique translation job identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateJobCostReportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateJobGenericReportResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "reportUid": "f84491fc",
                          "reportType": "FUZZY",
                          "reportStatus": "PENDING"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/estimates-api/v2/projects/{projectId}/reports/{reportUid}/status": {
      "get": {
        "summary": "Get Estimate Report Status",
        "tags": [
          "Estimates"
        ],
        "operationId": "getJobEstimateReportStatus",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportUid",
            "description": "A unique report identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportStatus",
            "description": "Status of report.",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "NOT_FOUND",
                "PENDING",
                "PROCESSING",
                "COMPLETED",
                "FAILED",
                "TIMEOUT"
              ],
              "type": "string"
            }
          },
          {
            "name": "reportType",
            "description": "Report type.",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "FUZZY",
                "COST"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateJobReportStatusResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "reportUid": "f84491fc",
                          "reportStatus": "PROCESSING",
                          "totalStrings": 27828,
                          "percentComplete": 18,
                          "reportType": "FUZZY",
                          "createdDate": "2016-03-21T15:00:48Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/estimates-api/v2/projects/{projectId}/reports/{reportUid}": {
      "get": {
        "summary": "Get Estimate Report",
        "tags": [
          "Estimates"
        ],
        "operationId": "getJobEstimateReport",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportUid",
            "description": "A unique report identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportStatus",
            "description": "Status of report.",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "NOT_FOUND",
                "PENDING",
                "PROCESSING",
                "COMPLETED",
                "FAILED",
                "TIMEOUT"
              ],
              "type": "string"
            }
          },
          {
            "name": "reportType",
            "description": "Report type.",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "FUZZY",
                "COST"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateJobReportResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "totalCount": 4,
                          "items": [
                            {
                              "reportUid": "f84491fc",
                              "schemaType": "siteLocales",
                              "reportType": "FUZZY",
                              "schema": "{\"schema\":\"siteLocales\",\"projectId\":\"fd7244365\"}",
                              "reportStatus": "PROCESSING",
                              "totalStrings": 27828,
                              "projectId": "fd7244365",
                              "creatorUserUid": "58870b8ee965",
                              "creatorUserRole": "ROLE_ACCOUNT_OWNER",
                              "contentCoverage": "FULL",
                              "creatorAgencyUid": "",
                              "createdDate": "2016-03-21T15:00:48Z",
                              "totalWordCount": 3634,
                              "totalWeightedWordCount": 3614,
                              "priceInformation": null,
                              "localeEstimates": null,
                              "tags": null,
                              "warnings": [
                                "No rates specified for 'fr-FR' locale."
                              ],
                              "errors": [
                                "Report generation failed. Rates of account defined in different currencies: USD, JPY. Only one should be used per account. Please fix this and re-run estimation."
                              ]
                            },
                            {
                              "reportUid": "0ec805d4",
                              "schemaType": "job",
                              "reportType": "COST",
                              "schema": "{\"schema\":\"job\",\"jobUid\":\"e2f3dcac30cc\"}",
                              "reportStatus": "COMPLETED",
                              "totalStrings": 3200,
                              "projectId": "fd7244365",
                              "creatorUserUid": "58870b8ee965",
                              "creatorUserRole": "ROLE_ACCOUNT_OWNER",
                              "contentCoverage": "FULL",
                              "creatorAgencyUid": "",
                              "createdDate": "2016-03-21T15:00:48Z",
                              "totalWordCount": 3634,
                              "totalWeightedWordCount": 3614,
                              "priceInformation": [
                                {
                                  "priceMin": 999.35,
                                  "priceMax": 1090.2,
                                  "currencyCode": "EUR"
                                }
                              ],
                              "localeEstimates": null,
                              "tags": [
                                "bbbbb456566"
                              ],
                              "warnings": null,
                              "errors": null
                            },
                            {
                              "reportUid": "702cdae5",
                              "schemaType": "listView",
                              "schema": "{\"schema\":\"listView\",\"projectId\":\"fd7244365\",\"localeList\":[\"hy-AM\"],\"stringState\":\"IN_TRANSLATION\",\"stringIds\":[\"5086f27e4a123ac0e573b7d45240b674\",\"9d67960622910cb2e6ab0525fb8ec747\",\"816a4bf2e30577ea2cfcb2eec231e50e\"],\"workflowStepIds\":[\"19565\",\"120859\",\"120860\",\"19567\",\"19571\",\"19570\",\"19569\",\"57497\",\"65867\",\"57499\",\"61329\",\"67758\",\"67760\",\"109463\",\"109465\",\"136550\",\"110388\",\"136548\",\"136549\"]}",
                              "reportStatus": "COMPLETED",
                              "reportType": "COST",
                              "totalStrings": 2,
                              "projectId": "fd7244365",
                              "creatorUserUid": "58870b8ee965",
                              "creatorUserRole": "ROLE_ACCOUNT_OWNER",
                              "contentCoverage": "FULL",
                              "creatorAgencyUid": "",
                              "createdDate": "2016-03-21T15:00:48Z",
                              "totalWordCount": 3634,
                              "totalWeightedWordCount": 3614,
                              "priceInformation": [
                                {
                                  "priceMin": 999.35,
                                  "priceMax": 1090.2,
                                  "currencyCode": "USD"
                                }
                              ],
                              "localeEstimates": null,
                              "tags": null,
                              "warnings": null,
                              "errors": null
                            },
                            {
                              "reportUid": "8532918d",
                              "schemaType": "unauthorized",
                              "schema": "{\"schema\":\"unauthorized\",\"projectId\":\"fd7244365\",\"localeList\":[\"hy-AM\",\"zh-TW\",\"nl-BE\",\"pt-BR\",\"ru-RU\",\"uk-UA\",\"cy-GB\"],\"stringState\":\"AWAITING_APPROVAL\",\"stringIds\":[\"975d88fd8c9290c8356364b91f88af02\",\"33eb5a93062cb5981168533500668a49\",\"a781299a67d7bd57511a14cffce40257\",\"afdf1b5d0aa538184cd67372c0acc7c2\",\"302d3f85228cd41d2267c7505dafb9e5\"]}",
                              "reportStatus": "COMPLETED",
                              "reportType": "COST",
                              "totalStrings": 700,
                              "projectId": "fd7244365",
                              "creatorUserUid": "58870b8ee965",
                              "creatorUserRole": "ROLE_ACCOUNT_OWNER",
                              "contentCoverage": "FULL",
                              "creatorAgencyUid": "",
                              "createdDate": "2016-03-21T15:00:48Z",
                              "totalWordCount": 3634,
                              "totalWeightedWordCount": 3614,
                              "priceInformation": [
                                {
                                  "priceMin": 999.35,
                                  "priceMax": 1090.2,
                                  "currencyCode": "USD"
                                },
                                {
                                  "priceMin": 999.35,
                                  "priceMax": 1090.2,
                                  "currencyCode": "EUR"
                                }
                              ],
                              "localeEstimates": null,
                              "tags": [
                                "new label"
                              ],
                              "warnings": null,
                              "errors": null
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Estimation Report",
        "description": "Delete estimate report.",
        "tags": [
          "Estimates"
        ],
        "operationId": "deleteJobEstimateReport",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportUid",
            "description": "A unique report identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/estimates-api/v2/projects/{projectId}/reports/{reportUid}/tags": {
      "put": {
        "summary": "Modify Tags of Estimation Report",
        "description": "The new set of tags completely replaces the old ones.",
        "tags": [
          "Estimates"
        ],
        "operationId": "modifyJobEstimateReportTags",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportUid",
            "description": "A unique report identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyJobReportTagsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateJobReportTagsResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "tags": [
                            "AdminJob",
                            "NEWTAG1",
                            "NEWTAG2"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/estimates-api/v2/projects/{projectUid}/reports/{reportUid}/download": {
      "get": {
        "summary": "Export Estimation Report as CSV",
        "tags": [
          "Estimates"
        ],
        "operationId": "exportJobEstimationReport",
        "parameters": [
          {
            "name": "projectUid",
            "description": "A unique project identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportUid",
            "description": "A unique report identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "description": "for now, only csv is supported.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/mt-router-api/v2/accounts/{accountUid}/smartling-mt": {
      "post": {
        "summary": "Machine Translation (MT) using preconfigured MT Profile",
        "description": "Machine Translation (MT) using preconfigured MT Profile. Input and output text format is HTML.",
        "tags": [
          "Machine Translation (MT)"
        ],
        "operationId": "translateForAccount",
        "parameters": [
          {
            "name": "accountUid",
            "description": "A unique account identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MTTranslateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MTTranslateResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "key": "key-from-request",
                              "translationText": "Translated text"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/mt-router-api/v2/accounts/{accountUid}/smartling-mt\n"
          }
        ]
      }
    },
    "/file-translations-api/v2/accounts/{accountUid}/files": {
      "post": {
        "summary": "Upload file",
        "description": "Upload a file to use for asynchronous tasks like language detection or machine translation. Maximum file size is 200MB.",
        "tags": [
          "File Machine Translations (MT)"
        ],
        "operationId": "fileUpload",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountUidPathParameter"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "request": {
                    "type": "object",
                    "properties": {
                      "fileType": {
                        "description": "File type of uploaded file.",
                        "$ref": "#/components/schemas/schemas-FileType"
                      }
                    }
                  },
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file contents to upload."
                  }
                },
                "required": [
                  "file",
                  "request"
                ],
                "type": "object"
              },
              "encoding": {
                "request": {
                  "contentType": "application/json"
                },
                "file": {
                  "contentType": "application/octet-stream"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "fileUid": "7ntwcv0rdj95"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/FileUploadResponse"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/responses-Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/responses-Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\"  -H \"Content-Type:multipart/form-data\" -F \"request={\\\"fileType\\\":\\\"PLAIN_TEXT\\\"};type=application/json\" -F \"file=@/Users/smartling/Downloads/test.txt;type=application/octet-stream\" https://api.smartling.com/file-translations-api/v2/accounts/$smartlingAccountId/files\n"
          }
        ]
      }
    },
    "/file-translations-api/v2/accounts/{accountUid}/files/{fileUid}/mt": {
      "post": {
        "summary": "Translate file",
        "description": "Perform translation for a previously uploaded file given a source locale and a set of target locales.",
        "tags": [
          "File Machine Translations (MT)"
        ],
        "operationId": "mtFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/fileUidPathParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "sourceLocaleId": {
                    "type": "string",
                    "description": "Source locale of the uploaded file.",
                    "example": "en-US"
                  },
                  "targetLocaleIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of target locales that the file needs to be translated into.",
                    "example": [
                      "de-DE",
                      "fr-FR"
                    ]
                  }
                },
                "required": [
                  "sourceLocaleId",
                  "targetLocaleIds"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "ACCEPTED",
                        "data": {
                          "mtUid": "h5dhjbg1ganp"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/MtResponse"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/responses-Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/responses-Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\"  -H \"Content-Type:application/json\" -d '{\"sourceLocaleId\" : \"en-US\", \"targetLocaleIds\" : [\"de-DE\", \"fr-FR\"]}' https://api.smartling.com/file-translations-api/v2/accounts/$smartlingAccountId/files/$smartlingFtsFileUid/mt\n"
          }
        ]
      }
    },
    "/file-translations-api/v2/accounts/{accountUid}/files/{fileUid}/mt/{mtUid}/status": {
      "get": {
        "summary": "Get translation progress",
        "description": "Get progress for an ongoing file translation action. Progress is reported on a per locale basis,\nbut will also include an aggregate state for all locales.",
        "tags": [
          "File Machine Translations (MT)"
        ],
        "operationId": "getMtProgress",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/fileUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/mtUidPathParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "state": "CANCELED",
                          "requestedStringCount": 100,
                          "error": null,
                          "localeProcessStatuses": [
                            {
                              "localeId": "de-DE",
                              "state": "CANCELED",
                              "processedStringCount": 67,
                              "error": null
                            },
                            {
                              "localeId": "fr-FR",
                              "state": "COMPLETED",
                              "processedStringCount": 100,
                              "error": null
                            },
                            {
                              "localeId": "fr-CA",
                              "state": "FAILED",
                              "processedStringCount": 0,
                              "error": {
                                "key": "generalError",
                                "message": "Sorry, something went wrong. We notified the responsible team. If you still need to contact us please provide this error code: jtcorrr3",
                                "details": {
                                  "errorId": "jtcorrr3"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/MtStatusResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/responses-Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/responses-Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\"  https://api.smartling.com/file-translations-api/v2/accounts/$smartlingAccountId/files/$smartlingFtsFileUid/mt/$smartlingMtUid/status\n"
          }
        ]
      }
    },
    "/file-translations-api/v2/accounts/{accountUid}/files/{fileUid}/mt/{mtUid}/locales/{localeId}/file": {
      "get": {
        "summary": "Download translated file (single locale)",
        "description": "Download translated file for a specific locale. \nThe download is allowed only if translation to the requested locale has been fully completed.\n\nIt is important to check the HTTP response status code. If Smartling\nfinds and returns the file normally, you will receive a `200` SUCCESS\nresponse. If you receive any other response status code than `200`, the\nrequested files will not be part of the response.\n\nWhen you upload a UTF-16 character encoded file, then /file/get requests\nfor that file will have a character encoding of UTF-16. All other\nuploaded files will return with a character encoding of UTF-8.\n\nYou can always use the content-type header in the response of a file/get\nrequest to determine the character encoding.\nThe output filename is based on the original file name, that was provided during initial upload call.\n\n**Note:** for GETTEXT files we're going to return file extension as .po\neven if during the initial file upload it was uploaded with .pot file extension.",
        "tags": [
          "File Machine Translations (MT)"
        ],
        "operationId": "downloadMTFile",
        "parameters": [
          {
            "name": "localeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "One of translation requested with prior call to File MT end point."
          },
          {
            "$ref": "#/components/parameters/accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/fileUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/mtUidPathParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas-Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": {
                          "key": "locale.not.requested",
                          "message": "Processing request did not contain locale de-DE",
                          "details": {
                            "field": "localeId"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/responses-Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/responses-Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\"  https://api.smartling.com/file-translations-api/v2/accounts/$smartlingAccountId/files/$smartlingFtsFileUid/mt/$smartlingMtUid/locales/{$smartlingLocaleId}/file\n"
          }
        ]
      }
    },
    "/file-translations-api/v2/accounts/{accountUid}/files/{fileUid}/mt/{mtUid}/locales/all/file/zip": {
      "get": {
        "summary": "Download translated files (all locales)",
        "description": "Download a ZIP archive of translated files for all requested locales.\n\nUnlike the \"Download translated file (single locale)\" endpoint, you get a ZIP archive\nwith all translations of a specific file.\n\nIt is important to check the HTTP response status code. If Smartling\nfinds and returns the file normally, you will receive a `200` SUCCESS\nresponse. If you receive any other response status code than `200`, the\nrequested files will not be part of the response.\n\nWhen you upload a UTF-16 character encoded file, then /file/get requests\nfor that file will have a character encoding of UTF-16. All other\nuploaded files will return with a character encoding of UTF-8.\n\nYou can always use the content-type header in the response of a file/get\nrequest to determine the character encoding.\n\nZip archive can only be downloaded if translation to all locales\nhas completed (overall state has to be in COMPLETED or CANCELLED states)\nand if there is at least one locale which has COMPLETED state.\n",
        "tags": [
          "File Machine Translations (MT)"
        ],
        "operationId": "downloadAllMTFilesInZip",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/fileUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/mtUidPathParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas-Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": {
                          "key": "mt.not.completed",
                          "message": "State of processing is QUEUED. Only COMPLETED,CANCELED allow final file to be downloaded",
                          "details": {
                            "field": "mtUid"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/responses-Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/responses-Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\"  https://api.smartling.com/file-translations-api/v2/accounts/$smartlingAccountId/files/$smartlingFtsFileUid/mt/$smartlingMtUid/locales/{$smartlingLocaleId}/file\n"
          }
        ]
      }
    },
    "/file-translations-api/v2/accounts/{accountUid}/files/{fileUid}/mt/{mtUid}/cancel": {
      "post": {
        "summary": "Cancel file translation",
        "description": "Cancel an ongoing file translation at any point during the translation process.\nIf file translation is complete or has already been cancelled, calling this endpoint will have no effect.",
        "tags": [
          "File Machine Translations (MT)"
        ],
        "operationId": "cancelMt",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/fileUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/mtUidPathParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {}
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/schemas-EmptyResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/responses-Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/responses-Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type:application/json\" https://api.smartling.com/file-translations-api/v2/accounts/$smartlingAccountId/files/$smartlingFtsFileUid/mt/$smartlingMtUid/cancel\n"
          }
        ]
      }
    },
    "/file-translations-api/v2/accounts/{accountUid}/files/{fileUid}/language-detection": {
      "post": {
        "summary": "Detect file language",
        "description": "Request source language detection for an existing file.",
        "tags": [
          "File Machine Translations (MT)"
        ],
        "operationId": "detectFileSourceLanguage",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/fileUidPathParameter"
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "ACCEPTED",
                        "data": {
                          "languageDetectionUid": "h5dhjbg1ganp"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/LanguageDetectionResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas-Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": {
                          "key": "not.found",
                          "message": "fileUid h5dhjbg1ganp not found",
                          "details": {
                            "field": "fileUid"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/responses-Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/responses-Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\"  https://api.smartling.com/file-translations-api/v2/accounts/$smartlingAccountId/files/$smartlingFtsFileUid/language-detection\n"
          }
        ]
      }
    },
    "/file-translations-api/v2/accounts/{accountUid}/files/{fileUid}/language-detection/{languageDetectionUid}/status": {
      "get": {
        "summary": "Get language detection progress",
        "description": "Get progress for an ongoing source language detection action.\nResult of language detection is propagated to response as soon as state changes to COMPLETED.",
        "tags": [
          "File Machine Translations (MT)"
        ],
        "operationId": "getLanguageDetectionStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/fileUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/languageDetectionUidPathParameter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "state": "COMPLETED",
                          "error": null,
                          "detectedSourceLanguages": [
                            {
                              "languageId": "de",
                              "defaultLocaleId": "de-DE"
                            },
                            {
                              "languageId": "no",
                              "defaultLocaleId": "no-NO"
                            }
                          ]
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/LanguageDetectionStatusResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/responses-Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/responses-Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\"  https://api.smartling.com/file-translations-api/v2/accounts/$smartlingAccountId/files/$smartlingFtsFileUid/language-detection/$smartlingLanguageDetectionUid/status\n"
          }
        ]
      }
    },
    "/jobs-api/v3/accounts/{accountUid}/jobs": {
      "get": {
        "summary": "List jobs within an account",
        "description": "List / search the jobs within an account.",
        "tags": [
          "Jobs"
        ],
        "operationId": "getJobsByAccount",
        "parameters": [
          {
            "name": "accountUid",
            "description": "A unique account identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used for searching jobs by `jobName`. Any entry is treated as a LIKE query on the name of the job.",
            "in": "query",
            "name": "jobName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used for searching jobs by `projectId`. Supports up to 500 `projectId`s.",
            "in": "query",
            "name": "projectIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Used for searching jobs by their status.",
            "in": "query",
            "name": "translationJobStatus",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "DRAFT",
                  "AWAITING_AUTHORIZATION",
                  "IN_PROGRESS",
                  "COMPLETED",
                  "CANCELLED",
                  "CLOSED",
                  "DELETED"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "name": "withPriority",
            "description": "If set to `true`, returns jobs only with priority.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The limit on the number of jobs returned.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The offset to use when searching for jobs.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The field to sort by.",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "enum": [
                "createdDate",
                "priority"
              ],
              "type": "string"
            }
          },
          {
            "description": "The direction to sort.",
            "in": "query",
            "name": "sortDirection",
            "required": false,
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListJobsResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "createdDate": "2015-11-21T11:51:17Z",
                              "description": "my job description",
                              "dueDate": "2015-11-21T11:51:17Z",
                              "jobName": "myJobName",
                              "jobNumber": "SMTL-123",
                              "jobStatus": "IN_PROGRESS",
                              "priority": 2,
                              "projectId": "fd7244365",
                              "referenceNumber": "myReferenceNumber1",
                              "targetLocaleIds": [
                                "fr-FR",
                                "es"
                              ],
                              "translationJobUid": "abc123abc"
                            }
                          ],
                          "totalCount": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/jobs-api/v3/accounts/$smartlingAccountId/jobs\n"
          }
        ]
      }
    },
    "/jobs-api/v3/projects/{projectId}/jobs": {
      "get": {
        "summary": "List jobs within a project",
        "description": "List / search the jobs within a project.",
        "tags": [
          "Jobs"
        ],
        "operationId": "getJobsByProject",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used for searching jobs by `jobName`. Any entry is treated as a LIKE query on the name of the job.",
            "in": "query",
            "name": "jobName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used for searching jobs by `jobNumber`. Search works by exact comparison.",
            "in": "query",
            "name": "jobNumber",
            "example": "SMTL-123",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Used for searching jobs by `translationJobUid`. Supports up to 500 `translationJobUid`s.",
            "in": "query",
            "name": "translationJobUids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Used for searching jobs by their status.",
            "in": "query",
            "name": "translationJobStatus",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "DRAFT",
                  "AWAITING_AUTHORIZATION",
                  "IN_PROGRESS",
                  "COMPLETED",
                  "CANCELLED",
                  "CLOSED",
                  "DELETED"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The limit on the number of jobs returned.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The offset to use when searching for jobs.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The field to sort by.",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "enum": [
                "createdDate",
                "dueDate",
                "jobName"
              ],
              "type": "string"
            }
          },
          {
            "description": "The direction to sort.",
            "in": "query",
            "name": "sortDirection",
            "required": false,
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListJobsResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "createdDate": "2015-11-21T11:51:17Z",
                              "description": "my job description",
                              "dueDate": "2015-11-21T11:51:17Z",
                              "jobName": "myJobName",
                              "jobNumber": "SMTL-123",
                              "jobStatus": "IN_PROGRESS",
                              "referenceNumber": "myReferenceNumber1",
                              "targetLocaleIds": [
                                "fr-FR",
                                "es"
                              ],
                              "translationJobUid": "abc123abc"
                            },
                            {
                              "createdDate": "2015-11-21T11:51:17Z",
                              "description": "my job description",
                              "dueDate": "2015-11-21T11:51:17Z",
                              "jobName": "myJobName2",
                              "jobNumber": "SMTL-987",
                              "jobStatus": "IN_PROGRESS",
                              "referenceNumber": "myReferenceNumber1",
                              "targetLocaleIds": [
                                "fr-FR",
                                "de"
                              ],
                              "translationJobUid": "abc321xyz"
                            }
                          ],
                          "totalCount": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/jobs-api/v3/projects/$smartlingProjectId/jobs\n"
          }
        ]
      },
      "post": {
        "summary": "Create job",
        "description": "Creates a job within Smartling.",
        "tags": [
          "Jobs"
        ],
        "operationId": "addJob",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateJobRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShallowJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "translationJobUid": "abc123abc",
                          "jobName": "myJobName",
                          "jobNumber": "SMTL-123",
                          "targetLocaleIds": [
                            "fr-FR"
                          ],
                          "callbackMethod": "GET|POST",
                          "callbackUrl": "https://www.callback.com/smartling/job",
                          "createdByUserUid": "userUid123abc",
                          "createdDate": "2015-11-21T11:51:17Z",
                          "description": "my job description",
                          "dueDate": "2015-11-21T11:51:17Z",
                          "jobStatus": "IN_PROGRESS",
                          "firstCompletedDate": "2015-11-21T11:51:17Z",
                          "firstAuthorizedDate": "2015-01-21T11:51:17Z",
                          "lastCompletedDate": "2015-11-21T11:51:17Z",
                          "lastAuthorizedDate": "2015-12-21T11:51:17Z",
                          "modifiedByUserUid": "userUid321abc",
                          "modifiedDate": "2015-11-21T11:51:17Z",
                          "referenceNumber": "myReferenceNumber1",
                          "customFields": [
                            {
                              "fieldUid": "rbrbn69wa1pa",
                              "fieldName": "Department",
                              "fieldValue": "Finance Dept"
                            },
                            {
                              "fieldUid": "3rrwchzmjf27",
                              "fieldName": "Adaptation Required",
                              "fieldValue": "true"
                            }
                          ],
                          "issues": {
                            "sourceIssuesCount": 3,
                            "translationIssuesCount": 4
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error during job creation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "details": {
                              "field": "jobName"
                            },
                            "key": null,
                            "message": "There is already a job with that name. Please provide a unique name."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingJobJSON\" https://api.smartling.com/jobs-api/v3/projects/$smartlingProjectId/jobs\n"
          }
        ]
      }
    },
    "/jobs-api/v3/projects/{projectId}/jobs/find-jobs-by-strings": {
      "post": {
        "summary": "Search Jobs By Hashcodes And Locales",
        "description": "Search Job(s), based on locales and hashcodes. We allow total 20000 records to be passed. Means it could be 10 locales * 2000 hashcodes or 1 locale * 20000 hashcodes or no locales and just 20000 hashcodes, etc\n",
        "tags": [
          "Jobs"
        ],
        "operationId": "findJobsByStrings",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTranslationJobByLocalesAndHashcodesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTranslationJobByLocalesAndHashcodesResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "totalCount": 2,
                          "items": [
                            {
                              "translationJobUid": "abc123abc",
                              "jobName": "myJobName",
                              "dueDate": "2015-11-21T11:51:17Z",
                              "hashcodesByLocale": [
                                {
                                  "localeId": "fr-FR",
                                  "hashcodes": [
                                    "hashcode1",
                                    "hashcode3"
                                  ]
                                },
                                {
                                  "localeId": "de-DE",
                                  "hashcodes": [
                                    "hashcode4",
                                    "hashcode3"
                                  ]
                                }
                              ]
                            },
                            {
                              "translationJobUid": "abc456abc",
                              "jobName": "myJobName2",
                              "dueDate": "2015-11-21T11:51:17Z",
                              "hashcodesByLocale": [
                                {
                                  "localeId": "ru-RU",
                                  "hashcodes": [
                                    "hashcode1",
                                    "hashcode3"
                                  ]
                                },
                                {
                                  "localeId": "uk-UA",
                                  "hashcodes": [
                                    "hashcode4",
                                    "hashcode3"
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": null,
                            "message": "Limit 20,000 of total elements (hashcodes * locales) has been exceeded",
                            "details": null
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/strings": {
      "get": {
        "summary": "Get translation job strings.",
        "description": "This gets translation job string hashcodes with locales\n",
        "tags": [
          "Jobs"
        ],
        "operationId": "getStringsForTranslationJob",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "targetLocaleId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Target / translation locale id."
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            },
            "description": "Max amount of result items."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            },
            "description": "Amount of items to skip."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocaleHashcodeResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "totalCount": 3,
                          "items": [
                            {
                              "targetLocaleId": "uk-UA",
                              "hashcode": "hashcode1"
                            },
                            {
                              "targetLocaleId": "es",
                              "hashcode": "hashcode2"
                            },
                            {
                              "targetLocaleId": "es",
                              "hashcode": "hashcode1"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "404": {
            "description": "Job not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "NOT_FOUND_ERROR",
                        "errors": [
                          {
                            "key": null,
                            "message": "Translation job is not found",
                            "details": null
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/strings/add": {
      "post": {
        "summary": "Add strings to job",
        "description": "Adding strings to a job is useful if you don't manage strings / content through files, but instead need to add strings by some other means other than files.\n\nWhen strings are successfully added to a job, a `200` status is returned. When the system can't quickly add strings to the job, a `202` response status is returned. The response contains a link and `processUid` to check the progress of the request. When a `202` is received, the process of adding the content to the job will not be complete until the returned process has completed.\n",
        "tags": [
          "Jobs"
        ],
        "operationId": "addStringsToJob",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddStringsJobRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddContentSuccessFailCountJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "failCount": 0,
                          "successCount": 100
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "ACCEPTED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncProcessJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "ACCEPTED",
                        "data": {
                          "message": "This process will continue asynchronously and may take up to a few minutes.",
                          "url": "https://api.smartling.com/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/processes/{processUid}"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": null,
                            "message": "Invalid locales [ad]",
                            "details": {
                              "field": "targetLocaleIds"
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/strings/remove": {
      "post": {
        "summary": "Remove strings from job",
        "description": "Remove strings from a job. Any strings removed from the job will also be unauthorized within Smartling.\n\nIf strings are successfully removed from a job, a `200` status will be returned. When the system can't quickly add the strings to the job, a `202` response is returned. The response contains a link to check the progress of the request. When a `202` is received, the process of removing the content from the job will not be complete until the returned process has completed.\n",
        "tags": [
          "Jobs"
        ],
        "operationId": "removeStringsFromJob",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveStringsJobRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessFailCountJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "failCount": 0,
                          "successCount": 100
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "ACCEPTED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncProcessJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "ACCEPTED",
                        "data": {
                          "message": "This process will continue asynchronously and may take up to a few minutes.",
                          "url": "https://api.smartling.com/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/processes/{processUid}"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/close": {
      "post": {
        "summary": "Close job",
        "description": "This closes a completed job. In order for a job to be closed, it must be in a completed state. All content from the job will be removed when it is closed. Closing a job guarantees that no additional work will be done against the job.",
        "tags": [
          "Jobs"
        ],
        "operationId": "closeJob",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NullDataJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error when closing a job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "message": "Only a job that is COMPLETE can be closed."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/cancel": {
      "post": {
        "summary": "Cancel job",
        "description": "This cancels a job. All content within the job will be removed from the job and the content will be unauthorized.\n\nIf a job is successfully cancelled, a `200` response status will be returned. When the system can't quickly cancel the job, a `202` response is returned. The response contains a link to check the progress of the request. When a `202` is received, the process of canceling and removing the content from the job will not be complete until the returned process has completed.\n",
        "tags": [
          "Jobs"
        ],
        "operationId": "cancelJob",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelJobRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NullDataJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS"
                      }
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "ACCEPTED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncProcessJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "ACCEPTED",
                        "data": {
                          "message": "This process will continue asynchronously and may take up to a few minutes.",
                          "url": "https://api.smartling.com/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/processes/{processUid}"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error when cancelling a job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "message": "Job can be cancelled only in DRAFT, AWAITING_AUTHORIZATION, or IN_PROGRESS statuses"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "details": {},
                            "key": "invalid_token",
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/authorize": {
      "post": {
        "summary": "Authorize job",
        "description": "This authorizes all content within a job. A job can only be authorized when it has content and is in an AWAITING_AUTHORIZATION state.",
        "tags": [
          "Jobs"
        ],
        "operationId": "authorizeJob",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizeJobRequest"
              }
            }
          },
          "description": "The payload to use when authorizing a job. If no target locales and workflows are provided, the empty body `{}` should be provided. Smartling will authorize the job for the default workflows for the given project.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NullDataJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error when authorizing a job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "code": "VALIDATION_ERROR",
                      "errors": [
                        {
                          "key": null,
                          "message": "Job can be authorized only in AWAITING_AUTHORIZATION status(es).",
                          "details": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}": {
      "get": {
        "summary": "Get details of job",
        "description": "This gets the details of a job such as job name, description, due date, and reference number.",
        "tags": [
          "Jobs"
        ],
        "operationId": "getJobDetails",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "createdByUserUid": "518252370016",
                          "createdDate": "2017-11-03T14:18:37Z",
                          "jobName": "test job (Cancelled 2017/11/04 12:01:28)",
                          "jobStatus": "CANCELLED",
                          "jobNumber": "SMTL-123",
                          "firstCompletedDate": "2015-11-21T11:51:17Z",
                          "firstAuthorizedDate": "2015-01-21T11:51:17Z",
                          "lastCompletedDate": "2015-11-21T11:51:17Z",
                          "lastAuthorizedDate": "2015-12-21T11:51:17Z",
                          "modifiedByUserUid": "598d89cce43a",
                          "modifiedDate": "2017-11-04T12:01:28Z",
                          "sourceFiles": [
                            {
                              "name": "admin.properties",
                              "uri": "admin.properties",
                              "fileUid": "5b0f5c5c4c"
                            }
                          ],
                          "targetLocaleIds": [
                            "uk-UA",
                            "ru-RU"
                          ],
                          "translationJobUid": "jhcgalvnb6za",
                          "priority": 4,
                          "referenceNumber": "myReferenceNumber1",
                          "issues": {
                            "sourceIssuesCount": 3,
                            "translationIssuesCount": 4
                          },
                          "customFields": [
                            {
                              "fieldUid": "rbrbn69wa1pa",
                              "fieldName": "Department",
                              "fieldValue": "Finance Dept"
                            },
                            {
                              "fieldUid": "3rrwchzmjf27",
                              "fieldName": "Adaptation Required",
                              "fieldValue": "true"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "404": {
            "description": "Job not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "NOT_FOUND_ERROR",
                        "errors": [
                          {
                            "key": null,
                            "message": null,
                            "details": null
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      },
      "put": {
        "summary": "Update job",
        "description": "This updates the attributes of the job, such as job name, description, due date, and reference number. The API works in a replace-all fashion. Fields, that are not passed, will be overwritten with empty values.",
        "tags": [
          "Jobs"
        ],
        "operationId": "updateJob",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "createdByUserUid": "518252370016",
                          "createdDate": "2017-11-03T14:18:37Z",
                          "description": "Description of the job",
                          "dueDate": "2020-11-03T14:18:37Z",
                          "jobName": "Test Job",
                          "jobNumber": "SMTL-123",
                          "jobStatus": "AWAITING_AUTHORIZATION",
                          "firstCompletedDate": "2015-11-21T11:51:17Z",
                          "firstAuthorizedDate": "2015-01-21T11:51:17Z",
                          "lastCompletedDate": "2015-11-21T11:51:17Z",
                          "lastAuthorizedDate": "2015-12-21T11:51:17Z",
                          "modifiedByUserUid": "598d89cce43a",
                          "modifiedDate": "2017-11-04T12:01:28Z",
                          "sourceFiles": [
                            {
                              "name": "admin.properties",
                              "uri": "admin.properties",
                              "fileUid": "5b0f5c5c4c"
                            }
                          ],
                          "targetLocaleIds": [
                            "uk-UA",
                            "ru-RU"
                          ],
                          "customFields": [
                            {
                              "fieldUid": "rbrbn69wa1pa",
                              "fieldName": "Department",
                              "fieldValue": "Finance Dept"
                            },
                            {
                              "fieldUid": "3rrwchzmjf27",
                              "fieldName": "Adaptation Required",
                              "fieldValue": "true"
                            }
                          ],
                          "translationJobUid": "jhcgalvnb6za",
                          "priority": 45
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error on updating a job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "code": "VALIDATION_ERROR",
                      "errors": [
                        {
                          "key": null,
                          "message": "Job can be edited only in DRAFT, AWAITING_AUTHORIZATION, IN_PROGRESS or COMPLETED statuses.",
                          "details": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "NOT_FOUND_ERROR",
                        "errors": [
                          {
                            "key": null,
                            "message": null,
                            "details": null
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "description": "Job not found error"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      },
      "delete": {
        "summary": "Delete job",
        "description": "This deletes a job. Only job that is in `CANCELLED` status can be deleted.\nIf a job is successfully deleted, a `200` response status will be returned.\n",
        "tags": [
          "Jobs"
        ],
        "operationId": "deleteJob",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NullDataJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error when deleting a job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "message": "Job can be deleted only in CANCELLED status"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "details": {},
                            "key": "invalid_token",
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/projects/{projectId}/jobs/search": {
      "post": {
        "summary": "Search for job",
        "description": "This searches for jobs based on hashcodes (string identifiers), `fileUri`s, and `translationJobUid`s. Will return max of 100 translation job list items.",
        "tags": [
          "Jobs"
        ],
        "operationId": "searchForJob",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchJobRequest"
              }
            }
          },
          "description": "The filters to use when searching for jobs within the project. Requirements: One of the parameters should non be an empty collection (fileUris or hashcodes or translationJobUids).",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListJobsResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "createdDate": "2015-11-21T11:51:17Z",
                              "description": "my job description",
                              "dueDate": "2015-11-21T11:51:17Z",
                              "jobName": "myJobName",
                              "jobStatus": "IN_PROGRESS",
                              "referenceNumber": "myReferenceNumber1",
                              "targetLocaleIds": [
                                "uk-UA",
                                "ru-RU"
                              ],
                              "translationJobUid": "abc123abc"
                            },
                            {
                              "createdDate": "2015-11-21T11:51:17Z",
                              "description": "my job description",
                              "dueDate": "2015-11-21T11:51:17Z",
                              "jobName": "myJobName",
                              "jobStatus": "IN_PROGRESS",
                              "referenceNumber": "myReferenceNumber1",
                              "targetLocaleIds": [
                                "uk-UA",
                                "ru-RU"
                              ],
                              "translationJobUid": "abc321xyz"
                            }
                          ],
                          "totalCount": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/processes/{processUid}": {
      "get": {
        "summary": "Check for an async process for job",
        "description": "This checks for an asynchronous process for a job.",
        "tags": [
          "Jobs"
        ],
        "operationId": "getJobAsyncProcessStatus",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "processUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessCheckJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "createdDate": "2015-11-21T11:51:17Z",
                          "modifiedDate": "2015-11-21T11:51:17Z",
                          "processState": "IN_PROGRESS | COMPLETED | FAILED",
                          "processUid": "13424r5-qaswerxs-43435ff",
                          "translationJobUid": "784578f-qaswerxs-43435ff"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/file/add": {
      "post": {
        "summary": "Add file to job",
        "description": "This adds all non-published strings from a file to a job. By default, the file will be added for all locales of the job, but you can change this by specifying `targetLocaleId`s for the job you wish to add the file into.\n\n**Validation rules:**\n- A job can contain a maximum of 5000 files.\n- Content can't be added to the job if the job doesn't contain any locales, and the request to add a file doesn't specify any locales.\n- The file (specified by the `fileUri`) can't be in the process of being uploaded / modified within Smartling. It should complete its upload process before being added to a job.\n- Any `targetLocale`s specified must be valid within the project the job has been created for.\n\nWhen the system can quickly add the file and its content to the job, it synchronously responds with status `200`. When the system cannot quickly add the file and its content to the job, then a `202` response is returned. The response contains a link to check the progress of the request. When a `202` is received, the process of adding the content to the job will not be complete until the returned process has completed.\n",
        "tags": [
          "Jobs"
        ],
        "operationId": "addFileToJob",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddFileJobRequest"
              }
            }
          },
          "description": "The `fileUri` (unique URI of the file). The file should not currently be in the process of being uploaded to Smartling before being added to a job. To check this, you can invoke the file-api /file/status API on the file and verify a `200` response before requesting the file be added to the job.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddContentSuccessFailCountJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "failCount": 1,
                          "successCount": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "ACCEPTED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncProcessJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "ACCEPTED",
                        "data": {
                          "message": "This process will continue asynchronously and may take up to a few minutes.",
                          "url": "https://api.smartling.com/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/processes/{processUid}"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error adding file to a job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": null,
                            "message": "File not found: <fileUri>",
                            "details": null
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "423": {
            "description": "The requested file is currently being processed by another operation. The file will be unlocked after the operation completes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobFiledAddError423Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": null,
                            "message": "The file is currently being processed and will be available in a few minutes.",
                            "details": null
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/file/remove": {
      "post": {
        "summary": "Remove file from job",
        "description": "Removes a file from a job. All content that is part of the file contained within that job will be removed from the job and will become unauthorized content.\n\nWhen the system can quickly remove the file and its content from the job synchronously, it responds with a `200` status. When the system cannot quickly remove the file and its content from the job, a `202` response is returned. The response contains a link to check the progress of the request. When a `202` is received, the process of removing the file and its content from the job will not be complete until the returned process has completed.\n",
        "tags": [
          "Jobs"
        ],
        "operationId": "removeFileFromJob",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveFileJobRequest"
              }
            }
          },
          "description": "The `fileUri` (unique URI of the file) that is to be removed from the job.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessFailCountJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "failCount": 1,
                          "successCount": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "ACCEPTED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncProcessJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "ACCEPTED",
                        "data": {
                          "message": "This process will continue asynchronously and may take up to a few minutes.",
                          "url": "https://api.smartling.com/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/processes/{processUid}"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "404": {
            "description": "Not found validation error",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "NOT_FOUND_ERROR",
                        "errors": [
                          {
                            "key": null,
                            "message": null,
                            "details": null
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/files": {
      "get": {
        "summary": "List files within job",
        "description": "This lists all files within a job.",
        "tags": [
          "Jobs"
        ],
        "operationId": "getJobFilesList",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The limit on the number of files returned.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "description": "The offset to use when searching for files.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFilesResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "uri": "/file/app1.properties",
                              "fileUid": "1234g67h90",
                              "localeIds": [
                                "en-US",
                                "fr-FR"
                              ]
                            },
                            {
                              "uri": "/file/app2.properties",
                              "fileUid": "123h56c891",
                              "localeIds": [
                                "en-US",
                                "de-DE"
                              ]
                            }
                          ],
                          "totalCount": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/locales/{targetLocaleId}": {
      "post": {
        "summary": "Add locale to job",
        "description": "This adds a locale to a job. When the system can quickly add the locale and any content to the job, it synchronously responds with status `200`. When the system can't quickly add the locale and any content to the job, a `202` response is returned. The response contains a link to check the progress of the request. When a `202` is received, the process of adding the content to the job will not be complete until the returned process has completed.\n",
        "tags": [
          "Jobs"
        ],
        "operationId": "addLocaleToJob",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "targetLocaleId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddLocaleJobRequest"
              }
            }
          },
          "description": "`syncContent` is default to true. When a new locale is being added to a job, by default all content in the job will be added to the job for the new locale. If set to false, then no content will be added to the job, and only a locale placeholder will be added to the job.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NullDataJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS"
                      }
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "ACCEPTED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncProcessJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "ACCEPTED",
                        "data": {
                          "message": "This process will continue asynchronously and may take up to a few minutes.",
                          "url": "https://api.smartling.com/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/processes/{processUid}"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      },
      "delete": {
        "summary": "Remove locale from job",
        "description": "This removes a locale from a job. When removing a locale from a job (and thus any content within that job for that locale), the content being removed will be unauthorized.\n\nWhen the system can quickly remove the locale and any content from the job, it synchronously responds with status `200`. When the system cannot quickly remove the locale and any content from the job, then a `202` response is returned. The response contains a link to check the progress of the request. When a `202` is received, the process of removing the content from the job will not be complete until the returned process has completed.\n",
        "tags": [
          "Jobs"
        ],
        "operationId": "removeLocaleFromJob",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "targetLocaleId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NullDataJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS"
                      }
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "ACCEPTED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncProcessJobResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "ACCEPTED",
                        "data": {
                          "message": "This process will continue asynchronously and may take up to a few minutes.",
                          "url": "https://api.smartling.com/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/processes/{processUid}"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/file/progress": {
      "get": {
        "summary": "Get progress of file within job",
        "description": "This shows the progress of a file within a job.",
        "tags": [
          "Jobs"
        ],
        "operationId": "getJobFileProgress",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fileUri",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgressResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "contentProgressReport": [
                            {
                              "progress": {
                                "percentComplete": 25,
                                "totalWordCount": 16
                              },
                              "targetLocaleDescription": "Ukrainian (Ukraine)",
                              "targetLocaleId": "uk-UA",
                              "unauthorizedProgressReport": {
                                "stringCount": 0,
                                "wordCount": 0
                              },
                              "workflowProgressReportList": [
                                {
                                  "workflowName": "Project Default",
                                  "workflowStepSummaryReportItemList": [
                                    {
                                      "stringCount": 4,
                                      "wordCount": 16,
                                      "workflowStepName": "Translation",
                                      "workflowStepType": "TRANSLATION",
                                      "workflowStepUid": "559ce40f2789"
                                    },
                                    {
                                      "stringCount": 0,
                                      "wordCount": 0,
                                      "workflowStepName": "Edit",
                                      "workflowStepType": "POST_TRANSLATION__EDIT",
                                      "workflowStepUid": "704a4b554b85"
                                    },
                                    {
                                      "stringCount": 0,
                                      "wordCount": 0,
                                      "workflowStepName": "Published",
                                      "workflowStepType": "PUBLISH",
                                      "workflowStepUid": "b50f989af2c3"
                                    }
                                  ],
                                  "workflowUid": "091e04a9faca"
                                }
                              ]
                            },
                            {
                              "progress": {
                                "percentComplete": 75,
                                "totalWordCount": 16
                              },
                              "targetLocaleDescription": "Russian",
                              "targetLocaleId": "ru-RU",
                              "unauthorizedProgressReport": {
                                "stringCount": 0,
                                "wordCount": 0
                              },
                              "workflowProgressReportList": [
                                {
                                  "workflowName": "Project Default",
                                  "workflowStepSummaryReportItemList": [
                                    {
                                      "stringCount": 1,
                                      "wordCount": 4,
                                      "workflowStepName": "Translation",
                                      "workflowStepType": "TRANSLATION",
                                      "workflowStepUid": "559ce40f2789"
                                    },
                                    {
                                      "stringCount": 2,
                                      "wordCount": 8,
                                      "workflowStepName": "Edit",
                                      "workflowStepType": "POST_TRANSLATION__EDIT",
                                      "workflowStepUid": "704a4b554b85"
                                    },
                                    {
                                      "stringCount": 1,
                                      "wordCount": 4,
                                      "workflowStepName": "Published",
                                      "workflowStepType": "PUBLISH",
                                      "workflowStepUid": "b50f989af2c3"
                                    }
                                  ],
                                  "workflowUid": "091e04a9faca"
                                }
                              ]
                            }
                          ],
                          "progress": {
                            "percentComplete": 50,
                            "totalWordCount": 32
                          },
                          "summaryReport": [
                            {
                              "stringCount": 1,
                              "wordCount": 4,
                              "workflowStepName": "Translation"
                            },
                            {
                              "stringCount": 2,
                              "wordCount": 8,
                              "workflowStepName": "Edit"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/progress": {
      "get": {
        "summary": "Get progress of job",
        "description": "This gets the progress of a job.",
        "tags": [
          "Jobs"
        ],
        "operationId": "getJobProgress",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "targetLocaleId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgressResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "contentProgressReport": [
                            {
                              "progress": {
                                "percentComplete": 25,
                                "totalWordCount": 16
                              },
                              "targetLocaleDescription": "Ukrainian (Ukraine)",
                              "targetLocaleId": "uk-UA",
                              "unauthorizedProgressReport": {
                                "stringCount": 0,
                                "wordCount": 0
                              },
                              "workflowProgressReportList": [
                                {
                                  "workflowName": "Project Default",
                                  "workflowStepSummaryReportItemList": [
                                    {
                                      "stringCount": 4,
                                      "wordCount": 16,
                                      "workflowStepName": "Translation",
                                      "workflowStepType": "TRANSLATION",
                                      "workflowStepUid": "559ce40f2789"
                                    },
                                    {
                                      "stringCount": 0,
                                      "wordCount": 0,
                                      "workflowStepName": "Edit",
                                      "workflowStepType": "POST_TRANSLATION__EDIT",
                                      "workflowStepUid": "704a4b554b85"
                                    },
                                    {
                                      "stringCount": 0,
                                      "wordCount": 0,
                                      "workflowStepName": "Published",
                                      "workflowStepType": "PUBLISH",
                                      "workflowStepUid": "b50f989af2c3"
                                    }
                                  ],
                                  "workflowUid": "091e04a9faca"
                                }
                              ]
                            },
                            {
                              "progress": {
                                "percentComplete": 75,
                                "totalWordCount": 16
                              },
                              "targetLocaleDescription": "Russian",
                              "targetLocaleId": "ru-RU",
                              "unauthorizedProgressReport": {
                                "stringCount": 0,
                                "wordCount": 0
                              },
                              "workflowProgressReportList": [
                                {
                                  "workflowName": "Project Default",
                                  "workflowStepSummaryReportItemList": [
                                    {
                                      "stringCount": 1,
                                      "wordCount": 4,
                                      "workflowStepName": "Translation",
                                      "workflowStepType": "TRANSLATION",
                                      "workflowStepUid": "559ce40f2789"
                                    },
                                    {
                                      "stringCount": 2,
                                      "wordCount": 8,
                                      "workflowStepName": "Edit",
                                      "workflowStepType": "POST_TRANSLATION__EDIT",
                                      "workflowStepUid": "704a4b554b85"
                                    },
                                    {
                                      "stringCount": 1,
                                      "wordCount": 4,
                                      "workflowStepName": "Published",
                                      "workflowStepType": "PUBLISH",
                                      "workflowStepUid": "b50f989af2c3"
                                    }
                                  ],
                                  "workflowUid": "091e04a9faca"
                                }
                              ]
                            }
                          ],
                          "progress": {
                            "percentComplete": 50,
                            "totalWordCount": 32
                          },
                          "summaryReport": [
                            {
                              "stringCount": 1,
                              "wordCount": 4,
                              "workflowStepName": "Translation"
                            },
                            {
                              "stringCount": 2,
                              "wordCount": 8,
                              "workflowStepName": "Edit"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "NOT_FOUND_ERROR",
                        "errors": [
                          {
                            "key": null,
                            "message": null,
                            "details": null
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/locales-completion-dates": {
      "get": {
        "summary": "Get last completion dates per locale of job",
        "description": "Returns the last completion date for any locale completed within the job.",
        "tags": [
          "Jobs"
        ],
        "operationId": "getJobLastCompletionDatesPerLocale",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A unique identifier for a job.",
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "completionDate": "2018-08-29T08:17:40Z",
                              "targetLocaleId": "de-DE"
                            }
                          ],
                          "totalCount": 1
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ListJobLocalesCompletionDatesResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "NOT_FOUND_ERROR",
                        "errors": [
                          {
                            "key": null,
                            "message": null,
                            "details": null
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/projects/{projectId}/jobs/{translationJobUid}/schedule": {
      "get": {
        "summary": "Find schedule for translation job",
        "description": "Get all schedule items for a specific job.",
        "tags": [
          "Jobs"
        ],
        "operationId": "findScheduleForTranslationJob",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A unique identifier for a job.",
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobSchedule"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "scheduleUid": "hfphrhef8awr",
                              "targetLocaleId": "de-DE",
                              "workflowStepUid": "568cd2bae16f",
                              "dueDate": "2020-11-21T01:51:17Z"
                            }
                          ],
                          "totalCount": 1
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "NOT_FOUND_ERROR",
                        "errors": [
                          {
                            "key": null,
                            "message": null,
                            "details": null
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      },
      "post": {
        "summary": "Modify schedule items for translation job",
        "description": "This modifies translation job schedule for provided items\n",
        "tags": [
          "Jobs"
        ],
        "operationId": "modifyScheduleItemsForTranslationJob",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A unique identifier for a job.",
            "in": "path",
            "name": "translationJobUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobScheduleEditCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobSchedule"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "scheduleUid": "hfphrhef8awr",
                              "targetLocaleId": "de-DE",
                              "workflowStepUid": "568cd2bae16f",
                              "dueDate": "2020-11-21T01:51:17Z"
                            }
                          ],
                          "totalCount": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/projects/{projectId}/custom-fields": {
      "get": {
        "summary": "Find custom fields for specified project",
        "description": "Returns custom fields assigned to the project. Order is the one that was specified during assignment operation.",
        "tags": [
          "Jobs"
        ],
        "operationId": "getProjectCustomFields",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFields"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "fieldUid": "ngahq6dgh4ed",
                              "type": "SELECTBOX",
                              "fieldName": "field-name",
                              "enabled": true,
                              "required": true,
                              "searchable": true,
                              "displayToTranslators": true,
                              "options": [
                                "option1",
                                "option2"
                              ],
                              "defaultValue": "default-field-name",
                              "description": "custom field description"
                            }
                          ],
                          "totalCount": 1
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "NOT_FOUND_ERROR",
                        "errors": [
                          {
                            "key": null,
                            "message": null,
                            "details": null
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      },
      "post": {
        "summary": "Assign new custom fields to project",
        "description": "Accepts new values for assignment. If empty list is passed - all assignments are deleted. Order of the fields in the request is preserved during saving.",
        "tags": [
          "Jobs"
        ],
        "operationId": "assignCustomFieldsToProject",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldAssignmentList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/accounts/{accountUid}/custom-fields": {
      "get": {
        "summary": "Find custom fields for specified account",
        "description": "Gets all custom fields for specified account.",
        "tags": [
          "Jobs"
        ],
        "operationId": "getAccountCustomFields",
        "parameters": [
          {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "accountUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchableOnly",
            "description": "Get only searchable custom fields.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "enabledOnly",
            "description": "Get only enabled custom fields.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFields"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "fieldUid": "ngahq6dgh4ed",
                              "type": "SELECTBOX",
                              "fieldName": "field-name",
                              "enabled": true,
                              "required": true,
                              "searchable": true,
                              "displayToTranslators": true,
                              "options": [
                                "option1",
                                "option2"
                              ],
                              "defaultValue": "default-field-name",
                              "description": "custom field description"
                            }
                          ],
                          "totalCount": 1
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "NOT_FOUND_ERROR",
                        "errors": [
                          {
                            "key": null,
                            "message": null,
                            "details": null
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      },
      "post": {
        "summary": "Create new custom field in account",
        "description": "Creates new custom field in account.",
        "tags": [
          "Jobs"
        ],
        "operationId": "createCustomField",
        "parameters": [
          {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "accountUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomField"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFields"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "fieldUid": "ngahq6dgh4ed",
                              "type": "SELECTBOX",
                              "fieldName": "field-name",
                              "enabled": true,
                              "required": true,
                              "searchable": true,
                              "displayToTranslators": true,
                              "options": [
                                "option1",
                                "option2"
                              ],
                              "defaultValue": "default-field-name",
                              "description": "custom field description"
                            }
                          ],
                          "totalCount": 1
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/jobs-api/v3/accounts/{accountUid}/custom-fields/{fieldUid}": {
      "put": {
        "summary": "Update custom field in account",
        "description": "Updates custom field in account using field UID specified.",
        "tags": [
          "Jobs"
        ],
        "operationId": "updateCustomField",
        "parameters": [
          {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "accountUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A unique identifier for a custom field.",
            "in": "path",
            "name": "fieldUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomField"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFields"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "fieldUid": "ngahq6dgh4ed",
                              "type": "SELECTBOX",
                              "fieldName": "field-name",
                              "enabled": true,
                              "required": true,
                              "searchable": true,
                              "displayToTranslators": true,
                              "options": [
                                "option1",
                                "option2"
                              ],
                              "defaultValue": "default-field-name",
                              "description": "custom field description"
                            }
                          ],
                          "totalCount": 1
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/tags-api/v2/accounts/{accountUid}/tags": {
      "post": {
        "summary": "List tags within a account",
        "description": "List / search tags within an account.",
        "tags": [
          "Tags"
        ],
        "operationId": "getTagsListByAccount",
        "parameters": [
          {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "accountUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "projectIds": {
                    "items": {
                      "description": "Optional array of unique project identifiers. This can be found in the Smartling Dashboard under Account Settings > API.",
                      "type": "string"
                    },
                    "maxItems": 1000,
                    "type": "array",
                    "example": [
                      "12ddasds5",
                      "dsde3e3f4"
                    ],
                    "description": "Optional array of unique project identifiers. This can be found in the Smartling Dashboard under Account Settings > API."
                  },
                  "tagMask": {
                    "description": "Search filter. Will return tags with partial match and is case insensitive.",
                    "type": "string"
                  },
                  "limit": {
                    "default": 1500,
                    "description": "The limit on the number of tags returned.",
                    "example": 30,
                    "maximum": 1500,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "offset": {
                    "default": 0,
                    "description": "The offset to use when searching for tags.",
                    "example": 30,
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountTagsResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "projectId": "123jlkj8c",
                              "tag": "StringTag"
                            },
                            {
                              "projectId": "hjhjkh44f",
                              "tag": "AnotherTag"
                            }
                          ],
                          "totalCount": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/tags-api/v2/accounts/$smartlingAccountUid/tags\n"
          }
        ]
      }
    },
    "/tags-api/v2/projects/{projectId}/tags": {
      "get": {
        "summary": "List tags within a project",
        "description": "List / search tags within a project.",
        "tags": [
          "Tags"
        ],
        "operationId": "getTagsListByProject",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Tag mask for search.",
            "in": "query",
            "name": "tagMask",
            "required": false,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "The limit on the number of tags returned.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "maximum": 100,
              "minimum": 0,
              "type": "number"
            }
          },
          {
            "description": "The offset to use when searching for tags.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "minimum": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectTagsResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "tag": "StringTag"
                            },
                            {
                              "tag": "AnotherTag"
                            }
                          ],
                          "totalCount": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/tags-api/v2/projects/$smartlingProjectId/tags\n"
          }
        ]
      }
    },
    "/tags-api/v2/projects/{projectId}/strings/tags/search": {
      "post": {
        "summary": "Get all tags for strings",
        "description": "Retrieve all tags linked to strings.",
        "tags": [
          "Tags"
        ],
        "operationId": "getAllTagsForStrings",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "stringHashcodes": {
                    "items": {
                      "description": "String hashcode",
                      "type": "string"
                    },
                    "maxItems": 1000,
                    "type": "array"
                  }
                },
                "required": [
                  "stringHashcodes"
                ],
                "type": "object"
              }
            }
          },
          "description": "List of string hashcodes",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStringsTagsResponse"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTagJSON\" https://api.smartling.com/tags-api/v2/projects/$smartlingProjectId/strings/tags/search\n"
          }
        ]
      }
    },
    "/tags-api/v2/projects/{projectId}/strings/tags/add": {
      "post": {
        "summary": "Add tags to strings",
        "description": "Add a list of tags to a list of strings.",
        "tags": [
          "Tags"
        ],
        "operationId": "addTagToStrings",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TagsWithStrings"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "response"
                  ],
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTagJSON\" https://api.smartling.com/tags-api/v2/projects/$smartlingProjectId/strings/tags/add\n"
          }
        ]
      }
    },
    "/tags-api/v2/projects/{projectId}/strings/tags/remove": {
      "post": {
        "summary": "Remove tags from strings",
        "description": "Remove a list of tags from a list of strings.",
        "tags": [
          "Tags"
        ],
        "operationId": "removeTagsFromStrings",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TagsWithStrings"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "response"
                  ],
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTagJSON\" https://api.smartling.com/tags-api/v2/projects/$smartlingProjectId/strings/tags/remove\n"
          }
        ]
      }
    },
    "/tags-api/v2/projects/{projectId}/strings/tags/remove/all": {
      "post": {
        "summary": "Remove all tags from strings",
        "description": "Remove all tags from a list of strings.",
        "tags": [
          "Tags"
        ],
        "operationId": "removeAllTagsFromStrings",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "stringHashcodes": {
                    "description": "List of string hashcodes",
                    "items": {
                      "type": "string"
                    },
                    "maxItems": 1000,
                    "type": "array"
                  }
                },
                "required": [
                  "stringHashcodes"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "response"
                  ],
                  "properties": {
                    "response": {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTagJSON\" https://api.smartling.com/tags-api/v2/projects/$smartlingProjectId/strings/tags/remove/all\n"
          }
        ]
      }
    },
    "/gdn-url-management-api/v2/projects/{projectId}/web-pages/list": {
      "post": {
        "summary": "Get list of URLs",
        "description": "Get list of URLs.",
        "tags": [
          "GDN url management"
        ],
        "operationId": "getGdnUrlsList",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebPageListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebPageListResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "created": "2015-11-21T11:51:17Z",
                              "domain": {
                                "name": "my.domain.com"
                              },
                              "urlPath": "/home/page.htm",
                              "webPageUid": "23dsd23md"
                            }
                          ],
                          "totalCount": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTagJSON\" https://api.smartling.com/gdn-url-management-api/v2/projects/$smartlingProjectId/web-pages/list\n"
          }
        ]
      }
    },
    "/gdn-url-management-api/v2/projects/{projectId}/web-pages/details": {
      "post": {
        "summary": "Get details for URLs",
        "description": "Retrieve details of the URLs.",
        "tags": [
          "GDN url management"
        ],
        "operationId": "getGdnUrlsDetails",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebPageDetailListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebPageDetailListResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "details": {
                                "contextUids": [
                                  "122ssasa323",
                                  "334asds3434"
                                ],
                                "created": "2015-11-21T01:51:17Z",
                                "stringCount": 10,
                                "wordCount": 25
                              },
                              "domain": {
                                "name": "my.domain.com"
                              },
                              "urlPath": "/home/page.htm",
                              "webPageUid": "23dsd23md"
                            }
                          ],
                          "totalCount": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTagJSON\" https://api.smartling.com/gdn-url-management-api/v2/projects/$smartlingProjectId/web-pages/details\n"
          }
        ]
      }
    },
    "/gdn-url-management-api/v2/projects/{projectId}/web-pages/{webPageUid}": {
      "get": {
        "summary": "Get details for URL",
        "description": "Retrieve detail for the URL.",
        "tags": [
          "GDN url management"
        ],
        "operationId": "getGdnUrlDetailsSingleUrl",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the URL",
            "in": "path",
            "name": "webPageUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebPageDetailsResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "details": {
                            "contextUids": [
                              "122ssasa323",
                              "334asds3434"
                            ],
                            "created": "2015-11-21T01:51:17Z",
                            "stringCount": 10,
                            "wordCount": 25
                          },
                          "domain": {
                            "name": "my.domain.com"
                          },
                          "urlPath": "/home/page.htm",
                          "webPageUid": "23dsd23md"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/gdn-url-management-api/v2/projects/$smartlingProjectId/web-pages/$webPageUid\n"
          }
        ]
      }
    },
    "/gdn-url-management-api/v2/projects/{projectId}/domains": {
      "get": {
        "summary": "Get domains for project",
        "description": "Get domains for project.",
        "tags": [
          "GDN url management"
        ],
        "operationId": "getProjectDomains",
        "parameters": [
          {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebPageDomainsResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "totalCount": 1,
                          "items": [
                            {
                              "name": "my.domain.com"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/gdn-url-management-api/v2/projects/$smartlingProjectId/domains\n"
          }
        ]
      }
    },
    "/jobs-batch-api/v1/projects/{projectId}/batches": {
      "post": {
        "summary": "Create batch",
        "description": "Creates a new batch for the given Job. If `authorize` is set to `true`, then Job authorize will be triggered on the batch execute step. When the batch is created, it has the status: `NEW`.",
        "tags": [
          "Job Batches V1"
        ],
        "operationId": "createJobBatchV1",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique identifier for a project.",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBatchRequestV1"
              }
            }
          },
          "description": "Create Batch Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBatchResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "batchUid": "qwe0rty98poi"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/responses-Error401ResponseDefinition"
          },
          "404": {
            "description": "provided translationJobUid is not found in the TMS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas-Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": {
                          "key": "job.not.found",
                          "message": "Job {translationJobUid} not found for project {projectId}."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/responses-Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST \"https://api.smartling.com/jobs-batch-api/v1/projects/$smartlingProjectId/batches\" -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d '{\"translationJobUid\": \"$translationJobUid\",\"authorize\": true}'\n"
          }
        ]
      },
      "get": {
        "summary": "List batches",
        "description": "List existing batches for the project, filtered by the given criteria.",
        "tags": [
          "Job Batches V1"
        ],
        "operationId": "getJobBatchesListV1",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "translationJobUid",
            "description": "A unique identifier for a translationJob.",
            "in": "query",
            "schema": {
              "format": "uid",
              "type": "string"
            }
          },
          {
            "name": "status",
            "description": "The status of the Batch",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/BatchStatus"
            }
          },
          {
            "name": "sortBy",
            "description": "The field to sort by",
            "in": "query",
            "schema": {
              "default": "createdDate",
              "enum": [
                "createdDate",
                "status"
              ],
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "description": "Sorting direction",
            "in": "query",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "offset",
            "description": "Standard Smartling limit and offset to paginate through results. 0 if not specified.",
            "in": "query",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "description": "Standard Smartling limit and offset to paginate through results. 20 batches are returned by default if not specified.",
            "in": "query",
            "schema": {
              "default": 20,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListBatchesResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "authorized": "true",
                              "batchUid": "559ce40f2789",
                              "createdDate": "2015-11-21T11:51:17Z",
                              "hasError": "false",
                              "modifiedDate": "2015-11-21T11:51:17Z",
                              "projectId": "asf53fds34",
                              "status": "DRAFT",
                              "translationJobUid": "635gf40f9846"
                            },
                            {
                              "authorized": "true",
                              "batchUid": "456dv32d0934",
                              "createdDate": "2015-11-21T11:51:17Z",
                              "hasError": "false",
                              "modifiedDate": "2015-11-22T10:24:14Z",
                              "projectId": "asf53fds34",
                              "status": "EXECUTING",
                              "translationJobUid": "635gf40f9846"
                            }
                          ],
                          "totalCount": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/responses-Error401ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/responses-Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\n'https://api.smartling.com/job-batches-api/v1/projects/$smartlingProjectId/batches?translationJobUid={translationJobUid}&status={status}&sortBy=createdDate&orderBy=desc&offset=0&limit=20' \\\n-H \"Authorization: Bearer $smartlingToken\"\n"
          }
        ]
      }
    },
    "/jobs-batch-api/v1/projects/{projectId}/batches/{batchUid}": {
      "get": {
        "summary": "Get batch status",
        "description": "Returns batch status with detailed statuses of all batch items and their locales.",
        "tags": [
          "Job Batches V1"
        ],
        "operationId": "getJobBatchStatusV1",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uid",
              "type": "string"
            }
          },
          {
            "name": "batchUid",
            "description": "A unique identifier for a batch.",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchStatusResponseV1"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "OK",
                        "data": {
                          "authorized": "true",
                          "files": [
                            {
                              "errors": "",
                              "fileUri": "files/example1.json",
                              "status": "ATTACHING",
                              "targetLocales": [
                                {
                                  "localeId": "de-DE",
                                  "stringsAdded": 0,
                                  "stringsSkipped": 0
                                },
                                {
                                  "localeId": "fr-FR",
                                  "stringsAdded": 0,
                                  "stringsSkipped": 0
                                }
                              ],
                              "updatedDate": "2015-11-21T11:53:17Z"
                            },
                            {
                              "errors": "",
                              "fileUri": "files/example2.xml",
                              "status": "UPLOADING",
                              "targetLocales": [
                                {
                                  "localeId": "de-DE",
                                  "stringsAdded": 0,
                                  "stringsSkipped": 0
                                },
                                {
                                  "localeId": "fr-FR",
                                  "stringsAdded": 0,
                                  "stringsSkipped": 0
                                }
                              ],
                              "updatedDate": "2015-11-21T11:54:19Z"
                            }
                          ],
                          "generalErrors": "",
                          "projectId": "dg63gkb4v",
                          "status": "ADDING_FILES",
                          "translationJobUid": "sjhs782hdb4djf",
                          "updatedDate": "2015-11-21T11:51:17Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/responses-Error401ResponseDefinition"
          },
          "404": {
            "description": "Batch provided in path is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas-Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": {
                          "key": "batch.not.found",
                          "message": "Batch with uid={batchUid} and projectId={projectId} not found."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/responses-Error500ResponseDefinition"
          }
        }
      },
      "post": {
        "summary": "Execute batch",
        "description": "Triggers asynchronous execution of a batch.\n\nIn the execution flow, the batch waits until upload and attach processes are completed successfully (or failed for any reason). When all of these asynchronous processes are completed, job `authorize` is triggered if it was requested, and the batch becomes a status of `COMPLETED`.\n\nBatch execution is allowed only if the batch is in `ADDING_FILES` status.",
        "tags": [
          "Job Batches V1"
        ],
        "operationId": "startJobBatchV1",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique identifier for a project.",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uid",
              "type": "string"
            }
          },
          {
            "name": "batchUid",
            "description": "A unique identifier for a batch.",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchActionRequestV1"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "ACCEPTED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/components-schemas-EmptyResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/responses-Error401ResponseDefinition"
          },
          "404": {
            "description": "Batch provided in path is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas-Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": {
                          "key": "batch.not.found",
                          "message": "Batch with uid={batchUid} and projectId={projectId} not found."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/responses-Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST \\\n'https://api.smartling.com/job-batches-api/v2/projects/$smartlingProjectId/batches/$batchUid' \\\n-H \"Authorization: Bearer $smartlingToken\" \\\n-H \"Content-Type: application/json\" \\\n-d '{ \"action\": \"execute\" }'\n"
          }
        ]
      }
    },
    "/jobs-batch-api/v1/projects/{projectId}/batches/{batchUid}/file": {
      "post": {
        "summary": "Add file to a batch",
        "description": "This endpoint is actually a proxy for Upload File in the Files API, and it works with these two differences:\n 1. It additionally gets `batchUid` as a path parameter.\n 2. It doesn't relay `localeIdsToAuthorize` to Files Api, therefore the file stays unauthorized. Instead, `localeIdsToAuthorize` are saved just for this batch session and are used when a file is being attached to a job.\n\nWhen the first file is added to the new batch, it becomes an `ADDING_FILES` status. Adds original source content to a Job batch in Smartling.\n\nThe curl example provided will upload your Java properties file directly to a Smartling project, identified by the `projectId`, and attaches it to a Job linked to `batchUid`. The response is returned right after the content of a file is accepted by the Files API. After that, the Batch service controls whether the file upload finished. Content is parsed, all strings are ingested, and the file is then attached to the Job which is linked to the batch for locales, described in `localeIdsToAuthorize`.\n",
        "tags": [
          "Job Batches V1"
        ],
        "operationId": "addFileToJobBatchV1",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique identifier for a project.",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uid",
              "type": "string"
            }
          },
          {
            "name": "batchUid",
            "description": "A unique identifier for a batch.",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file contents to upload."
                  },
                  "fileUri": {
                    "description": "A value that uniquely identifies the uploaded file. This ID can be used to request the file back. We recommend that you use file path and file name, similar to how version control systems identify the file.\n\nExample: `/myproject/i18n/ui.properties`\n",
                    "type": "string"
                  },
                  "fileType": {
                    "$ref": "#/components/schemas/FileType"
                  },
                  "authorize": {
                    "default": false,
                    "description": "Ignored\nEndpoint accepts this field to be consistent with `File Upload` but it doesn't relay it to File Api\n",
                    "type": "boolean"
                  },
                  "localeIdsToAuthorize[]": {
                    "description": "This value declares locales list which should be used when file is attached to a job.\n\n**Note**: File will not be authorized for these locales once it is uploaded. Authorization is happened only when job is authorized.\n",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "smartling.namespace": {
                    "description": "This is only for accounts created after July 31st, 2015. Define a custom [namespace](https://help.smartling.com/hc/en-us/articles/360008143833) for the file.\n\n**Note**: While this parameter shares the format of other file directives, it will not work as an inline directive and must be specified in the API call.\n",
                    "type": "string"
                  },
                  "smartling.file_charset": {
                    "description": "Specifies a custom charset for text-format files. The value should be the name of the character set. See a full list of supported character sets here.\n\nIf this directive is not used, Smartling will use the ```Content-Type``` request header to determine if the content is encoded with UTF-16, UTF-16B or UTF-16LE. If there is no ```Content-Type``` header, Smartling will examine the file for UTF-16 characters. If none are detected, UTF-8 encoding will be used.\n\n**Note**: Once this property has been set for a file, it cannot be changed. If you reupload the file, it will use the original charset, even if you change the directive. An error will be returned if this directive is used when uploading binary-format file types, such as Office or IDML files.\n",
                    "type": "string"
                  },
                  "smartling.[command]": {
                    "description": "Provides custom parser configuration for supported file types. See [Supported File Types](https://help.smartling.com/hc/en-us/articles/360007998893) for more details.\n",
                    "type": "string"
                  },
                  "callbackUrl": {
                    "description": "A GET request that creates a callback to a URL when a file is 100% published for a locale. The callback gives the fileUri and locale with the format `http[/s]://your.url?locale=xx-XX&fileUri=your.file`. If you upload the file again, without a callbackUrl, it will remove any previous callbackUrl for that file. The RequestBin (http://requestb.in) service is a convenient way to test callback. RequestBin generates a short-lived disposable URL that displays all posted requests.\n\nIf a callback fails, Smartling will make multiple attempts to reach the designated URL, however, we do not keep retrying a failed callback indefinitely. Try to make sure your callback URL is as stable as possible and be aware that callbacks are not a 100% reliable way of being notified that a file is published.\n\nIf the upload has begun but is taking more than a minute to complete, it responds with status `202`.\n",
                    "format": "url",
                    "type": "string"
                  }
                },
                "required": [
                  "file",
                  "fileUri",
                  "fileType",
                  "localeIdsToAuthorize[]"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "ACCEPTED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesAPIUploadAcceptedResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "message": "Your file was successfully uploaded. Word and string counts are not available right now."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/responses-Error401ResponseDefinition"
          },
          "404": {
            "description": "Batch provided in path is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas-Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": {
                          "key": "batch.not.found",
                          "message": "Batch with uid={batchUid} and projectId={projectId} not found."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "423": {
            "description": "The requested file is currently being processed by another operation. The file will be unlocked after the operation completes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas-Error423Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "RESOURCE_LOCKED",
                        "errors": {
                          "key": "resource.locked",
                          "message": "The file is currently being processed and will be available in a few minutes."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/responses-Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST \\\n'https://api.smartling.com/jobs-batch-api/v1/projects/$smartlingProjectId/batches/{batchUid}/file' \\\n-H \"Authorization: Bearer $smartlingToken\" \\\n-F \"file=@file.properties;type=text/plain\" \\\n-F \"fileUri=file.properties\" \\\n-F \"fileType=javaProperties\" \\\n-F \"localeIdsToAuthorize[]=fr-FR\" \\\n-F \"localeIdsToAuthorize[]=ru-RU\"\n"
          }
        ]
      }
    },
    "/jobs-batch-api/v2/projects/{projectId}/batches/{batchUid}/file": {
      "post": {
        "summary": "Add file to a batch asynchrounosly",
        "description": "This endpoint is actually a proxy for Upload File in the Files API, and it works with these two differences:\n 1. It additionally gets `batchUid` as a path parameter.\n 2. It doesn't relay `localeIdsToAuthorize` to Files Api, therefore the file stays unauthorized. Instead, `localeIdsToAuthorize` are saved just for this batch session and are used when a file is being attached to a job.\n\nWhen the first file is added to the new batch, the batch changes to `ADDING_FILES` status. Adds original source content to a Job batch in Smartling.\n\nThe curl example provided will upload your Java properties file directly to a Smartling project, identified by the `projectId`, and attaches it to a Job linked to `batchUid`. The response is returned right after the content of a file is accepted by the Files API. After that, the Batch service controls whether the file upload finished. Content is parsed, all strings are ingested, and the file is then attached to the Job which is linked to the batch for locales, described in `localeIdsToAuthorize`.\nEndpoint returns response as soon as a file is uploaded to jobs batch server. File is uploaded to FILE API in separate thread.\n",
        "tags": [
          "Job Batches V1"
        ],
        "operationId": "addFileToJobBatchAsyncV1",
        "parameters": [
          {
            "name": "projectId",
            "description": "A unique identifier for a project.",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uid",
              "type": "string"
            }
          },
          {
            "name": "batchUid",
            "description": "A unique identifier for a batch.",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file contents to upload."
                  },
                  "fileUri": {
                    "description": "A value that uniquely identifies the uploaded file. This ID can be used to request the file back. We recommend that you use file path and file name, similar to how version control systems identify the file.\n\nExample: `/myproject/i18n/ui.properties`\n",
                    "type": "string"
                  },
                  "fileType": {
                    "$ref": "#/components/schemas/FileType"
                  },
                  "authorize": {
                    "default": false,
                    "description": "Ignored\nEndpoint accepts this field to be consistent with `File Upload` but it doesn't relay it to File Api\n",
                    "type": "boolean"
                  },
                  "localeIdsToAuthorize[]": {
                    "description": "This value declares locales list which should be used when file is attached to a job.\n\n**Note**: File will not be authorized for these locales once it is uploaded. Authorization happens only when a job is authorized.\n",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "smartling.namespace": {
                    "description": "This is only for accounts created after July 31st, 2015. Define a custom [namespace](https://help.smartling.com/hc/en-us/articles/360008143833) for the file.\n\n**Note**: While this parameter shares the format of other file directives, it will not work as an inline directive and must be specified in the API call.\n",
                    "type": "string"
                  },
                  "smartling.file_charset": {
                    "description": "Specifies a custom charset for text-format files. The value should be the name of the character set. See a full list of supported character sets here.\n\nIf this directive is not used, Smartling will use the ```Content-Type``` request header to determine if the content is encoded with UTF-16, UTF-16B or UTF-16LE. If there is no ```Content-Type``` header, Smartling will examine the file for UTF-16 characters. If none are detected, UTF-8 encoding will be used.\n\n**Note**: Once this property has been set for a file, it cannot be changed. If you reupload the file, it will use the original charset, even if you change the directive. An error will be returned if this directive is used when uploading binary-format file types, such as Office or IDML files.\n",
                    "type": "string"
                  },
                  "smartling.[command]": {
                    "description": "Provides custom parser configuration for supported file types. See [Supported File Types](https://help.smartling.com/hc/en-us/articles/360007998893) for more details.\n",
                    "type": "string"
                  },
                  "callbackUrl": {
                    "description": "A GET request that creates a callback to a URL when a file is 100% published for a locale. The callback gives the fileUri and locale with the format `http[/s]://your.url?locale=xx-XX&fileUri=your.file`. If you upload the file again, without a callbackUrl, it will remove any previous callbackUrl for that file. The RequestBin (http://requestb.in) service is a convenient way to test callback. RequestBin generates a short-lived disposable URL that displays all posted requests.\n\nIf a callback fails, Smartling will make multiple attempts to reach the designated URL, however, we do not keep retrying a failed callback indefinitely. Try to make sure your callback URL is as stable as possible and be aware that callbacks are not a 100% reliable way of being notified that a file is published.\n\nIf the upload has begun but is taking more than a minute to complete, it responds with status `202`.\n",
                    "format": "url",
                    "type": "string"
                  }
                },
                "required": [
                  "file",
                  "fileUri",
                  "fileType",
                  "localeIdsToAuthorize[]"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "ACCEPTED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/components-schemas-EmptyResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "ACCEPTED",
                        "data": null
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/responses-Error401ResponseDefinition"
          },
          "404": {
            "description": "Batch provided in path is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas-Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": {
                          "key": "batch.not.found",
                          "message": "Batch with uid={batchUid} and projectId={projectId} not found."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/responses-Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST \\\n'https://api.smartling.com/jobs-batch-api/v2/projects/$smartlingProjectId/batches/{batchUid}/file' \\\n-H \"Authorization: Bearer $smartlingToken\" \\\n-F \"file=@file.properties;type=text/plain\" \\\n-F \"fileUri=file.properties\" \\\n-F \"fileType=javaProperties\" \\\n-F \"localeIdsToAuthorize[]=fr-FR\" \\\n-F \"localeIdsToAuthorize[]=ru-RU\"\n"
          }
        ]
      }
    },
    "/job-batches-api/v2/projects/{projectId}/batches": {
      "post": {
        "summary": "Create batch",
        "description": "Creates a new batch for the given Job with a list of file names to be uploaded. File names can be added while files are uploading to the batch, but only before the batch will start executing. The batch is executed as soon as the last file in the initial list or added files are uploaded or cancelled",
        "tags": [
          "Job Batches V2"
        ],
        "operationId": "createJobBatchV2",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uid",
              "type": "string"
            },
            "description": "Unique identifier of the project within an account."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBatchRequestV2"
              }
            }
          },
          "description": "Create Batch Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBatchResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "batchUid": "qwe0rty98poi"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/responses-Error401ResponseDefinition"
          },
          "404": {
            "description": "provided translationJobUid is not found in the TMS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas-Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": {
                          "key": "job.not.found",
                          "message": "Job {translationJobUid} not found for project {projectId}."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/responses-Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST \"https://api.smartling.com/job-batches-api/v2/projects/$smartlingProjectId/batches\" -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d '{\"translationJobUid\": \"$translationJobUid\", \"authorize\": true, \"fileUris\": [\"example.json\", \"test.xml\"]}'\n"
          }
        ]
      },
      "get": {
        "summary": "List batches",
        "description": "List existing batches for the project, filtered by the given criteria.",
        "tags": [
          "Job Batches V2"
        ],
        "operationId": "getJobBatchesListV2",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uid",
              "type": "string"
            },
            "description": "Unique identifier of the project within an account."
          },
          {
            "description": "A unique identifier for a translationJob.",
            "in": "query",
            "name": "translationJobUid",
            "schema": {
              "format": "uid",
              "type": "string"
            }
          },
          {
            "description": "The status of the Batch",
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/BatchStatus"
            }
          },
          {
            "description": "The field to sort by",
            "in": "query",
            "name": "sortBy",
            "schema": {
              "default": "createdDate",
              "enum": [
                "createdDate",
                "status"
              ],
              "type": "string"
            }
          },
          {
            "description": "Sorting direction",
            "in": "query",
            "name": "orderBy",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Standard Smartling limit and offset to paginate through results. 0 if not specified.",
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "description": "Standard Smartling limit and offset to paginate through results. 20 batches are returned by default if not specified.",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 20,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListBatchesResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "authorized": "true",
                              "batchUid": "559ce40f2789",
                              "createdDate": "2015-11-21T11:51:17Z",
                              "hasError": "false",
                              "modifiedDate": "2015-11-21T11:51:17Z",
                              "projectId": "asf53fds34",
                              "status": "DRAFT",
                              "translationJobUid": "635gf40f9846"
                            },
                            {
                              "authorized": "true",
                              "batchUid": "456dv32d0934",
                              "createdDate": "2015-11-21T11:51:17Z",
                              "hasError": "false",
                              "modifiedDate": "2015-11-22T10:24:14Z",
                              "projectId": "asf53fds34",
                              "status": "EXECUTING",
                              "translationJobUid": "635gf40f9846"
                            }
                          ],
                          "totalCount": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/responses-Error401ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/responses-Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\n'https://api.smartling.com/job-batches-api/v2/projects/$smartlingProjectId/batches?translationJobUid={translationJobUid}&status={status}&sortBy=createdDate&orderBy=desc&offset=0&limit=20' \\\n-H \"Authorization: Bearer $smartlingToken\"\n"
          }
        ]
      }
    },
    "/job-batches-api/v2/projects/{projectId}/batches/{batchUid}": {
      "get": {
        "summary": "Get batch status",
        "description": "Returns batch status with detailed statuses of all batch items and their locales.",
        "tags": [
          "Job Batches V2"
        ],
        "operationId": "getJobBatchStatusV2",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uid",
              "type": "string"
            },
            "description": "Unique identifier of the project within an account."
          },
          {
            "name": "batchUid",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uid",
              "type": "string"
            },
            "description": "A unique identifier for a batch."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchStatusResponseV2"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "OK",
                        "data": {
                          "authorized": "true",
                          "files": [
                            {
                              "errors": "",
                              "fileUri": "files/example1.json",
                              "status": "ATTACHING",
                              "targetLocales": [
                                {
                                  "localeId": "de-DE",
                                  "stringsAdded": 0
                                },
                                {
                                  "localeId": "fr-FR",
                                  "stringsAdded": 0
                                }
                              ],
                              "updatedDate": "2015-11-21T11:53:17Z"
                            },
                            {
                              "errors": "",
                              "fileUri": "files/example2.xml",
                              "status": "UPLOADING",
                              "targetLocales": [
                                {
                                  "localeId": "de-DE",
                                  "stringsAdded": 0
                                },
                                {
                                  "localeId": "fr-FR",
                                  "stringsAdded": 0
                                }
                              ],
                              "updatedDate": "2015-11-21T11:54:19Z"
                            }
                          ],
                          "generalErrors": "",
                          "projectId": "dg63gkb4v",
                          "status": "ADDING_FILES",
                          "translationJobUid": "sjhs782hdb4djf",
                          "updatedDate": "2015-11-21T11:51:17Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/responses-Error401ResponseDefinition"
          },
          "404": {
            "description": "Batch provided in path is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas-Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": {
                          "key": "batch.not.found",
                          "message": "Batch with uid={batchUid} and projectId={projectId} not found."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/responses-Error500ResponseDefinition"
          }
        }
      },
      "put": {
        "summary": "Process batch action",
        "description": "Supports two actions now:\nREGISTER_FILE - adds given file uri to the initial file name list for uploading. Creates a new batchItem if the batch is in ADDING_FILES status.\nCANCEL_FILE - tells that file will not be uploaded Changes batchItem status to CANCELED and writes reason to \"errors\" column",
        "tags": [
          "Job Batches V2"
        ],
        "operationId": "processBatchActionV2",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uid",
              "type": "string"
            },
            "description": "Unique identifier of the project within an account."
          },
          {
            "name": "batchUid",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uid",
              "type": "string"
            },
            "description": "A unique identifier for a batch."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchActionRequestV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/components-schemas-EmptyResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/responses-Error401ResponseDefinition"
          },
          "404": {
            "description": "Batch provided in path is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas-Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": {
                          "key": "batch.not.found",
                          "message": "Batch with uid={batchUid} and projectId={projectId} not found."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/responses-Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT \\\n'https://api.smartling.com/job-batches-api/v2/projects/$smartlingProjectId/batches/$batchUid' \\\n-H \"Authorization: Bearer $smartlingToken\" \\\n-H \"Content-Type: application/json\" \\\n-d '{ \"action\": \"CANCEL_FILE\", \"fileUri\": \"file1.xml\", \"reason\": \"Requested asset doesn't exist in Zendesk\" }'\n"
          }
        ]
      }
    },
    "/job-batches-api/v2/projects/{projectId}/batches/{batchUid}/file": {
      "post": {
        "summary": "Upload file to a batch",
        "description": "This endpoint is actually a proxy for Upload File in the Files API, and\nit works with these two differences:\n 1. It additionally gets `batchUid` as a path parameter.\n 2. It doesn't relay `localeIdsToAuthorize` to Files Api, therefore the file stays unauthorized. Instead, `localeIdsToAuthorize` are saved just for this batch session and are used when a file is being attached to a job.\n\nUpload is only possible if the file was declared in the `Create Batch` request or added with `REGISTER_FILE` action.\nWhen the first file is uploaded to the new batch, the batch status changes\nto `ADDING_FILES`. Adds original source content to a Job batch in Smartling.\n\nThe provided curl example will upload your Java properties file directly\nto a Smartling project, identified by the `projectId`, and attaches it\nto a Job linked to `batchUid`. The response is returned right after the\ncontent of a file is accepted by the Files API. After that, the Batch\nservice controls whether the file upload finished. Content is parsed,\nall strings are ingested, and the file is then attached to the Job which\nis linked to the batch for locales, described in `localeIdsToAuthorize`.\n\nEndpoint returns response as soon as a file is uploaded to job batches server.\nFile is uploaded to FILE API asynchronously.\n\n**Common issues**:\n\n* Each file must include the `fileUri` registered with the batch, upon upload. For example, if you have created a batch with the single file URI `test1.xml` and you attempt to upload this with the file URI `test2.xml` it will fail, and you will get an error. But you can always use `REGISTER_FILE` action.\n* File URI's must be unique per batch, even if you want to authorize it to two or more locales. For example, if you have file `test1.xml` that should be authorized for `es` and `de`, and you attempt to upload it twice (`fileUri=test1.xml` + `localeIdsToAuthorize[]=es` and `fileUri=test1.xml` + `localeIdsToAuthorize[]=de`), it will fail and you will get an error. The second upload will be rejected and file will be authorized only for `es` locale. You must always pass all desired locales with the registered fileUri (`fileUri=test1.xml` + `localeIdsToAuthorize[]=es,de`).",
        "tags": [
          "Job Batches V2"
        ],
        "operationId": "uploadFileToJobBatchV2",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uid",
              "type": "string"
            },
            "description": "Unique identifier of the project within an account."
          },
          {
            "name": "batchUid",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uid",
              "type": "string"
            },
            "description": "A unique identifier for a batch."
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file contents to upload."
                  },
                  "fileUri": {
                    "description": "A value that uniquely identifies the uploaded file. This ID can be used to request the file back. We recommend that you use file path and file name, similar to how version control systems identify the file.\n\nExample: `/myproject/i18n/ui.properties`\n",
                    "type": "string"
                  },
                  "fileType": {
                    "$ref": "#/components/schemas/FileType"
                  },
                  "authorize": {
                    "default": false,
                    "description": "Ignored\nEndpoint accepts this field to be consistent with `File Upload` but it doesn't relay it to File Api\n",
                    "type": "boolean"
                  },
                  "localeIdsToAuthorize[]": {
                    "description": "This value declares locales list which should be used when file is attached to a job.\n\n**Note**: File will not be authorized for these locales once it is uploaded. Authorization happens only when a job is authorized.\n",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "smartling.namespace": {
                    "description": "This is only for accounts created after July 31st, 2015. Define a custom [namespace](https://help.smartling.com/hc/en-us/articles/360008143833) for the file.\n\n**Note**: While this parameter shares the format of other file directives, it will not work as an inline directive and must be specified in the API call.\n",
                    "type": "string"
                  },
                  "smartling.file_charset": {
                    "description": "Specifies a custom charset for text-format files. The value should be the name of the character set. See a full list of supported character sets here.\n\nIf this directive is not used, Smartling will use the ```Content-Type``` request header to determine if the content is encoded with UTF-16, UTF-16B or UTF-16LE. If there is no ```Content-Type``` header, Smartling will examine the file for UTF-16 characters. If none are detected, UTF-8 encoding will be used.\n\n**Note**: Once this property has been set for a file, it cannot be changed. If you reupload the file, it will use the original charset, even if you change the directive. An error will be returned if this directive is used when uploading binary-format file types, such as Office or IDML files.\n",
                    "type": "string"
                  },
                  "smartling.[command]": {
                    "description": "Provides custom parser configuration for supported file types. See [Supported File Types](https://help.smartling.com/hc/en-us/articles/360007998893) for more details.\n",
                    "type": "string"
                  },
                  "callbackUrl": {
                    "description": "A GET request that creates a callback to a URL when a file is 100% published for a locale. The callback gives the fileUri and locale with the format `http[/s]://your.url?locale=xx-XX&fileUri=your.file`. If you upload the file again, without a callbackUrl, it will remove any previous callbackUrl for that file. The RequestBin (http://requestb.in) service is a convenient way to test callback. RequestBin generates a short-lived disposable URL that displays all posted requests.\n\nIf a callback fails, Smartling will make multiple attempts to reach the designated URL, however, we do not keep retrying a failed callback indefinitely. Try to make sure your callback URL is as stable as possible and be aware that callbacks are not a 100% reliable way of being notified that a file is published.\n\nIf the upload has begun but is taking more than a minute to complete, it responds with status `202`.\n",
                    "format": "url",
                    "type": "string"
                  }
                },
                "required": [
                  "file",
                  "fileUri",
                  "fileType",
                  "localeIdsToAuthorize[]"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "ACCEPTED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/components-schemas-EmptyResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "ACCEPTED",
                        "data": null
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/responses-Error401ResponseDefinition"
          },
          "404": {
            "description": "Batch provided in path is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas-Error400Response"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": {
                          "key": "batch.not.found",
                          "message": "Batch with uid={batchUid} and projectId={projectId} not found."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/responses-Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST \\\n'https://api.smartling.com/job-batches-api/v2/projects/$smartlingProjectId/batches/{batchUid}/file' \\\n-H \"Authorization: Bearer $smartlingToken\" \\\n-F \"file=@file.properties;type=text/plain\" \\\n-F \"fileUri=file.properties\" \\\n-F \"fileType=javaProperties\" \\\n-F \"localeIdsToAuthorize[]=fr-FR\" \\\n-F \"localeIdsToAuthorize[]=ru-RU\"\n"
          }
        ]
      }
    },
    "/vendors-api/v2/agencies/{agencyUid}/jobs": {
      "get": {
        "summary": "List available jobs",
        "description": "Returns the list of jobs available for the agency.",
        "tags": [
          "Vendors"
        ],
        "operationId": "getJobsListByAgency",
        "parameters": [
          {
            "in": "path",
            "name": "agencyUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorsAPIJobsListSuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" \\\nhttps://api.smartling.com/vendors-api/v2/agencies/{agencyUid}/jobs\n"
          }
        ]
      }
    },
    "/reports-api/v3/word-count": {
      "get": {
        "summary": "Get Word Count Report",
        "description": "Word Count report data for the specified parameters.",
        "tags": [
          "Reports"
        ],
        "operationId": "getWordCountReport",
        "parameters": [
          {
            "description": "A parameter to limit words processed on or after the ```startDate```, in America/New_York timezone.",
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "format": "YYYY-MM-DD",
              "type": "string"
            }
          },
          {
            "description": "A parameter to limit words processed on or before the ```endDate```, in America/New_York timezone.",
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "format": "YYYY-MM-DD",
              "type": "string"
            }
          },
          {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "query",
            "name": "accountUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional array of unique project identifiers. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "query",
            "name": "projectIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Optional parameter to filter to the specified list of translation jobs.",
            "in": "query",
            "name": "jobUids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Optional parameter of unique agency identifier.",
            "in": "query",
            "name": "agencyUid",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional parameter to filter to the specified list of translation resources.",
            "in": "query",
            "name": "userUids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Optional parameter to filter to the specified list of translation locale IDs.",
            "in": "query",
            "name": "targetLocaleIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Optional comma-separated list of fields names to be returned by the endpoint. If this parameter is not set then the list of fields returned is defined by `include...` parameters.\n\nBoth `fields` and `include...` parameters are not allowed at the same time.\n\nThe supported list of fields names is:\n\n  - accountUid\n\n  - accountName\n\n  - projectId\n\n  - projectName\n\n  - targetLocaleId\n\n  - targetLocale\n\n  - jobUid\n\n  - jobName\n\n  - jobReferenceNumber\n\n  - translationResourceUid\n\n  - translationResourceName\n\n  - agencyUid\n\n  - agencyName\n\n  - workflowStepType\n\n  - workflowStepUid\n\n  - workflowStepName\n\n  - fuzzyProfileName\n\n  - fuzzyTier\n\n  - wordCount\n\n  - weightedWordCount\n\n  - characterCount. Please note: the column shows correct data since 2022-10-01.\n",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional parameter to specify whether the report should group word count by translation resource name.\n\nDeprecated, use parameter `fields` instead.\n",
            "in": "query",
            "name": "includeTranslationResource",
            "required": false,
            "deprecated": true,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "Optional parameter to specify whether the report should group word count by translation job name.\n\nDeprecated, use parameter `fields` instead.\n",
            "in": "query",
            "name": "includeJob",
            "required": false,
            "deprecated": true,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "Optional parameter to specify whether the report should group word count by translation job and include reference number in the response.\n\nDeprecated, use parameter `fields` instead.\n",
            "in": "query",
            "name": "includeJobReferenceNumber",
            "required": false,
            "deprecated": true,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Optional parameter to specify whether the report should group word count by fuzzy match profile and tier.\n\nDeprecated, use parameter `fields` instead.\n",
            "in": "query",
            "name": "includeFuzzyMatchProfile",
            "required": false,
            "deprecated": true,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "Optional parameter to specify whether the report should group word count by workflow step uid and name.\n\nDeprecated, use parameter `fields` instead.\n",
            "in": "query",
            "name": "includeWorkflowStep",
            "required": false,
            "deprecated": true,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Maximum number of records to return in the report.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10000,
              "maximum": 10000,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WordCountResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "items": [
                            {
                              "accountName": "Test Account",
                              "accountUid": "35a84f71",
                              "agencyName": "Test Agency 1",
                              "agencyUid": "0ed85b93",
                              "fuzzyProfileName": "Default",
                              "fuzzyTier": "85 - 94.9%",
                              "jobName": "Translation Job 1",
                              "jobUid": "f12ad8e9",
                              "jobReferenceNumber": "Job reference number",
                              "projectId": "ba952f4c",
                              "projectName": "Test Project 1",
                              "targetLocaleId": "es-ES",
                              "targetLocaleName": "Spanish (Spain)",
                              "translationResourceName": "Agency Translator 5",
                              "translationResourceUid": "da57302e",
                              "weightedWordCount": 4,
                              "wordCount": 20,
                              "characterCount": 101,
                              "workflowStepType": "Translation",
                              "workflowStepUid": "lk3gh7zr20ao",
                              "workflowStepName": "Translation"
                            },
                            {
                              "accountName": "Test Account",
                              "accountUid": "35a84f71",
                              "agencyName": "Test Agency 2",
                              "agencyUid": "4d6230e1",
                              "fuzzyProfileName": "Default",
                              "fuzzyTier": "85 - 94.9%",
                              "jobName": "Translation Job 1",
                              "jobUid": "f12ad8e9",
                              "jobReferenceNumber": "Job reference number",
                              "projectId": "ba952f4c",
                              "projectName": "Test Project 1",
                              "targetLocaleId": "es-ES",
                              "targetLocale": "Spanish (Spain)",
                              "translationResourceName": "Agency Editor 12",
                              "translationResourceUid": "5eb90a14",
                              "weightedWordCount": 20,
                              "wordCount": 20,
                              "characterCount": 101,
                              "workflowStepType": "Edit",
                              "workflowStepUid": "ac7ac1bd15bf",
                              "workflowStepName": "Edit"
                            }
                          ],
                          "resultsTruncated": false
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/reports-api/v3/word-count/csv": {
      "get": {
        "summary": "Export Word Count in CSV format",
        "description": "Export Word Count report in CSV format.",
        "tags": [
          "Reports"
        ],
        "operationId": "exportWordCountReport",
        "parameters": [
          {
            "description": "A parameter to limit words processed on or after the ```startDate```, in America/New_York timezone.",
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "format": "YYYY-MM-DD",
              "type": "string"
            }
          },
          {
            "description": "A parameter to limit words processed on or before the ```endDate```, in America/New_York timezone.",
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "format": "YYYY-MM-DD",
              "type": "string"
            }
          },
          {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "query",
            "name": "accountUid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional array of unique project identifiers. This can be found in the Smartling Dashboard under Account Settings > API.",
            "in": "query",
            "name": "projectIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Optional parameter to filter to the specified list of translation jobs.",
            "in": "query",
            "name": "jobUids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Optional parameter of unique agency identifier.",
            "in": "query",
            "name": "agencyUid",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional parameter to filter to the specified list of translation resources.",
            "in": "query",
            "name": "userUids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Optional parameter to filter to the specified list of translation locale IDs.",
            "in": "query",
            "name": "targetLocaleIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Optional comma-separated list of fields names to be returned by the endpoint. If this parameter is not set then the list of fields returned is defined by `include...` parameters.\n\nBoth `fields` and `include...` parameters are not allowed at the same time.\n\nThe supported list of fields names is:\n\n  - accountUid\n\n  - accountName\n\n  - projectId\n\n  - projectName\n\n  - targetLocaleId\n\n  - targetLocale\n\n  - jobUid\n\n  - jobName\n\n  - jobReferenceNumber\n\n  - translationResourceUid\n\n  - translationResourceName\n\n  - agencyUid\n\n  - agencyName\n\n  - workflowStepType\n\n  - workflowStepUid\n\n  - workflowStepName\n\n  - fuzzyProfileName\n\n  - fuzzyTier\n\n  - wordCount\n\n  - weightedWordCount\n\n  - characterCount. Please note: the column shows correct data since 2022-10-01.\n",
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional parameter to specify whether the report should group word count by translation resource name.\n\nDeprecated, use parameter `fields` instead.\n",
            "in": "query",
            "name": "includeTranslationResource",
            "required": false,
            "deprecated": true,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "Optional parameter to specify whether the report should group word count by translation job name.\n\nDeprecated, use parameter `fields` instead.\n",
            "in": "query",
            "name": "includeJob",
            "required": false,
            "deprecated": true,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "Optional parameter to specify whether the report should group word count by translation job and include reference number in the response.\n\nDeprecated, use parameter `fields` instead.\n",
            "in": "query",
            "name": "includeJobReferenceNumber",
            "required": false,
            "deprecated": true,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Optional parameter to specify whether the report should group word count by fuzzy match profile and tier.\n\nDeprecated, use parameter `fields` instead.\n",
            "in": "query",
            "name": "includeFuzzyMatchProfile",
            "required": false,
            "deprecated": true,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "Optional parameter to specify whether the report should group word count by workflow step uid and name.\n\nDeprecated, use parameter `fields` instead.\n",
            "in": "query",
            "name": "includeWorkflowStep",
            "required": false,
            "deprecated": true,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "response": {
                    "value": "Account,Project,Job Uid,Job,Translation Resource,Agency Uid,Agency, Target Language,Workflow Step,Workflow Step Uid,Workflow Step Name, Fuzzy Profile,Fuzzy Breakdown,Word Count,Weighted Words,Character Count Test Account,Test Project,f12ad8e9,Translation Job,Translator 1, Test Agency 1 Uid, Test Agency 1,Spanish (Spain),Translation,123abc456def, Translation,Default,85 - 94.9%,1,1,1"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/translation-quality-api/v2/dictionary/check-types": {
      "get": {
        "description": "Get the quality check types that are available.",
        "summary": "Get quality check types",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "getTranslationQualityCheckTypes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "totalCount": {
                                  "type": "integer",
                                  "description": "Total element count"
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "checkTypeCode": {
                                            "type": "string",
                                            "description": "[check type code](#operation/getTranslationQualityCheckTypes)",
                                            "example": "LEADING_TRAILING_SPACES",
                                            "enum": [
                                              "LEADING_TRAILING_SPACES",
                                              "ORIGINAL_EQUALS_TARGET",
                                              "WHITESPACES",
                                              "SPELLCHECK",
                                              "TAG_CONSISTENCY",
                                              "TARGET_LENGTH_LIMIT",
                                              "NUMBER_CONSISTENCY",
                                              "REPEATED_WORD",
                                              "TARGET_IN_WRONG_LANGUAGE",
                                              "SOURCE_IN_WRONG_LANGUAGE",
                                              "SEGMENT_COMPLETENESS",
                                              "NON_TRANSLATABLE_TEXT",
                                              "EMOJI_CONSISTENCY",
                                              "INSERTABLE_CONSISTENCY",
                                              "TARGET_SOURCE_CONSISTENCY",
                                              "BLACKLISTED_TERMS",
                                              "GLOSSARY_COMPLIANCE",
                                              "TRADEMARK_CONSISTENCY",
                                              "GRAMMAR_CHECK",
                                              "GLOBAL_CAPITALISATION_CONSISTENCY",
                                              "PUNCTUATION_CONSISTENCY",
                                              "PLURALS_REPETITION",
                                              "REGEX_CHECK",
                                              "OPEN_ISSUES"
                                            ]
                                          }
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "check type name",
                                            "example": "Insertable consistency"
                                          },
                                          "description": {
                                            "type": "string",
                                            "description": "check type description",
                                            "example": "Check that insertables in the source are correctly transferred to the translation"
                                          },
                                          "checkSubTypes": {
                                            "type": "array",
                                            "items": {
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkSubTypeCode": {
                                                      "enum": [
                                                        "EMOJI_ADDED",
                                                        "EMOJI_DELETED",
                                                        "EMOJI_PRESENT",
                                                        "INSERTABLE_ADDED",
                                                        "INSERTABLE_DELETED",
                                                        "PLACEABLE_ADDED",
                                                        "PLACEABLE_DELETED",
                                                        "SPACES_AROUND_PLACEABLE",
                                                        "PLACEABLE_FORMAT",
                                                        "NUMBER_ADDED",
                                                        "NUMBER_DELETED",
                                                        "NUMBER_INCORRECT_CONVERSION",
                                                        "TARGET_IS_EMPTY",
                                                        "TARGET_IS_MUCH_SHORTER_THAN_SOURCE",
                                                        "TARGET_IS_MUCH_LONGER_THAN_SOURCE",
                                                        "TAG_ADDED",
                                                        "TAG_DELETED",
                                                        "SPACES_AROUND_TAGS",
                                                        "TAG_ORDER_IS_CHANGED",
                                                        "OPEN_CLOSED_TAG_ORDER_IS_CHANGED",
                                                        "INVALID_TAG_NESTING",
                                                        "TAG_IS_CHANGED",
                                                        "SAME_SOURCE_DIFFERENT_TRANSLATIONS",
                                                        "SAME_TRANSLATION_DIFFERENT_SOURCES"
                                                      ]
                                                    },
                                                    "name": {
                                                      "type": "string",
                                                      "description": "check subtype name",
                                                      "example": "Emoji added"
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "example": {
                  "response": {
                    "code": "SUCCESS",
                    "data": {
                      "totalCount": 25,
                      "items": [
                        {
                          "checkTypeCode": "LEADING_TRAILING_SPACES",
                          "name": "Leading/trailing spaces",
                          "description": "Check that spacing at the beginning/end of the translation is consistent with the source",
                          "checkSubTypes": []
                        },
                        {
                          "checkTypeCode": "ORIGINAL_EQUALS_TARGET",
                          "name": "Original string equals target string",
                          "description": "Check that original string equals target string",
                          "checkSubTypes": []
                        },
                        {
                          "checkTypeCode": "WHITESPACES",
                          "name": "Spacing error",
                          "description": "Check that translation does not have additional whitespace",
                          "checkSubTypes": []
                        },
                        {
                          "checkTypeCode": "SPELLCHECK",
                          "name": "Spell check",
                          "description": "Spellcheck for translation",
                          "checkSubTypes": []
                        },
                        {
                          "checkTypeCode": "TAG_CONSISTENCY",
                          "name": "Tag consistency",
                          "description": "Check that tags in the source are correctly transferred to the translation",
                          "checkSubTypes": [
                            {
                              "checkSubTypeCode": "TAG_ADDED",
                              "name": "Tag added"
                            },
                            {
                              "checkSubTypeCode": "TAG_DELETED",
                              "name": "Tag deleted"
                            },
                            {
                              "checkSubTypeCode": "SPACES_AROUND_TAGS",
                              "name": "Spaces around tags"
                            },
                            {
                              "checkSubTypeCode": "TAG_ORDER_IS_CHANGED",
                              "name": "Tag order changed"
                            }
                          ]
                        },
                        {
                          "checkTypeCode": "TARGET_LENGTH_LIMIT",
                          "name": "Target length limit",
                          "description": "Check that the translation is within the length limit",
                          "checkSubTypes": []
                        },
                        {
                          "checkTypeCode": "NUMBER_CONSISTENCY",
                          "name": "Number consistency",
                          "description": "Check that numbers in the source are correctly transferred to the translation",
                          "checkSubTypes": [
                            {
                              "checkSubTypeCode": "NUMBER_ADDED",
                              "name": "Number added"
                            },
                            {
                              "checkSubTypeCode": "NUMBER_DELETED",
                              "name": "Number deleted"
                            },
                            {
                              "checkSubTypeCode": "NUMBER_INCORRECT_CONVERSION",
                              "name": "Incorrect number format conversion"
                            }
                          ]
                        },
                        {
                          "checkTypeCode": "REPEATED_WORD",
                          "name": "Repeated Word",
                          "description": "Check to see if a word is repeated multiple times in a translation",
                          "checkSubTypes": []
                        },
                        {
                          "checkTypeCode": "TARGET_IN_WRONG_LANGUAGE",
                          "name": "Target in the wrong language",
                          "description": "Check that translated string is in the target language",
                          "checkSubTypes": []
                        },
                        {
                          "checkTypeCode": "SOURCE_IN_WRONG_LANGUAGE",
                          "name": "Source in the wrong language",
                          "description": "Check that source string is in the source language",
                          "checkSubTypes": []
                        },
                        {
                          "checkTypeCode": "SEGMENT_COMPLETENESS",
                          "name": "Segment completeness",
                          "description": "Check that a translation has a similar length to the source string",
                          "checkSubTypes": [
                            {
                              "checkSubTypeCode": "TARGET_IS_EMPTY",
                              "name": "Target is empty"
                            },
                            {
                              "checkSubTypeCode": "TARGET_IS_MUCH_SHORTER_THAN_SOURCE",
                              "name": "Translation is too long compared to source"
                            },
                            {
                              "checkSubTypeCode": "TARGET_IS_MUCH_LONGER_THAN_SOURCE",
                              "name": "Translation is too short compared to source"
                            }
                          ]
                        },
                        {
                          "checkTypeCode": "NON_TRANSLATABLE_TEXT",
                          "name": "Placeholder",
                          "description": "Check that placeables in the source are correctly transferred to the translation",
                          "checkSubTypes": [
                            {
                              "checkSubTypeCode": "PLACEABLE_ADDED",
                              "name": "Placeholder added"
                            },
                            {
                              "checkSubTypeCode": "PLACEABLE_DELETED",
                              "name": "Placeholder deleted"
                            },
                            {
                              "checkSubTypeCode": "SPACES_AROUND_PLACEABLE",
                              "name": "Incorrect spacing around placeholders"
                            },
                            {
                              "checkSubTypeCode": "PLACEABLE_FORMAT",
                              "name": "Incorrect placeholder format"
                            }
                          ]
                        },
                        {
                          "checkTypeCode": "EMOJI_CONSISTENCY",
                          "name": "Emoji consistency",
                          "description": "Check that emoji in the source are correctly transferred to the translation",
                          "checkSubTypes": [
                            {
                              "checkSubTypeCode": "EMOJI_ADDED",
                              "name": "Emoji added"
                            },
                            {
                              "checkSubTypeCode": "EMOJI_DELETED",
                              "name": "Emoji deleted"
                            },
                            {
                              "checkSubTypeCode": "EMOJI_PRESENT",
                              "name": "Emoji present"
                            }
                          ]
                        },
                        {
                          "checkTypeCode": "INSERTABLE_CONSISTENCY",
                          "name": "Insertable consistency",
                          "description": "Check that insertables in the source are correctly transferred to the translation",
                          "checkSubTypes": [
                            {
                              "checkSubTypeCode": "INSERTABLE_ADDED",
                              "name": "Insertable added"
                            },
                            {
                              "checkSubTypeCode": "INSERTABLE_DELETED",
                              "name": "Insertable deleted"
                            }
                          ]
                        },
                        {
                          "checkTypeCode": "TARGET_SOURCE_CONSISTENCY",
                          "name": "Target/Source consistency",
                          "description": "Check for inconsistent translations",
                          "checkSubTypes": [
                            {
                              "checkSubTypeCode": "SAME_SOURCE_DIFFERENT_TRANSLATIONS",
                              "name": "Same source string is translated differently"
                            },
                            {
                              "checkSubTypeCode": "SAME_TRANSLATION_DIFFERENT_SOURCES",
                              "name": "Same translation is used for different sources"
                            }
                          ]
                        },
                        {
                          "checkTypeCode": "BLACKLISTED_TERMS",
                          "name": "Blacklisted terms",
                          "description": "Check for blacklisted glossary terms",
                          "checkSubTypes": []
                        },
                        {
                          "checkTypeCode": "GLOSSARY_COMPLIANCE",
                          "name": "Glossary compliance",
                          "description": "Check that glossary term translations are used",
                          "checkSubTypes": []
                        },
                        {
                          "checkTypeCode": "TRADEMARK_CONSISTENCY",
                          "name": "Legal symbol consistency",
                          "description": "Check that legal symbols in the source like trademark and copyright are used in the translation",
                          "checkSubTypes": []
                        },
                        {
                          "checkTypeCode": "GRAMMAR_CHECK",
                          "name": "Grammar",
                          "description": "Check for grammar errors",
                          "checkSubTypes": []
                        },
                        {
                          "checkTypeCode": "GLOBAL_CAPITALISATION_CONSISTENCY",
                          "name": "Global capitalization consistency",
                          "description": "If source or target is in all caps, check that capitalization matches",
                          "checkSubTypes": []
                        },
                        {
                          "checkTypeCode": "PUNCTUATION_CONSISTENCY",
                          "name": "Punctuation consistency",
                          "description": "Check for punctuation consistency",
                          "checkSubTypes": []
                        },
                        {
                          "checkTypeCode": "PLURALS_REPETITION",
                          "name": "Plurals",
                          "description": "Validate the translation of a plural source string has a unique translation for each different \"plural form\" that is required for the target language. Does not apply to languages that only require one plural form (Chinese, Japanese, etc.).",
                          "checkSubTypes": []
                        },
                        {
                          "checkTypeCode": "REGEX_CHECK",
                          "name": "Custom Quality Checks",
                          "description": "Custom quality checks that have been created by users. Click \"new\" button to add new ones or \"edit\" to modify existing.",
                          "checkSubTypes": []
                        },
                        {
                          "checkTypeCode": "OPEN_ISSUES",
                          "name": "Open Issues",
                          "description": "Check that strings do not have open issues",
                          "checkSubTypes": []
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/translation-quality-api/v2/dictionary/check-types\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/dictionary/check-types/{checkTypeCode}/sub-types": {
      "get": {
        "description": "Get the quality check subtypes that are available.",
        "summary": "Get quality check subtypes",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "getTranslationQualityCheckSubTypes",
        "parameters": [
          {
            "name": "checkTypeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "[check type code](#operation/getTranslationQualityCheckTypes)",
              "example": "LEADING_TRAILING_SPACES",
              "enum": [
                "LEADING_TRAILING_SPACES",
                "ORIGINAL_EQUALS_TARGET",
                "WHITESPACES",
                "SPELLCHECK",
                "TAG_CONSISTENCY",
                "TARGET_LENGTH_LIMIT",
                "NUMBER_CONSISTENCY",
                "REPEATED_WORD",
                "TARGET_IN_WRONG_LANGUAGE",
                "SOURCE_IN_WRONG_LANGUAGE",
                "SEGMENT_COMPLETENESS",
                "NON_TRANSLATABLE_TEXT",
                "EMOJI_CONSISTENCY",
                "INSERTABLE_CONSISTENCY",
                "TARGET_SOURCE_CONSISTENCY",
                "BLACKLISTED_TERMS",
                "GLOSSARY_COMPLIANCE",
                "TRADEMARK_CONSISTENCY",
                "GRAMMAR_CHECK",
                "GLOBAL_CAPITALISATION_CONSISTENCY",
                "PUNCTUATION_CONSISTENCY",
                "PLURALS_REPETITION",
                "REGEX_CHECK",
                "OPEN_ISSUES"
              ]
            },
            "description": "[check type code](#operation/getTranslationQualityCheckTypes)"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "totalCount": {
                                  "type": "integer",
                                  "description": "Total element count"
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "checkSubTypeCode": {
                                            "enum": [
                                              "EMOJI_ADDED",
                                              "EMOJI_DELETED",
                                              "EMOJI_PRESENT",
                                              "INSERTABLE_ADDED",
                                              "INSERTABLE_DELETED",
                                              "PLACEABLE_ADDED",
                                              "PLACEABLE_DELETED",
                                              "SPACES_AROUND_PLACEABLE",
                                              "PLACEABLE_FORMAT",
                                              "NUMBER_ADDED",
                                              "NUMBER_DELETED",
                                              "NUMBER_INCORRECT_CONVERSION",
                                              "TARGET_IS_EMPTY",
                                              "TARGET_IS_MUCH_SHORTER_THAN_SOURCE",
                                              "TARGET_IS_MUCH_LONGER_THAN_SOURCE",
                                              "TAG_ADDED",
                                              "TAG_DELETED",
                                              "SPACES_AROUND_TAGS",
                                              "TAG_ORDER_IS_CHANGED",
                                              "OPEN_CLOSED_TAG_ORDER_IS_CHANGED",
                                              "INVALID_TAG_NESTING",
                                              "TAG_IS_CHANGED",
                                              "SAME_SOURCE_DIFFERENT_TRANSLATIONS",
                                              "SAME_TRANSLATION_DIFFERENT_SOURCES"
                                            ]
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "check subtype name",
                                            "example": "Emoji added"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "example": {
                  "response": {
                    "code": "SUCCESS",
                    "data": {
                      "totalCount": 3,
                      "items": [
                        {
                          "checkSubTypeCode": "EMOJI_ADDED",
                          "name": "Emoji added"
                        },
                        {
                          "checkSubTypeCode": "EMOJI_DELETED",
                          "name": "Emoji deleted"
                        },
                        {
                          "checkSubTypeCode": "EMOJI_PRESENT",
                          "name": "Emoji present"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/translation-quality-api/v2/dictionary/check-types/$checkTypeCode/sub-types\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/dictionary/severity-levels": {
      "get": {
        "description": "Get severity levels of a quality check that are available.",
        "summary": "Get quality check severity levels",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "getTranslationQualityCheckSeverityLevels",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "totalCount": {
                                  "type": "integer",
                                  "description": "Total element count"
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "severityLevelCode": {
                                            "type": "string",
                                            "description": "severity level code",
                                            "example": "MEDIUM",
                                            "enum": [
                                              "DISABLED",
                                              "LOW",
                                              "MEDIUM",
                                              "HIGH"
                                            ]
                                          }
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "severity level name",
                                            "example": "Medium Severity"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "example": {
                  "response": {
                    "code": "SUCCESS",
                    "data": {
                      "totalCount": 4,
                      "items": [
                        {
                          "severityLevelCode": "DISABLED",
                          "name": "Disabled"
                        },
                        {
                          "severityLevelCode": "LOW",
                          "name": "Low Severity"
                        },
                        {
                          "severityLevelCode": "MEDIUM",
                          "name": "Medium Severity"
                        },
                        {
                          "severityLevelCode": "HIGH",
                          "name": "High Severity"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/translation-quality-api/v2/dictionary/severity-levels\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/dictionary/check-types/GLOSSARY_COMPLIANCE/match-methods": {
      "get": {
        "description": "Get Glossary compliance match methods.",
        "summary": "Get Glossary compliance match methods",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "getGlossaryComplianceMatchMethods",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "totalCount": {
                                  "type": "integer",
                                  "description": "Total element count"
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "matchMethodCode": {
                                            "type": "string",
                                            "enum": [
                                              "MATCH_BY_PERCENTAGE",
                                              "EXACT_MATCH",
                                              "LEXICAL_ANALYSIS"
                                            ],
                                            "description": "match method code",
                                            "example": "MATCH_BY_PERCENTAGE"
                                          }
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "properties": {
                                          "matchMethodName": {
                                            "type": "string",
                                            "description": "severity level name",
                                            "example": "Match by percentage"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "example": {
                  "response": {
                    "code": "SUCCESS",
                    "data": {
                      "totalCount": 3,
                      "items": [
                        {
                          "matchMethodCode": "MATCH_BY_PERCENTAGE",
                          "matchMethodName": "Match by percentage"
                        },
                        {
                          "matchMethodCode": "EXACT_MATCH",
                          "matchMethodName": "Exact match"
                        },
                        {
                          "matchMethodCode": "LEXICAL_ANALYSIS",
                          "matchMethodName": "Lexical analysis"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/translation-quality-api/v2/dictionary/check-types/GLOSSARY_COMPLIANCE/match-methods\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/dictionary/check-types/TRADEMARK_CONSISTENCY/trademark-types": {
      "get": {
        "description": "Get trademark consistency types.",
        "summary": "Get trademark consistency types",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "getTrademarkConsistencyTrademarkTypes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "totalCount": {
                                  "type": "integer",
                                  "description": "Total element count"
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "trademarkTypeCode": {
                                            "type": "string",
                                            "enum": [
                                              "SERVICE_MARK",
                                              "COPYRIGHT",
                                              "REGISTERED",
                                              "TRADEMARK"
                                            ],
                                            "description": "trademark consistency type code",
                                            "example": "SERVICE_MARK"
                                          }
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "trademark consistency type name",
                                            "example": "Service Mark"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "example": {
                  "response": {
                    "code": "SUCCESS",
                    "data": {
                      "totalCount": 4,
                      "items": [
                        {
                          "name": "Service Mark",
                          "trademarkTypeCode": "SERVICE_MARK"
                        },
                        {
                          "name": "Copyright",
                          "trademarkTypeCode": "COPYRIGHT"
                        },
                        {
                          "name": "Registered",
                          "trademarkTypeCode": "REGISTERED"
                        },
                        {
                          "name": "Trademark symbol",
                          "trademarkTypeCode": "TRADEMARK"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/translation-quality-api/v2/dictionary/check-types/TRADEMARK_CONSISTENCY/trademark-types\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/dictionary/check-types/REGEX_CHECK/rule-types": {
      "get": {
        "description": "Get custom quality check rule types that are available.",
        "summary": "Get custom quality check rule types",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "getRegexQualityCheckRuleTypes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "totalCount": {
                                  "type": "integer",
                                  "description": "Total element count"
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "ruleTypeCode": {
                                            "enum": [
                                              "FORBIDDEN",
                                              "MISSING",
                                              "COUNT_MISMATCH"
                                            ]
                                          }
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "rule type name",
                                            "example": "Forbidden Regex found in the target"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "example": {
                  "response": {
                    "code": "SUCCESS",
                    "data": {
                      "totalCount": 3,
                      "items": [
                        {
                          "ruleTypeCode": "FORBIDDEN",
                          "name": "Forbidden Regex found in the target"
                        },
                        {
                          "ruleTypeCode": "MISSING",
                          "name": "Regex missing in the target"
                        },
                        {
                          "ruleTypeCode": "COUNT_MISMATCH",
                          "name": "Count of regex matches differ between source and target"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/translation-quality-api/v2/dictionary/check-types/REGEX_CHECK/rule-types\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/dictionary/check-types/REGEX_CHECK/flavors": {
      "get": {
        "description": "Get custom quality check flavors that are available.",
        "summary": "Get custom quality check flavors",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "getRegexQualityCheckFlavors",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "totalCount": {
                                  "type": "integer",
                                  "description": "Total element count"
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "flavorCode": {
                                            "enum": [
                                              "JAVA",
                                              "DOT_NET"
                                            ]
                                          }
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "flavor name",
                                            "example": "Java"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "example": {
                  "response": {
                    "code": "SUCCESS",
                    "data": {
                      "totalCount": 2,
                      "items": [
                        {
                          "flavorCode": "JAVA",
                          "name": "Java"
                        },
                        {
                          "flavorCode": "DOT_NET",
                          "name": ".NET"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/translation-quality-api/v2/dictionary/check-types/REGEX_CHECK/flavors\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/users/current/settings/dictionaries/{localeId}": {
      "get": {
        "description": "Get a user’s custom dictionary.",
        "summary": "Get user custom dictionary",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "getUserCustomDictionary",
        "parameters": [
          {
            "name": "localeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "A valid Smartling Locale ID."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "totalCount": {
                                  "type": "integer",
                                  "description": "Total element count"
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "wordUid": {
                                            "type": "string",
                                            "description": "word unique identifier",
                                            "example": "23jkj23sa"
                                          },
                                          "word": {
                                            "type": "string",
                                            "description": "trademark consistency type name",
                                            "example": "hello"
                                          },
                                          "createdDate": {
                                            "type": "string",
                                            "format": "date-time",
                                            "description": "the UTC value of the date the word was added.",
                                            "example": "2018-11-21T01:51:17.000Z"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/translation-quality-api/v2/users/current/settings/dictionaries/$smartlingLocaleId\n"
          }
        ]
      },
      "post": {
        "description": "Add a word to a user’s custom dictionary.",
        "summary": "Add word to user custom dictionary",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "addWordToUserCustomDictionary",
        "parameters": [
          {
            "name": "localeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "A valid Smartling Locale ID."
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "word": {
                    "type": "string",
                    "minimum": 1,
                    "example": "universe"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "wordUid": {
                                      "type": "string",
                                      "description": "word unique identifier",
                                      "example": "23jkj23sa"
                                    },
                                    "word": {
                                      "type": "string",
                                      "description": "trademark consistency type name",
                                      "example": "hello"
                                    },
                                    "createdDate": {
                                      "type": "string",
                                      "format": "date-time",
                                      "description": "the UTC value of the date the word was added.",
                                      "example": "2018-11-21T01:51:17.000Z"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTQCJSON\" https://api.smartling.com/translation-quality-api/v2/users/current/settings/dictionaries/$smartlingLocaleId\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/users/current/settings/dictionaries/{localeId}/{wordUid}": {
      "delete": {
        "description": "Remove a word from a user’s custom dictionary.",
        "summary": "Remove word from user custom dictionary",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "removeWordFromUserCustomDictionary",
        "parameters": [
          {
            "name": "localeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "A valid Smartling Locale ID."
          },
          {
            "name": "wordUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Word unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "wordUid": {
                                      "type": "string",
                                      "description": "word unique identifier",
                                      "example": "23jkj23sa"
                                    },
                                    "word": {
                                      "type": "string",
                                      "description": "trademark consistency type name",
                                      "example": "hello"
                                    },
                                    "createdDate": {
                                      "type": "string",
                                      "format": "date-time",
                                      "description": "the UTC value of the date the word was added.",
                                      "example": "2018-11-21T01:51:17.000Z"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X DELETE -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/translation-quality-api/v2/users/current/settings/dictionaries/$smartlingLocaleId/$wordUid\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles": {
      "get": {
        "description": "Get profiles.",
        "summary": "Get profiles",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "getTQCProfiles",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "nameMask",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "name mask.",
            "example": "default"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "limit size.",
            "example": 100
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "offset number.",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "totalCount": {
                                  "type": "integer",
                                  "description": "Total element count",
                                  "example": 1
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "profileUid": {
                                        "type": "string",
                                        "description": "Unique identifier of the profile.",
                                        "example": "ce6d6b5dbc12"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "profile name",
                                        "example": "default profile"
                                      },
                                      "createdByUserUid": {
                                        "type": "string",
                                        "description": "Unique identifier for the user who created the profile.",
                                        "example": "xas344dsd3"
                                      },
                                      "modifiedByUserUid": {
                                        "type": "string",
                                        "description": "Unique identifier for the user who modified the profile.",
                                        "example": "xas344dsd3"
                                      },
                                      "createdDate": {
                                        "type": "string",
                                        "description": "created date",
                                        "example": "2018-07-02T13:39:27Z"
                                      },
                                      "modifiedDate": {
                                        "type": "string",
                                        "description": "modified date",
                                        "example": "2018-07-02T13:39:27Z"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles\n"
          }
        ]
      },
      "post": {
        "description": "Create a profile.",
        "summary": "Create a profile",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "createTQCProfile",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "profile name.",
                        "example": "default name"
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "profileUid": {
                                  "type": "string",
                                  "description": "Unique identifier of the profile.",
                                  "example": "ce6d6b5dbc12"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "profile name",
                                  "example": "default profile"
                                },
                                "createdByUserUid": {
                                  "type": "string",
                                  "description": "Unique identifier for the user who created the profile.",
                                  "example": "xas344dsd3"
                                },
                                "modifiedByUserUid": {
                                  "type": "string",
                                  "description": "Unique identifier for the user who modified the profile.",
                                  "example": "xas344dsd3"
                                },
                                "createdDate": {
                                  "type": "string",
                                  "description": "created date",
                                  "example": "2018-07-02T13:39:27Z"
                                },
                                "modifiedDate": {
                                  "type": "string",
                                  "description": "modified date",
                                  "example": "2018-07-02T13:39:27Z"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTQCJSON\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}": {
      "get": {
        "description": "Get a profile.",
        "summary": "Get a profile",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "getTQCProfile",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "profileUid": {
                                  "type": "string",
                                  "description": "Unique identifier of the profile.",
                                  "example": "ce6d6b5dbc12"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "profile name",
                                  "example": "default profile"
                                },
                                "createdByUserUid": {
                                  "type": "string",
                                  "description": "Unique identifier for the user who created the profile.",
                                  "example": "xas344dsd3"
                                },
                                "modifiedByUserUid": {
                                  "type": "string",
                                  "description": "Unique identifier for the user who modified the profile.",
                                  "example": "xas344dsd3"
                                },
                                "createdDate": {
                                  "type": "string",
                                  "description": "created date",
                                  "example": "2018-07-02T13:39:27Z"
                                },
                                "modifiedDate": {
                                  "type": "string",
                                  "description": "modified date",
                                  "example": "2018-07-02T13:39:27Z"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid\n"
          }
        ]
      },
      "delete": {
        "description": "Delete profile.",
        "summary": "Delete profile",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "deleteTQCProfile",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SUCCESS"
                      ],
                      "description": "Indicates whether the response was successful or what error has occurred."
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "code": "SUCCESS"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X DELETE -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/copy": {
      "post": {
        "description": "Copy a profile.",
        "summary": "Copy a profile",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "copyTQCProfile",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of the profile for copy creation."
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "profile name.",
                        "example": "default name"
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "profileUid": {
                                  "type": "string",
                                  "description": "Unique identifier of the profile.",
                                  "example": "ce6d6b5dbc12"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "profile name",
                                  "example": "default profile"
                                },
                                "createdByUserUid": {
                                  "type": "string",
                                  "description": "Unique identifier for the user who created the profile.",
                                  "example": "xas344dsd3"
                                },
                                "modifiedByUserUid": {
                                  "type": "string",
                                  "description": "Unique identifier for the user who modified the profile.",
                                  "example": "xas344dsd3"
                                },
                                "createdDate": {
                                  "type": "string",
                                  "description": "created date",
                                  "example": "2018-07-02T13:39:27Z"
                                },
                                "modifiedDate": {
                                  "type": "string",
                                  "description": "modified date",
                                  "example": "2018-07-02T13:39:27Z"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTQCJSON\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/copy\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/name": {
      "put": {
        "description": "Update the profile name.",
        "summary": "Update the profile name",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "updateTQCProfile",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "profile name.",
                        "example": "default name"
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "profile name.",
                                  "example": "default name"
                                }
                              },
                              "required": [
                                "name"
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTQCJSON\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/name\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/default-profile": {
      "get": {
        "description": "Get default profile.",
        "summary": "Get default profile",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "getTQCDefaultProfile",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "profileUid": {
                                  "type": "string",
                                  "description": "Unique identifier of the profile.",
                                  "example": "ce6d6b5dbc12"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "profile name",
                                  "example": "default profile"
                                },
                                "createdByUserUid": {
                                  "type": "string",
                                  "description": "Unique identifier for the user who created the profile.",
                                  "example": "xas344dsd3"
                                },
                                "modifiedByUserUid": {
                                  "type": "string",
                                  "description": "Unique identifier for the user who modified the profile.",
                                  "example": "xas344dsd3"
                                },
                                "createdDate": {
                                  "type": "string",
                                  "description": "created date",
                                  "example": "2018-07-02T13:39:27Z"
                                },
                                "modifiedDate": {
                                  "type": "string",
                                  "description": "modified date",
                                  "example": "2018-07-02T13:39:27Z"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/default-profile\n"
          }
        ]
      },
      "put": {
        "description": "Update default profile.",
        "summary": "Update default profile",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "updateTQCDefaultProfile",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "profileUid": {
                        "type": "string",
                        "description": "Unique identifier of corresponding profile.",
                        "example": "ce6d6b5dbc12"
                      }
                    },
                    "required": [
                      "profileUid"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "profileUid": {
                                  "type": "string",
                                  "description": "Unique identifier of the profile.",
                                  "example": "ce6d6b5dbc12"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "profile name",
                                  "example": "default profile"
                                },
                                "createdByUserUid": {
                                  "type": "string",
                                  "description": "Unique identifier for the user who created the profile.",
                                  "example": "xas344dsd3"
                                },
                                "modifiedByUserUid": {
                                  "type": "string",
                                  "description": "Unique identifier for the user who modified the profile.",
                                  "example": "xas344dsd3"
                                },
                                "createdDate": {
                                  "type": "string",
                                  "description": "created date",
                                  "example": "2018-07-02T13:39:27Z"
                                },
                                "modifiedDate": {
                                  "type": "string",
                                  "description": "modified date",
                                  "example": "2018-07-02T13:39:27Z"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "x-code-samples": [
            {
              "lang": "curl",
              "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTQCJSON\"  https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/default-profile\n"
            }
          ]
        }
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types": {
      "get": {
        "description": "Get all profile settings that are available.",
        "summary": "Get all profile settings",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "getProfilesAccountCheckTypesSettings",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "totalCount": {
                                  "type": "integer",
                                  "description": "Total element count"
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "anyOf": [
                                      {
                                        "title": "BLACKLISTED_TERMS",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "BLACKLISTED_TERMS"
                                                ],
                                                "description": "check type code",
                                                "example": "BLACKLISTED_TERMS"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "EMOJI_CONSISTENCY",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "noEmojisAllowedInTarget": {
                                                "type": "boolean",
                                                "description": "No emoji is allowed in target",
                                                "example": false
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "EMOJI_CONSISTENCY"
                                                ],
                                                "description": "check type code",
                                                "example": "EMOJI_CONSISTENCY"
                                              },
                                              "subTypes": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkSubTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "EMOJI_ADDED",
                                                        "EMOJI_DELETED",
                                                        "EMOJI_PRESENT"
                                                      ],
                                                      "description": "check subtype code",
                                                      "example": "EMOJI_ADDED"
                                                    },
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH",
                                                        "DISABLED"
                                                      ],
                                                      "description": "severity level code",
                                                      "example": "LOW"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "GLOBAL_CAPITALISATION_CONSISTENCY",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "GLOBAL_CAPITALISATION_CONSISTENCY"
                                                ],
                                                "description": "check type code",
                                                "example": "GLOBAL_CAPITALISATION_CONSISTENCY"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "GLOSSARY_COMPLIANCE",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "matchMethod": {
                                                    "type": "string",
                                                    "enum": [
                                                      "MATCH_BY_PERCENTAGE",
                                                      "EXACT_MATCH",
                                                      "LEXICAL_ANALYSIS"
                                                    ],
                                                    "description": "[Match method.](#operation/getGlossaryComplianceMatchMethods)",
                                                    "example": "MATCH_BY_PERCENTAGE"
                                                  },
                                                  "matchThreshold": {
                                                    "type": "integer",
                                                    "description": "Match threshold.",
                                                    "minimum": 0,
                                                    "maximum": 100,
                                                    "example": 10
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "sameTermCount": {
                                                    "type": "boolean",
                                                    "description": "If true the translation should have the glossary term the same number of times as in the source. If false the translation only requires the translation of the term at least once."
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "GLOSSARY_COMPLIANCE"
                                                ],
                                                "description": "check type code",
                                                "example": "GLOSSARY_COMPLIANCE"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "GRAMMAR_CHECK",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "GRAMMAR_CHECK"
                                                ],
                                                "description": "check type code",
                                                "example": "GRAMMAR_CHECK"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "INSERTABLE_CONSISTENCY",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "INSERTABLE_CONSISTENCY"
                                                ],
                                                "description": "check type code",
                                                "example": "INSERTABLE_CONSISTENCY"
                                              },
                                              "subTypes": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkSubTypeCode": {
                                                      "nullable": true,
                                                      "type": "string",
                                                      "enum": [
                                                        "INSERTABLE_ADDED",
                                                        "INSERTABLE_DELETED"
                                                      ],
                                                      "description": "check subtype code",
                                                      "example": "INSERTABLE_ADDED"
                                                    },
                                                    "severityLevelCode": {
                                                      "nullable": true,
                                                      "type": "string",
                                                      "enum": [
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH",
                                                        "DISABLED"
                                                      ],
                                                      "description": "severity level code",
                                                      "example": "LOW"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "LEADING_TRAILING_SPACES",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "required": [
                                              "checkTypeCode"
                                            ],
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "LEADING_TRAILING_SPACES"
                                                ],
                                                "description": "check type code",
                                                "example": "LEADING_TRAILING_SPACES"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "NON_TRANSLATABLE_TEXT",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "NON_TRANSLATABLE_TEXT"
                                                ],
                                                "description": "check type code",
                                                "example": "NON_TRANSLATABLE_TEXT"
                                              },
                                              "subTypes": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkSubTypeCode": {
                                                      "nullable": true,
                                                      "type": "string",
                                                      "enum": [
                                                        "PLACEABLE_ADDED",
                                                        "PLACEABLE_DELETED",
                                                        "SPACES_AROUND_PLACEABLE",
                                                        "PLACEABLE_FORMAT"
                                                      ],
                                                      "description": "check subtype code",
                                                      "example": "PLACEABLE_ADDED"
                                                    },
                                                    "severityLevelCode": {
                                                      "nullable": true,
                                                      "type": "string",
                                                      "enum": [
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH",
                                                        "DISABLED"
                                                      ],
                                                      "description": "severity level code",
                                                      "example": "LOW"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "NUMBER_CONSISTENCY",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "ignoreSign": {
                                                "type": "boolean",
                                                "description": "Ignore sign.",
                                                "example": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "NUMBER_CONSISTENCY"
                                                ],
                                                "description": "check type code",
                                                "example": "NUMBER_CONSISTENCY"
                                              },
                                              "subTypes": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkSubTypeCode": {
                                                      "type": "string",
                                                      "nullable": true,
                                                      "enum": [
                                                        "NUMBER_ADDED",
                                                        "NUMBER_DELETED",
                                                        "NUMBER_INCORRECT_CONVERSION"
                                                      ],
                                                      "description": "check subtype code",
                                                      "example": "NUMBER_ADDED"
                                                    },
                                                    "severityLevelCode": {
                                                      "nullable": true,
                                                      "type": "string",
                                                      "enum": [
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH",
                                                        "DISABLED"
                                                      ],
                                                      "description": "severity level code",
                                                      "example": "LOW"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "ORIGINAL_EQUALS_TARGET",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "mustHaveIdenticalTags": {
                                                "type": "boolean",
                                                "description": "Must have identical tags",
                                                "example": false
                                              },
                                              "mustHaveIdenticalCapitalization": {
                                                "type": "boolean",
                                                "description": "Must have identical capitalization",
                                                "example": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "required": [
                                              "checkTypeCode"
                                            ],
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "ORIGINAL_EQUALS_TARGET"
                                                ],
                                                "description": "check type code",
                                                "example": "ORIGINAL_EQUALS_TARGET"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "REPEATED_WORD",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "REPEATED_WORD"
                                                ],
                                                "description": "check type code",
                                                "example": "REPEATED_WORD"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "SEGMENT_COMPLETENESS",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "lowerLengthThreshold": {
                                                "type": "integer",
                                                "description": "Lower length threshould",
                                                "example": 10
                                              },
                                              "upperLengthThreshold": {
                                                "type": "integer",
                                                "description": "Upper length threshould",
                                                "example": 20
                                              },
                                              "minLengthThreshold": {
                                                "type": "integer",
                                                "description": "Minimal lenght threshould",
                                                "example": 15
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "SEGMENT_COMPLETENESS"
                                                ],
                                                "description": "check type code",
                                                "example": "SEGMENT_COMPLETENESS"
                                              },
                                              "subTypes": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkSubTypeCode": {
                                                      "nullable": true,
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET_IS_EMPTY",
                                                        "TARGET_IS_MUCH_SHORTER_THAN_SOURCE",
                                                        "TARGET_IS_MUCH_LONGER_THAN_SOURCE"
                                                      ],
                                                      "description": "check subtype code",
                                                      "example": "TARGET_IS_EMPTY"
                                                    },
                                                    "severityLevelCode": {
                                                      "nullable": true,
                                                      "type": "string",
                                                      "enum": [
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH",
                                                        "DISABLED"
                                                      ],
                                                      "description": "severity level code",
                                                      "example": "LOW"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "SOURCE_IN_WRONG_LANGUAGE",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "minTextLengthLimit": {
                                                "type": "integer",
                                                "minimum": 0,
                                                "description": "Minimal text length limit.",
                                                "example": 10
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "SOURCE_IN_WRONG_LANGUAGE"
                                                ],
                                                "description": "check type code",
                                                "example": "SOURCE_IN_WRONG_LANGUAGE"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "SPELLCHECK",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "skipIfWordInUserDictionary": {
                                                "type": "boolean",
                                                "description": "Skip if word is in user dictionary.",
                                                "example": false
                                              },
                                              "skipIfWordStartsWithCapitalLetter": {
                                                "type": "boolean",
                                                "description": "Skip if word starts with capital letter.",
                                                "example": false
                                              },
                                              "skipIfWordAppearsInSourceString": {
                                                "type": "boolean",
                                                "description": "Skip if word appears in source string.",
                                                "example": false
                                              },
                                              "skipIfWordValidInSourceLocale": {
                                                "type": "boolean",
                                                "description": "Skip if word is valid in source locale.",
                                                "example": false
                                              },
                                              "runSpellcheckForSubWords": {
                                                "type": "boolean",
                                                "description": "Run spellchek for sub words.",
                                                "example": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "SPELLCHECK"
                                                ],
                                                "description": "check type code",
                                                "example": "SPELLCHECK"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "TAG_CONSISTENCY",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "TAG_CONSISTENCY"
                                                ],
                                                "description": "check type code",
                                                "example": "TAG_CONSISTENCY"
                                              },
                                              "subTypes": {
                                                "nullable": true,
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkSubTypeCode": {
                                                      "type": "string",
                                                      "nullable": true,
                                                      "enum": [
                                                        "TAG_ADDED",
                                                        "TAG_DELETED",
                                                        "SPACES_AROUND_TAGS",
                                                        "TAG_ORDER_IS_CHANGED"
                                                      ],
                                                      "description": "check subtype code",
                                                      "example": "TAG_ADDED"
                                                    },
                                                    "severityLevelCode": {
                                                      "nullable": true,
                                                      "type": "string",
                                                      "enum": [
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH",
                                                        "DISABLED"
                                                      ],
                                                      "description": "severity level code",
                                                      "example": "LOW"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "TARGET_IN_WRONG_LANGUAGE",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "minTextLengthLimit": {
                                                "type": "integer",
                                                "minimum": 0,
                                                "description": "Minimal text length limit.",
                                                "example": 10
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "TARGET_IN_WRONG_LANGUAGE"
                                                ],
                                                "description": "check type code",
                                                "example": "TARGET_IN_WRONG_LANGUAGE"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "TARGET_LENGTH_LIMIT",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "TARGET_LENGTH_LIMIT"
                                                ],
                                                "description": "check type code",
                                                "example": "TARGET_LENGTH_LIMIT"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "TARGET_SOURCE_CONSISTENCY",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "ignoreTagsAndPlaceholders": {
                                                "type": "boolean",
                                                "description": "Ignore tags and placeholders.",
                                                "example": true
                                              },
                                              "ignoreCase": {
                                                "type": "boolean",
                                                "description": "Ignore case.",
                                                "example": false
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "TARGET_SOURCE_CONSISTENCY"
                                                ],
                                                "description": "check type code",
                                                "example": "TARGET_SOURCE_CONSISTENCY"
                                              },
                                              "subTypes": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkSubTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "SAME_SOURCE_DIFFERENT_TRANSLATIONS",
                                                        "SAME_TRANSLATION_DIFFERENT_SOURCES"
                                                      ],
                                                      "description": "check subtype code",
                                                      "example": "SAME_SOURCE_DIFFERENT_TRANSLATIONS"
                                                    },
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH",
                                                        "DISABLED"
                                                      ],
                                                      "description": "severity level code",
                                                      "example": "LOW"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "TRADEMARK_CONSISTENCY",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "TRADEMARK_CONSISTENCY"
                                                ],
                                                "description": "check type code",
                                                "example": "TRADEMARK_CONSISTENCY"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "WHITESPACES",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "WHITESPACES"
                                                ],
                                                "description": "check type code",
                                                "example": "WHITESPACES"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "PUNCTUATION_CONSISTENCY",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "PUNCTUATION_CONSISTENCY"
                                                ],
                                                "description": "check type code",
                                                "example": "PUNCTUATION_CONSISTENCY"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "PLURALS_REPETITION",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "PLURALS_REPETITION"
                                                ],
                                                "description": "check type code",
                                                "example": "PLURALS_REPETITION"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "REGEX_CHECK",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "REGEX_CHECK"
                                                ],
                                                "description": "check type code",
                                                "example": "REGEX_CHECK"
                                              },
                                              "rules": {
                                                "type": "array",
                                                "items": {
                                                  "allOf": [
                                                    {
                                                      "type": "object",
                                                      "properties": {
                                                        "ruleUid": {
                                                          "type": "string",
                                                          "description": "Unique identifier of corresponding check rule",
                                                          "example": "ce6d6b5dbc12"
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "type": "object",
                                                      "properties": {
                                                        "ruleName": {
                                                          "type": "string",
                                                          "description": "Rule name",
                                                          "example": "ruleName"
                                                        },
                                                        "severityLevelCode": {
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        },
                                                        "ruleTypeCode": {
                                                          "enum": [
                                                            "FORBIDDEN",
                                                            "MISSING",
                                                            "COUNT_MISMATCH"
                                                          ]
                                                        },
                                                        "flavorCode": {
                                                          "enum": [
                                                            "JAVA",
                                                            "DOT_NET"
                                                          ]
                                                        },
                                                        "originalPattern": {
                                                          "type": "string",
                                                          "description": "Regular expression to evaluate against the source string.",
                                                          "example": "@mail"
                                                        },
                                                        "translationPattern": {
                                                          "type": "string",
                                                          "description": "Regular expression to evaluate against the translation.",
                                                          "example": "@gmail"
                                                        },
                                                        "caseInsensitive": {
                                                          "type": "boolean",
                                                          "description": "Enable case insensitive search",
                                                          "example": true
                                                        },
                                                        "multiLine": {
                                                          "type": "boolean",
                                                          "description": "Enables multine search. If true then search will span newlines in a string. Users can use ^ and $ characters with special meaning for beginning of line and end of line match.",
                                                          "example": true
                                                        },
                                                        "description": {
                                                          "type": "string",
                                                          "description": "Human readable description of the role; shown in the the dashboard UI.",
                                                          "example": "rule description"
                                                        },
                                                        "warningMessage": {
                                                          "type": "string",
                                                          "description": "Human readable warning message appended to the standard message that is shown in the CAT tool when the check fails.",
                                                          "example": " test warning message"
                                                        }
                                                      },
                                                      "required": [
                                                        "ruleName",
                                                        "severityLevelCode",
                                                        "ruleTypeCode",
                                                        "flavorCode",
                                                        "originalPattern",
                                                        "translationPattern",
                                                        "caseInsensitive",
                                                        "multiLine"
                                                      ]
                                                    },
                                                    {
                                                      "type": "object",
                                                      "properties": {
                                                        "groups": {
                                                          "type": "array",
                                                          "items": {
                                                            "allOf": [
                                                              {
                                                                "type": "object",
                                                                "properties": {
                                                                  "groupUid": {
                                                                    "type": "string",
                                                                    "description": "Smartling rule group identifier of the translation",
                                                                    "example": "ce6d6b5dbc12"
                                                                  },
                                                                  "ruleUid": {
                                                                    "type": "string",
                                                                    "description": "Smartling rule identifier of the translation",
                                                                    "example": "ce6d6b5dbcs2"
                                                                  },
                                                                  "targetLocaleIds": {
                                                                    "description": "The list of target locales.",
                                                                    "example": [
                                                                      "ru-RU"
                                                                    ],
                                                                    "items": {
                                                                      "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                  },
                                                                  "severityLevelCode": {
                                                                    "type": "string",
                                                                    "description": "severity level code",
                                                                    "example": "MEDIUM",
                                                                    "enum": [
                                                                      "DISABLED",
                                                                      "LOW",
                                                                      "MEDIUM",
                                                                      "HIGH"
                                                                    ]
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "OPEN_ISSUES",
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "profileUid": {
                                                "type": "string",
                                                "description": "Unique identifier of corresponding profile.",
                                                "example": "ce6d6b5dbc12"
                                              }
                                            }
                                          },
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "sourceIssuesMustBeResolved": {
                                                "type": "boolean",
                                                "description": "All source issues must be resolved",
                                                "example": false
                                              },
                                              "translationIssuesMustBeResolved": {
                                                "type": "boolean",
                                                "description": "All translation issues must be resolved",
                                                "example": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "required": [
                                              "checkTypeCode"
                                            ],
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "OPEN_ISSUES"
                                                ],
                                                "description": "check type code",
                                                "example": "OPEN_ISSUES"
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "example": {
                  "response": {
                    "code": "SUCCESS",
                    "data": {
                      "totalCount": 25,
                      "items": [
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "LEADING_TRAILING_SPACES",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "ORIGINAL_EQUALS_TARGET",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "mustHaveIdenticalTags": true,
                          "mustHaveIdenticalCapitalization": true
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "WHITESPACES",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "SPELLCHECK",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "skipIfWordInUserDictionary": true,
                          "skipIfWordStartsWithCapitalLetter": false,
                          "skipIfWordAppearsInSourceString": true,
                          "skipIfWordValidInSourceLocale": false,
                          "runSpellcheckForSubWords": false
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "TAG_CONSISTENCY",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "TAG_ADDED",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "TAG_DELETED",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "TAG_ORDER_IS_CHANGED",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "SPACES_AROUND_TAGS",
                              "severityLevelCode": "LOW"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "HIGH",
                          "checkTypeCode": "TARGET_LENGTH_LIMIT",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "NUMBER_CONSISTENCY",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "NUMBER_DELETED",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "NUMBER_ADDED",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "NUMBER_INCORRECT_CONVERSION",
                              "severityLevelCode": "LOW"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": [
                            {
                              "groupUid": "b0dd258b05ee"
                            },
                            {
                              "groupUid": "a853df2cf8ac"
                            }
                          ],
                          "ignoreSign": true
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "REPEATED_WORD",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "TARGET_IN_WRONG_LANGUAGE",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "minTextLengthLimit": 40
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "SOURCE_IN_WRONG_LANGUAGE",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "minTextLengthLimit": 40
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "MEDIUM",
                          "checkTypeCode": "SEGMENT_COMPLETENESS",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "TARGET_IS_MUCH_SHORTER_THAN_SOURCE",
                              "severityLevelCode": "MEDIUM"
                            },
                            {
                              "checkSubTypeCode": "TARGET_IS_MUCH_LONGER_THAN_SOURCE",
                              "severityLevelCode": "MEDIUM"
                            },
                            {
                              "checkSubTypeCode": "TARGET_IS_EMPTY",
                              "severityLevelCode": "DISABLED"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "lowerLengthThreshold": 50,
                          "upperLengthThreshold": 250,
                          "minLengthThreshold": 10
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "MEDIUM",
                          "checkTypeCode": "NON_TRANSLATABLE_TEXT",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "PLACEABLE_DELETED",
                              "severityLevelCode": "MEDIUM"
                            },
                            {
                              "checkSubTypeCode": "SPACES_AROUND_PLACEABLE",
                              "severityLevelCode": "MEDIUM"
                            },
                            {
                              "checkSubTypeCode": "PLACEABLE_ADDED",
                              "severityLevelCode": "MEDIUM"
                            },
                            {
                              "checkSubTypeCode": "PLACEABLE_FORMAT",
                              "severityLevelCode": "MEDIUM"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "EMOJI_CONSISTENCY",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "EMOJI_PRESENT",
                              "severityLevelCode": "DISABLED"
                            },
                            {
                              "checkSubTypeCode": "EMOJI_DELETED",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "EMOJI_ADDED",
                              "severityLevelCode": "LOW"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "noEmojisAllowedInTarget": false
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "INSERTABLE_CONSISTENCY",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "INSERTABLE_DELETED",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "INSERTABLE_ADDED",
                              "severityLevelCode": "LOW"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "TARGET_SOURCE_CONSISTENCY",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "SAME_TRANSLATION_DIFFERENT_SOURCES",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "SAME_SOURCE_DIFFERENT_TRANSLATIONS",
                              "severityLevelCode": "LOW"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "ignoreTagsAndPlaceholders": true,
                          "ignoreCase": true
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "MEDIUM",
                          "checkTypeCode": "BLACKLISTED_TERMS",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "MEDIUM",
                          "checkTypeCode": "GLOSSARY_COMPLIANCE",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "matchMethod": "MATCH_BY_PERCENTAGE",
                          "matchThreshold": 50,
                          "sameTermCount": true
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "TRADEMARK_CONSISTENCY",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "GRAMMAR_CHECK",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "GLOBAL_CAPITALISATION_CONSISTENCY",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "PUNCTUATION_CONSISTENCY",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "MEDIUM",
                          "checkTypeCode": "PLURALS_REPETITION",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "REGEX_CHECK",
                          "subTypes": [],
                          "groups": [],
                          "rules": [
                            {
                              "ruleUid": "2d83ea74c848",
                              "severityLevelCode": "LOW",
                              "ruleName": "ruleName1",
                              "ruleTypeCode": "FORBIDDEN",
                              "flavorCode": "JAVA",
                              "originalPattern": "@mail",
                              "translationPattern": "@gmail",
                              "description": "ruleName1 description",
                              "caseInsensitive": true,
                              "multiLine": false,
                              "warningMessage": "test warning",
                              "groups": []
                            },
                            {
                              "ruleUid": "ac3069e2fd30",
                              "severityLevelCode": "MEDIUM",
                              "ruleName": "ruleName2",
                              "ruleTypeCode": "MISSING",
                              "flavorCode": "JAVA",
                              "originalPattern": "@/d",
                              "translationPattern": "@/d",
                              "description": "ruleName2 description",
                              "caseInsensitive": true,
                              "multiLine": false,
                              "warningMessage": "test warning",
                              "groups": []
                            }
                          ]
                        },
                        {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "OPEN_ISSUES",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "sourceIssuesMustBeResolved": true,
                          "translationIssuesMustBeResolved": true
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types/{checkTypeCode}": {
      "get": {
        "description": "Get the settings for a single profile check type.",
        "summary": "Get profile check type setting",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "getProfilesSingleCheckTypeSettings",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "checkTypeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "[check type code](#operation/getTranslationQualityCheckTypes)",
              "example": "LEADING_TRAILING_SPACES",
              "enum": [
                "LEADING_TRAILING_SPACES",
                "ORIGINAL_EQUALS_TARGET",
                "WHITESPACES",
                "SPELLCHECK",
                "TAG_CONSISTENCY",
                "TARGET_LENGTH_LIMIT",
                "NUMBER_CONSISTENCY",
                "REPEATED_WORD",
                "TARGET_IN_WRONG_LANGUAGE",
                "SOURCE_IN_WRONG_LANGUAGE",
                "SEGMENT_COMPLETENESS",
                "NON_TRANSLATABLE_TEXT",
                "EMOJI_CONSISTENCY",
                "INSERTABLE_CONSISTENCY",
                "TARGET_SOURCE_CONSISTENCY",
                "BLACKLISTED_TERMS",
                "GLOSSARY_COMPLIANCE",
                "TRADEMARK_CONSISTENCY",
                "GRAMMAR_CHECK",
                "GLOBAL_CAPITALISATION_CONSISTENCY",
                "PUNCTUATION_CONSISTENCY",
                "PLURALS_REPETITION",
                "REGEX_CHECK",
                "OPEN_ISSUES"
              ]
            },
            "description": "[check type code](#operation/getTranslationQualityCheckTypes)"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "response": {
                          "allOf": [
                            {
                              "type": "object",
                              "required": [
                                "code"
                              ],
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "enum": [
                                    "SUCCESS"
                                  ],
                                  "description": "Indicates whether the response was successful or what error has occurred."
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "data": {
                                  "anyOf": [
                                    {
                                      "title": "LEADING_TRAILING_SPACES",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "subTypes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "checkSubTypeCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "checkTypeCode"
                                          ],
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "LEADING_TRAILING_SPACES"
                                              ],
                                              "description": "check type code",
                                              "example": "LEADING_TRAILING_SPACES"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "WHITESPACES",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "subTypes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "checkSubTypeCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "WHITESPACES"
                                              ],
                                              "description": "check type code",
                                              "example": "WHITESPACES"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "ORIGINAL_EQUALS_TARGET",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "subTypes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "checkSubTypeCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "mustHaveIdenticalTags": {
                                              "type": "boolean",
                                              "description": "Must have identical tags",
                                              "example": false
                                            },
                                            "mustHaveIdenticalCapitalization": {
                                              "type": "boolean",
                                              "description": "Must have identical capitalization",
                                              "example": true
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "checkTypeCode"
                                          ],
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "ORIGINAL_EQUALS_TARGET"
                                              ],
                                              "description": "check type code",
                                              "example": "ORIGINAL_EQUALS_TARGET"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "SPELLCHECK",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "subTypes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "checkSubTypeCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "skipIfWordInUserDictionary": {
                                              "type": "boolean",
                                              "description": "Skip if word is in user dictionary.",
                                              "example": false
                                            },
                                            "skipIfWordStartsWithCapitalLetter": {
                                              "type": "boolean",
                                              "description": "Skip if word starts with capital letter.",
                                              "example": false
                                            },
                                            "skipIfWordAppearsInSourceString": {
                                              "type": "boolean",
                                              "description": "Skip if word appears in source string.",
                                              "example": false
                                            },
                                            "skipIfWordValidInSourceLocale": {
                                              "type": "boolean",
                                              "description": "Skip if word is valid in source locale.",
                                              "example": false
                                            },
                                            "runSpellcheckForSubWords": {
                                              "type": "boolean",
                                              "description": "Run spellchek for sub words.",
                                              "example": true
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "SPELLCHECK"
                                              ],
                                              "description": "check type code",
                                              "example": "SPELLCHECK"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "TAG_CONSISTENCY",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "TAG_CONSISTENCY"
                                              ],
                                              "description": "check type code",
                                              "example": "TAG_CONSISTENCY"
                                            },
                                            "subTypes": {
                                              "nullable": true,
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "checkSubTypeCode": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "enum": [
                                                      "TAG_ADDED",
                                                      "TAG_DELETED",
                                                      "SPACES_AROUND_TAGS",
                                                      "TAG_ORDER_IS_CHANGED"
                                                    ],
                                                    "description": "check subtype code",
                                                    "example": "TAG_ADDED"
                                                  },
                                                  "severityLevelCode": {
                                                    "nullable": true,
                                                    "type": "string",
                                                    "enum": [
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH",
                                                      "DISABLED"
                                                    ],
                                                    "description": "severity level code",
                                                    "example": "LOW"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "TARGET_LENGTH_LIMIT",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "subTypes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "checkSubTypeCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "TARGET_LENGTH_LIMIT"
                                              ],
                                              "description": "check type code",
                                              "example": "TARGET_LENGTH_LIMIT"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "NUMBER_CONSISTENCY",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "ignoreSign": {
                                              "type": "boolean",
                                              "description": "Ignore sign.",
                                              "example": true
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "NUMBER_CONSISTENCY"
                                              ],
                                              "description": "check type code",
                                              "example": "NUMBER_CONSISTENCY"
                                            },
                                            "subTypes": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "checkSubTypeCode": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "enum": [
                                                      "NUMBER_ADDED",
                                                      "NUMBER_DELETED",
                                                      "NUMBER_INCORRECT_CONVERSION"
                                                    ],
                                                    "description": "check subtype code",
                                                    "example": "NUMBER_ADDED"
                                                  },
                                                  "severityLevelCode": {
                                                    "nullable": true,
                                                    "type": "string",
                                                    "enum": [
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH",
                                                      "DISABLED"
                                                    ],
                                                    "description": "severity level code",
                                                    "example": "LOW"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "REPEATED_WORD",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "subTypes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "checkSubTypeCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "REPEATED_WORD"
                                              ],
                                              "description": "check type code",
                                              "example": "REPEATED_WORD"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "TARGET_IN_WRONG_LANGUAGE",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "subTypes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "checkSubTypeCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "minTextLengthLimit": {
                                              "type": "integer",
                                              "minimum": 0,
                                              "description": "Minimal text length limit.",
                                              "example": 10
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "TARGET_IN_WRONG_LANGUAGE"
                                              ],
                                              "description": "check type code",
                                              "example": "TARGET_IN_WRONG_LANGUAGE"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "SOURCE_IN_WRONG_LANGUAGE",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "subTypes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "checkSubTypeCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "minTextLengthLimit": {
                                              "type": "integer",
                                              "minimum": 0,
                                              "description": "Minimal text length limit.",
                                              "example": 10
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "SOURCE_IN_WRONG_LANGUAGE"
                                              ],
                                              "description": "check type code",
                                              "example": "SOURCE_IN_WRONG_LANGUAGE"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "SEGMENT_COMPLETENESS",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "lowerLengthThreshold": {
                                              "type": "integer",
                                              "description": "Lower length threshould",
                                              "example": 10
                                            },
                                            "upperLengthThreshold": {
                                              "type": "integer",
                                              "description": "Upper length threshould",
                                              "example": 20
                                            },
                                            "minLengthThreshold": {
                                              "type": "integer",
                                              "description": "Minimal lenght threshould",
                                              "example": 15
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "SEGMENT_COMPLETENESS"
                                              ],
                                              "description": "check type code",
                                              "example": "SEGMENT_COMPLETENESS"
                                            },
                                            "subTypes": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "checkSubTypeCode": {
                                                    "nullable": true,
                                                    "type": "string",
                                                    "enum": [
                                                      "TARGET_IS_EMPTY",
                                                      "TARGET_IS_MUCH_SHORTER_THAN_SOURCE",
                                                      "TARGET_IS_MUCH_LONGER_THAN_SOURCE"
                                                    ],
                                                    "description": "check subtype code",
                                                    "example": "TARGET_IS_EMPTY"
                                                  },
                                                  "severityLevelCode": {
                                                    "nullable": true,
                                                    "type": "string",
                                                    "enum": [
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH",
                                                      "DISABLED"
                                                    ],
                                                    "description": "severity level code",
                                                    "example": "LOW"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "NON_TRANSLATABLE_TEXT",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "subTypes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "checkSubTypeCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "NON_TRANSLATABLE_TEXT"
                                              ],
                                              "description": "check type code",
                                              "example": "NON_TRANSLATABLE_TEXT"
                                            },
                                            "subTypes": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "checkSubTypeCode": {
                                                    "nullable": true,
                                                    "type": "string",
                                                    "enum": [
                                                      "PLACEABLE_ADDED",
                                                      "PLACEABLE_DELETED",
                                                      "SPACES_AROUND_PLACEABLE",
                                                      "PLACEABLE_FORMAT"
                                                    ],
                                                    "description": "check subtype code",
                                                    "example": "PLACEABLE_ADDED"
                                                  },
                                                  "severityLevelCode": {
                                                    "nullable": true,
                                                    "type": "string",
                                                    "enum": [
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH",
                                                      "DISABLED"
                                                    ],
                                                    "description": "severity level code",
                                                    "example": "LOW"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "EMOJI_CONSISTENCY",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "noEmojisAllowedInTarget": {
                                              "type": "boolean",
                                              "description": "No emoji is allowed in target",
                                              "example": false
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "EMOJI_CONSISTENCY"
                                              ],
                                              "description": "check type code",
                                              "example": "EMOJI_CONSISTENCY"
                                            },
                                            "subTypes": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "checkSubTypeCode": {
                                                    "type": "string",
                                                    "enum": [
                                                      "EMOJI_ADDED",
                                                      "EMOJI_DELETED",
                                                      "EMOJI_PRESENT"
                                                    ],
                                                    "description": "check subtype code",
                                                    "example": "EMOJI_ADDED"
                                                  },
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH",
                                                      "DISABLED"
                                                    ],
                                                    "description": "severity level code",
                                                    "example": "LOW"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "INSERTABLE_CONSISTENCY",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "INSERTABLE_CONSISTENCY"
                                              ],
                                              "description": "check type code",
                                              "example": "INSERTABLE_CONSISTENCY"
                                            },
                                            "subTypes": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "checkSubTypeCode": {
                                                    "nullable": true,
                                                    "type": "string",
                                                    "enum": [
                                                      "INSERTABLE_ADDED",
                                                      "INSERTABLE_DELETED"
                                                    ],
                                                    "description": "check subtype code",
                                                    "example": "INSERTABLE_ADDED"
                                                  },
                                                  "severityLevelCode": {
                                                    "nullable": true,
                                                    "type": "string",
                                                    "enum": [
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH",
                                                      "DISABLED"
                                                    ],
                                                    "description": "severity level code",
                                                    "example": "LOW"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "TARGET_SOURCE_CONSISTENCY",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "ignoreTagsAndPlaceholders": {
                                              "type": "boolean",
                                              "description": "Ignore tags and placeholders.",
                                              "example": true
                                            },
                                            "ignoreCase": {
                                              "type": "boolean",
                                              "description": "Ignore case.",
                                              "example": false
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "TARGET_SOURCE_CONSISTENCY"
                                              ],
                                              "description": "check type code",
                                              "example": "TARGET_SOURCE_CONSISTENCY"
                                            },
                                            "subTypes": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "checkSubTypeCode": {
                                                    "type": "string",
                                                    "enum": [
                                                      "SAME_SOURCE_DIFFERENT_TRANSLATIONS",
                                                      "SAME_TRANSLATION_DIFFERENT_SOURCES"
                                                    ],
                                                    "description": "check subtype code",
                                                    "example": "SAME_SOURCE_DIFFERENT_TRANSLATIONS"
                                                  },
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH",
                                                      "DISABLED"
                                                    ],
                                                    "description": "severity level code",
                                                    "example": "LOW"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "BLACKLISTED_TERMS",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "subTypes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "checkSubTypeCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "BLACKLISTED_TERMS"
                                              ],
                                              "description": "check type code",
                                              "example": "BLACKLISTED_TERMS"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "GLOSSARY_COMPLIANCE",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "subTypes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "checkSubTypeCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "matchMethod": {
                                                  "type": "string",
                                                  "enum": [
                                                    "MATCH_BY_PERCENTAGE",
                                                    "EXACT_MATCH",
                                                    "LEXICAL_ANALYSIS"
                                                  ],
                                                  "description": "[Match method.](#operation/getGlossaryComplianceMatchMethods)",
                                                  "example": "MATCH_BY_PERCENTAGE"
                                                },
                                                "matchThreshold": {
                                                  "type": "integer",
                                                  "description": "Match threshold.",
                                                  "minimum": 0,
                                                  "maximum": 100,
                                                  "example": 10
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "sameTermCount": {
                                                  "type": "boolean",
                                                  "description": "If true the translation should have the glossary term the same number of times as in the source. If false the translation only requires the translation of the term at least once."
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "GLOSSARY_COMPLIANCE"
                                              ],
                                              "description": "check type code",
                                              "example": "GLOSSARY_COMPLIANCE"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "TRADEMARK_CONSISTENCY",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "subTypes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "checkSubTypeCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "TRADEMARK_CONSISTENCY"
                                              ],
                                              "description": "check type code",
                                              "example": "TRADEMARK_CONSISTENCY"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "GRAMMAR_CHECK",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "subTypes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "checkSubTypeCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "GRAMMAR_CHECK"
                                              ],
                                              "description": "check type code",
                                              "example": "GRAMMAR_CHECK"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "GLOBAL_CAPITALISATION_CONSISTENCY",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "subTypes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "checkSubTypeCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "GLOBAL_CAPITALISATION_CONSISTENCY"
                                              ],
                                              "description": "check type code",
                                              "example": "GLOBAL_CAPITALISATION_CONSISTENCY"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "PUNCTUATION_CONSISTENCY",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "subTypes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "checkSubTypeCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "PUNCTUATION_CONSISTENCY"
                                              ],
                                              "description": "check type code",
                                              "example": "PUNCTUATION_CONSISTENCY"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "PLURALS_REPETITION",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "subTypes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "checkSubTypeCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "PLURALS_REPETITION"
                                              ],
                                              "description": "check type code",
                                              "example": "PLURALS_REPETITION"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "REGEX_CHECK",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "subTypes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "checkSubTypeCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "REGEX_CHECK"
                                              ],
                                              "description": "check type code",
                                              "example": "REGEX_CHECK"
                                            },
                                            "rules": {
                                              "type": "array",
                                              "items": {
                                                "allOf": [
                                                  {
                                                    "type": "object",
                                                    "properties": {
                                                      "ruleUid": {
                                                        "type": "string",
                                                        "description": "Unique identifier of corresponding check rule",
                                                        "example": "ce6d6b5dbc12"
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "object",
                                                    "properties": {
                                                      "ruleName": {
                                                        "type": "string",
                                                        "description": "Rule name",
                                                        "example": "ruleName"
                                                      },
                                                      "severityLevelCode": {
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      },
                                                      "ruleTypeCode": {
                                                        "enum": [
                                                          "FORBIDDEN",
                                                          "MISSING",
                                                          "COUNT_MISMATCH"
                                                        ]
                                                      },
                                                      "flavorCode": {
                                                        "enum": [
                                                          "JAVA",
                                                          "DOT_NET"
                                                        ]
                                                      },
                                                      "originalPattern": {
                                                        "type": "string",
                                                        "description": "Regular expression to evaluate against the source string.",
                                                        "example": "@mail"
                                                      },
                                                      "translationPattern": {
                                                        "type": "string",
                                                        "description": "Regular expression to evaluate against the translation.",
                                                        "example": "@gmail"
                                                      },
                                                      "caseInsensitive": {
                                                        "type": "boolean",
                                                        "description": "Enable case insensitive search",
                                                        "example": true
                                                      },
                                                      "multiLine": {
                                                        "type": "boolean",
                                                        "description": "Enables multine search. If true then search will span newlines in a string. Users can use ^ and $ characters with special meaning for beginning of line and end of line match.",
                                                        "example": true
                                                      },
                                                      "description": {
                                                        "type": "string",
                                                        "description": "Human readable description of the role; shown in the the dashboard UI.",
                                                        "example": "rule description"
                                                      },
                                                      "warningMessage": {
                                                        "type": "string",
                                                        "description": "Human readable warning message appended to the standard message that is shown in the CAT tool when the check fails.",
                                                        "example": " test warning message"
                                                      }
                                                    },
                                                    "required": [
                                                      "ruleName",
                                                      "severityLevelCode",
                                                      "ruleTypeCode",
                                                      "flavorCode",
                                                      "originalPattern",
                                                      "translationPattern",
                                                      "caseInsensitive",
                                                      "multiLine"
                                                    ]
                                                  },
                                                  {
                                                    "type": "object",
                                                    "properties": {
                                                      "groups": {
                                                        "type": "array",
                                                        "items": {
                                                          "allOf": [
                                                            {
                                                              "type": "object",
                                                              "properties": {
                                                                "groupUid": {
                                                                  "type": "string",
                                                                  "description": "Smartling rule group identifier of the translation",
                                                                  "example": "ce6d6b5dbc12"
                                                                },
                                                                "ruleUid": {
                                                                  "type": "string",
                                                                  "description": "Smartling rule identifier of the translation",
                                                                  "example": "ce6d6b5dbcs2"
                                                                },
                                                                "targetLocaleIds": {
                                                                  "description": "The list of target locales.",
                                                                  "example": [
                                                                    "ru-RU"
                                                                  ],
                                                                  "items": {
                                                                    "type": "string"
                                                                  },
                                                                  "type": "array"
                                                                },
                                                                "severityLevelCode": {
                                                                  "type": "string",
                                                                  "description": "severity level code",
                                                                  "example": "MEDIUM",
                                                                  "enum": [
                                                                    "DISABLED",
                                                                    "LOW",
                                                                    "MEDIUM",
                                                                    "HIGH"
                                                                  ]
                                                                }
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      "title": "OPEN_ISSUES",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "profileUid": {
                                              "type": "string",
                                              "description": "Unique identifier of corresponding profile.",
                                              "example": "ce6d6b5dbc12"
                                            }
                                          }
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "severityLevelCode": {
                                                  "type": "string",
                                                  "description": "severity level code",
                                                  "example": "MEDIUM",
                                                  "enum": [
                                                    "DISABLED",
                                                    "LOW",
                                                    "MEDIUM",
                                                    "HIGH"
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "subTypes": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "checkSubTypeCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "check subtype code",
                                                        "example": ""
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "localeSeverityLevels": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "targetLocaleId": {
                                                        "type": "string",
                                                        "description": "Smartling locale identifier of the translation",
                                                        "example": "it-IT"
                                                      },
                                                      "severityLevelCode": {
                                                        "type": "string",
                                                        "description": "severity level code",
                                                        "example": "MEDIUM",
                                                        "enum": [
                                                          "DISABLED",
                                                          "LOW",
                                                          "MEDIUM",
                                                          "HIGH"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "groups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "groupUid": {
                                                        "type": "string",
                                                        "description": "unique identifier of group",
                                                        "example": "12dsd344ds"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "sourceIssuesMustBeResolved": {
                                              "type": "boolean",
                                              "description": "All source issues must be resolved",
                                              "example": false
                                            },
                                            "translationIssuesMustBeResolved": {
                                              "type": "boolean",
                                              "description": "All translation issues must be resolved",
                                              "example": true
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "checkTypeCode"
                                          ],
                                          "properties": {
                                            "checkTypeCode": {
                                              "type": "string",
                                              "enum": [
                                                "OPEN_ISSUES"
                                              ],
                                              "description": "check type code",
                                              "example": "OPEN_ISSUES"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "ORIGINAL_EQUALS_TARGET": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "ORIGINAL_EQUALS_TARGET",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "mustHaveIdenticalTags": true,
                          "mustHaveIdenticalCapitalization": true
                        }
                      }
                    }
                  },
                  "WHITESPACES": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "WHITESPACES",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        }
                      }
                    }
                  },
                  "SPELLCHECK": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "SPELLCHECK",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "skipIfWordInUserDictionary": true,
                          "skipIfWordStartsWithCapitalLetter": false,
                          "skipIfWordAppearsInSourceString": true,
                          "skipIfWordValidInSourceLocale": false,
                          "runSpellcheckForSubWords": false
                        }
                      }
                    }
                  },
                  "TAG_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "TAG_CONSISTENCY",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "TAG_ADDED",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "TAG_DELETED",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "TAG_ORDER_IS_CHANGED",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "SPACES_AROUND_TAGS",
                              "severityLevelCode": "LOW"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": []
                        }
                      }
                    }
                  },
                  "TARGET_LENGTH_LIMIT": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "HIGH",
                          "checkTypeCode": "TARGET_LENGTH_LIMIT",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        }
                      }
                    }
                  },
                  "NUMBER_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "NUMBER_CONSISTENCY",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "NUMBER_DELETED",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "NUMBER_ADDED",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "NUMBER_INCORRECT_CONVERSION",
                              "severityLevelCode": "LOW"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": [
                            {
                              "groupUid": "b0dd258b05ee"
                            },
                            {
                              "groupUid": "a853df2cf8ac"
                            }
                          ],
                          "ignoreSign": true
                        }
                      }
                    }
                  },
                  "REPEATED_WORD": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "REPEATED_WORD",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        }
                      }
                    }
                  },
                  "TARGET_IN_WRONG_LANGUAGE": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "TARGET_IN_WRONG_LANGUAGE",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "minTextLengthLimit": 40
                        }
                      }
                    }
                  },
                  "SOURCE_IN_WRONG_LANGUAGE": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "SOURCE_IN_WRONG_LANGUAGE",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "minTextLengthLimit": 40
                        }
                      }
                    }
                  },
                  "SEGMENT_COMPLETENESS": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "MEDIUM",
                          "checkTypeCode": "SEGMENT_COMPLETENESS",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "TARGET_IS_MUCH_SHORTER_THAN_SOURCE",
                              "severityLevelCode": "MEDIUM"
                            },
                            {
                              "checkSubTypeCode": "TARGET_IS_MUCH_LONGER_THAN_SOURCE",
                              "severityLevelCode": "MEDIUM"
                            },
                            {
                              "checkSubTypeCode": "TARGET_IS_EMPTY",
                              "severityLevelCode": "DISABLED"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "lowerLengthThreshold": 50,
                          "upperLengthThreshold": 250,
                          "minLengthThreshold": 10
                        }
                      }
                    }
                  },
                  "NON_TRANSLATABLE_TEXT": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "MEDIUM",
                          "checkTypeCode": "NON_TRANSLATABLE_TEXT",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "PLACEABLE_DELETED",
                              "severityLevelCode": "MEDIUM"
                            },
                            {
                              "checkSubTypeCode": "SPACES_AROUND_PLACEABLE",
                              "severityLevelCode": "MEDIUM"
                            },
                            {
                              "checkSubTypeCode": "PLACEABLE_ADDED",
                              "severityLevelCode": "MEDIUM"
                            },
                            {
                              "checkSubTypeCode": "PLACEABLE_FORMAT",
                              "severityLevelCode": "MEDIUM"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": []
                        }
                      }
                    }
                  },
                  "EMOJI_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "EMOJI_CONSISTENCY",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "EMOJI_PRESENT",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "EMOJI_DELETED",
                              "severityLevelCode": "DISABLED"
                            },
                            {
                              "checkSubTypeCode": "EMOJI_ADDED",
                              "severityLevelCode": "LOW"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "noEmojisAllowedInTarget": false
                        }
                      }
                    }
                  },
                  "INSERTABLE_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "INSERTABLE_CONSISTENCY",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "INSERTABLE_DELETED",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "INSERTABLE_ADDED",
                              "severityLevelCode": "LOW"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": []
                        }
                      }
                    }
                  },
                  "TARGET_SOURCE_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "TARGET_SOURCE_CONSISTENCY",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "SAME_TRANSLATION_DIFFERENT_SOURCES",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "SAME_SOURCE_DIFFERENT_TRANSLATIONS",
                              "severityLevelCode": "LOW"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "ignoreTagsAndPlaceholders": true,
                          "ignoreCase": true
                        }
                      }
                    }
                  },
                  "BLACKLISTED_TERMS": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "MEDIUM",
                          "checkTypeCode": "BLACKLISTED_TERMS",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        }
                      }
                    }
                  },
                  "GLOSSARY_COMPLIANCE": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "DISABLED",
                          "checkTypeCode": "GLOSSARY_COMPLIANCE",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "matchMethod": "MATCH_BY_PERCENTAGE",
                          "matchThreshold": 50,
                          "sameTermCount": true
                        }
                      }
                    }
                  },
                  "TRADEMARK_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "TRADEMARK_CONSISTENCY",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        }
                      }
                    }
                  },
                  "GRAMMAR_CHECK": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "GRAMMAR_CHECK",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        }
                      }
                    }
                  },
                  "GLOBAL_CAPITALISATION_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "GLOBAL_CAPITALISATION_CONSISTENCY",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        }
                      }
                    }
                  },
                  "PUNCTUATION_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "PUNCTUATION_CONSISTENCY",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        }
                      }
                    }
                  },
                  "PLURALS_REPETITION": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "MEDIUM",
                          "checkTypeCode": "PLURALS_REPETITION",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        }
                      }
                    }
                  },
                  "REGEX_CHECK": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "REGEX_CHECK",
                          "subTypes": [],
                          "groups": [],
                          "rules": [
                            {
                              "ruleUid": "2d83ea74c848",
                              "severityLevelCode": "LOW",
                              "ruleName": "ruleName1",
                              "ruleTypeCode": "FORBIDDEN",
                              "flavorCode": "JAVA",
                              "originalPattern": "@mail",
                              "translationPattern": "@gmail",
                              "description": "ruleName1 description",
                              "caseInsensitive": true,
                              "multiLine": false,
                              "warningMessage": "test warning",
                              "groups": []
                            }
                          ]
                        }
                      }
                    }
                  },
                  "OPEN_ISSUES": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "profileUid": "ce6d6b5dbc12",
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "OPEN_ISSUES",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "sourceIssuesMustBeResolved": true,
                          "translationIssuesMustBeResolved": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/$smartlingCheckTypeCode\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types/{checkTypeCode}/settings": {
      "put": {
        "description": "Update profile check type settings.",
        "summary": "Update profile check type settings",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "profilesUpdateAccountCheckTypesSettings",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "checkTypeCode",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "ORIGINAL_EQUALS_TARGET",
                "SPELLCHECK",
                "NUMBER_CONSISTENCY",
                "TARGET_IN_WRONG_LANGUAGE",
                "SOURCE_IN_WRONG_LANGUAGE",
                "SEGMENT_COMPLETENESS",
                "EMOJI_CONSISTENCY",
                "TARGET_SOURCE_CONSISTENCY",
                "GLOSSARY_COMPLIANCE",
                "OPEN_ISSUES"
              ]
            },
            "description": "[check type code](#operation/getTranslationQualityCheckTypes)"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "title": "EMOJI_CONSISTENCY",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "noEmojisAllowedInTarget": {
                            "type": "boolean",
                            "description": "No emoji is allowed in target",
                            "example": false
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "noEmojisAllowedInTarget"
                        ]
                      }
                    ]
                  },
                  {
                    "title": "SPELLCHECK",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "skipIfWordInUserDictionary": {
                            "type": "boolean",
                            "description": "Skip if word is in user dictionary.",
                            "example": false
                          },
                          "skipIfWordStartsWithCapitalLetter": {
                            "type": "boolean",
                            "description": "Skip if word starts with capital letter.",
                            "example": false
                          },
                          "skipIfWordAppearsInSourceString": {
                            "type": "boolean",
                            "description": "Skip if word appears in source string.",
                            "example": false
                          },
                          "skipIfWordValidInSourceLocale": {
                            "type": "boolean",
                            "description": "Skip if word is valid in source locale.",
                            "example": false
                          },
                          "runSpellcheckForSubWords": {
                            "type": "boolean",
                            "description": "Run spellchek for sub words.",
                            "example": true
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "skipIfWordInUserDictionary",
                          "skipIfWordStartsWithCapitalLetter",
                          "skipIfWordAppearsInSourceString",
                          "skipIfWordValidInSourceLocale",
                          "runSpellcheckForSubWords"
                        ]
                      }
                    ]
                  },
                  {
                    "title": "SOURCE_IN_WRONG_LANGUAGE",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "minTextLengthLimit": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Minimal text length limit.",
                            "example": 10
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "minTextLengthLimit"
                        ]
                      }
                    ]
                  },
                  {
                    "title": "TARGET_IN_WRONG_LANGUAGE",
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "minTextLengthLimit"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "minTextLengthLimit": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Minimal text length limit.",
                            "example": 10
                          }
                        }
                      }
                    ]
                  },
                  {
                    "title": "NUMBER_CONSISTENCY",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "ignoreSign": {
                            "type": "boolean",
                            "description": "Ignore sign.",
                            "example": true
                          }
                        }
                      }
                    ]
                  },
                  {
                    "title": "TARGET_SOURCE_CONSISTENCY",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "ignoreTagsAndPlaceholders": {
                            "type": "boolean",
                            "description": "Ignore tags and placeholders.",
                            "example": true
                          },
                          "ignoreCase": {
                            "type": "boolean",
                            "description": "Ignore case.",
                            "example": false
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "ignoreTagsAndPlaceholders",
                          "ignoreCase"
                        ]
                      }
                    ]
                  },
                  {
                    "title": "GLOSSARY_COMPLIANCE",
                    "allOf": [
                      {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "matchMethod": {
                                "type": "string",
                                "enum": [
                                  "MATCH_BY_PERCENTAGE",
                                  "EXACT_MATCH",
                                  "LEXICAL_ANALYSIS"
                                ],
                                "description": "[Match method.](#operation/getGlossaryComplianceMatchMethods)",
                                "example": "MATCH_BY_PERCENTAGE"
                              },
                              "matchThreshold": {
                                "type": "integer",
                                "description": "Match threshold.",
                                "minimum": 0,
                                "maximum": 100,
                                "example": 10
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "sameTermCount": {
                                "type": "boolean",
                                "description": "If true the translation should have the glossary term the same number of times as in the source. If false the translation only requires the translation of the term at least once."
                              }
                            }
                          }
                        ]
                      },
                      {
                        "type": "object",
                        "required": [
                          "matchMethod",
                          "matchThreshold"
                        ]
                      }
                    ]
                  },
                  {
                    "title": "ORIGINAL_EQUALS_TARGET",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "mustHaveIdenticalTags": {
                            "type": "boolean",
                            "description": "Must have identical tags",
                            "example": false
                          },
                          "mustHaveIdenticalCapitalization": {
                            "type": "boolean",
                            "description": "Must have identical capitalization",
                            "example": true
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "mustHaveIdenticalTags",
                          "mustHaveIdenticalCapitalization"
                        ]
                      }
                    ]
                  },
                  {
                    "title": "SEGMENT_COMPLETENESS",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "lowerLengthThreshold": {
                            "type": "integer",
                            "description": "Lower length threshould",
                            "example": 10
                          },
                          "upperLengthThreshold": {
                            "type": "integer",
                            "description": "Upper length threshould",
                            "example": 20
                          },
                          "minLengthThreshold": {
                            "type": "integer",
                            "description": "Minimal lenght threshould",
                            "example": 15
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "targetLocaleId": {
                            "type": "string",
                            "description": "Smartling ID for the language you want to translate to.",
                            "example": "it-IT"
                          }
                        },
                        "required": [
                          "targetLocaleId"
                        ]
                      }
                    ]
                  },
                  {
                    "title": "OPEN_ISSUES",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "sourceIssuesMustBeResolved": {
                            "type": "boolean",
                            "description": "All source issues must be resolved",
                            "example": false
                          },
                          "translationIssuesMustBeResolved": {
                            "type": "boolean",
                            "description": "All translation issues must be resolved",
                            "example": true
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "sourceIssuesMustBeResolved",
                          "translationIssuesMustBeResolved"
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "anyOf": [
                                {
                                  "title": "EMOJI_CONSISTENCY",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "noEmojisAllowedInTarget": {
                                          "type": "boolean",
                                          "description": "No emoji is allowed in target",
                                          "example": false
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "title": "SPELLCHECK",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "skipIfWordInUserDictionary": {
                                          "type": "boolean",
                                          "description": "Skip if word is in user dictionary.",
                                          "example": false
                                        },
                                        "skipIfWordStartsWithCapitalLetter": {
                                          "type": "boolean",
                                          "description": "Skip if word starts with capital letter.",
                                          "example": false
                                        },
                                        "skipIfWordAppearsInSourceString": {
                                          "type": "boolean",
                                          "description": "Skip if word appears in source string.",
                                          "example": false
                                        },
                                        "skipIfWordValidInSourceLocale": {
                                          "type": "boolean",
                                          "description": "Skip if word is valid in source locale.",
                                          "example": false
                                        },
                                        "runSpellcheckForSubWords": {
                                          "type": "boolean",
                                          "description": "Run spellchek for sub words.",
                                          "example": true
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "title": "SOURCE_IN_WRONG_LANGUAGE",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "minTextLengthLimit": {
                                          "type": "integer",
                                          "minimum": 0,
                                          "description": "Minimal text length limit.",
                                          "example": 10
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "title": "TARGET_IN_WRONG_LANGUAGE",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "minTextLengthLimit": {
                                          "type": "integer",
                                          "minimum": 0,
                                          "description": "Minimal text length limit.",
                                          "example": 10
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "title": "NUMBER_CONSISTENCY",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "ignoreSign": {
                                          "type": "boolean",
                                          "description": "Ignore sign.",
                                          "example": true
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "title": "TARGET_SOURCE_CONSISTENCY",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "ignoreTagsAndPlaceholders": {
                                          "type": "boolean",
                                          "description": "Ignore tags and placeholders.",
                                          "example": true
                                        },
                                        "ignoreCase": {
                                          "type": "boolean",
                                          "description": "Ignore case.",
                                          "example": false
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "title": "GLOSSARY_COMPLIANCE",
                                  "allOf": [
                                    {
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "matchMethod": {
                                              "type": "string",
                                              "enum": [
                                                "MATCH_BY_PERCENTAGE",
                                                "EXACT_MATCH",
                                                "LEXICAL_ANALYSIS"
                                              ],
                                              "description": "[Match method.](#operation/getGlossaryComplianceMatchMethods)",
                                              "example": "MATCH_BY_PERCENTAGE"
                                            },
                                            "matchThreshold": {
                                              "type": "integer",
                                              "description": "Match threshold.",
                                              "minimum": 0,
                                              "maximum": 100,
                                              "example": 10
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "sameTermCount": {
                                              "type": "boolean",
                                              "description": "If true the translation should have the glossary term the same number of times as in the source. If false the translation only requires the translation of the term at least once."
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "title": "ORIGINAL_EQUALS_TARGET",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "mustHaveIdenticalTags": {
                                          "type": "boolean",
                                          "description": "Must have identical tags",
                                          "example": false
                                        },
                                        "mustHaveIdenticalCapitalization": {
                                          "type": "boolean",
                                          "description": "Must have identical capitalization",
                                          "example": true
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "title": "SEGMENT_COMPLETENESS",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "lowerLengthThreshold": {
                                          "type": "integer",
                                          "description": "Lower length threshould",
                                          "example": 10
                                        },
                                        "upperLengthThreshold": {
                                          "type": "integer",
                                          "description": "Upper length threshould",
                                          "example": 20
                                        },
                                        "minLengthThreshold": {
                                          "type": "integer",
                                          "description": "Minimal lenght threshould",
                                          "example": 15
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "title": "OPEN_ISSUES",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "sourceIssuesMustBeResolved": {
                                          "type": "boolean",
                                          "description": "All source issues must be resolved",
                                          "example": false
                                        },
                                        "translationIssuesMustBeResolved": {
                                          "type": "boolean",
                                          "description": "All translation issues must be resolved",
                                          "example": true
                                        }
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "EMOJI_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "noEmojisAllowedInTarget": true
                        }
                      }
                    }
                  },
                  "SPELLCHECK": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "skipIfWordInUserDictionary": false,
                          "skipIfWordStartsWithCapitalLetter": true,
                          "skipIfWordAppearsInSourceString": false,
                          "skipIfWordValidInSourceLocale": true,
                          "runSpellcheckForSubWords": true
                        }
                      }
                    }
                  },
                  "SOURCE_IN_WRONG_LANGUAGE": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "minTextLengthLimit": 10
                        }
                      }
                    }
                  },
                  "TARGET_IN_WRONG_LANGUAGE": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "minTextLengthLimit": 15
                        }
                      }
                    }
                  },
                  "NUMBER_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "ignoreSign": true
                        }
                      }
                    }
                  },
                  "TARGET_SOURCE_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "ignoreTagsAndPlaceholders": true,
                          "ignoreCase": true
                        }
                      }
                    }
                  },
                  "GLOSSARY_COMPLIANCE": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "matchMethod": "MATCH_BY_PERCENTAGE",
                          "matchThreshold": 10,
                          "sameTermCount": true
                        }
                      }
                    }
                  },
                  "ORIGINAL_EQUALS_TARGET": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "mustHaveIdenticalTags": false,
                          "mustHaveIdenticalCapitalization": false
                        }
                      }
                    }
                  },
                  "SEGMENT_COMPLETENESS": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "lowerLengthThreshold": 10,
                          "upperLengthThreshold": 20,
                          "minLengthThreshold": 15
                        }
                      }
                    }
                  },
                  "OPEN_ISSUES": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "sourceIssuesMustBeResolved": true,
                          "translationIssuesMustBeResolved": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -d \"$smartlingStringTQCJSON\" -H \"Content-Type: application/json\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/$smartlingCheckTypeCode/settings\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types/{checkTypeCode}/severity-level": {
      "put": {
        "description": "Update the severity level for a quality check type.",
        "summary": "Update severity level for quality check type",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "profilesUpdateCheckTypeSeverityLevel",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "checkTypeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "[check type code](#operation/getTranslationQualityCheckTypes)",
              "example": "LEADING_TRAILING_SPACES",
              "enum": [
                "LEADING_TRAILING_SPACES",
                "ORIGINAL_EQUALS_TARGET",
                "WHITESPACES",
                "SPELLCHECK",
                "TAG_CONSISTENCY",
                "TARGET_LENGTH_LIMIT",
                "NUMBER_CONSISTENCY",
                "REPEATED_WORD",
                "TARGET_IN_WRONG_LANGUAGE",
                "SOURCE_IN_WRONG_LANGUAGE",
                "SEGMENT_COMPLETENESS",
                "NON_TRANSLATABLE_TEXT",
                "EMOJI_CONSISTENCY",
                "INSERTABLE_CONSISTENCY",
                "TARGET_SOURCE_CONSISTENCY",
                "BLACKLISTED_TERMS",
                "GLOSSARY_COMPLIANCE",
                "TRADEMARK_CONSISTENCY",
                "GRAMMAR_CHECK",
                "GLOBAL_CAPITALISATION_CONSISTENCY",
                "PUNCTUATION_CONSISTENCY",
                "PLURALS_REPETITION",
                "REGEX_CHECK",
                "OPEN_ISSUES"
              ]
            },
            "description": "[check type code](#operation/getTranslationQualityCheckTypes)"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "severityLevelCode": {
                        "enum": [
                          "DISABLED",
                          "LOW",
                          "MEDIUM",
                          "HIGH"
                        ]
                      }
                    },
                    "required": [
                      "severityLevelCode"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "severityLevelCode": {
                                  "type": "string",
                                  "description": "severity level code",
                                  "example": "MEDIUM",
                                  "enum": [
                                    "DISABLED",
                                    "LOW",
                                    "MEDIUM",
                                    "HIGH"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTQCJSON\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/$smartlingCheckTypeCode/severity-level\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types/{checkTypeCode}/sub-types/{checkSubTypeCode}/severity-level": {
      "put": {
        "description": "Update the severity level for a quality check subtype.",
        "summary": "Update severity level for quality check subtype",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "profilesUpdateCheckSubTypeSeverityLevel",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "checkTypeCode",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "TAG_CONSISTENCY",
                "NUMBER_CONSISTENCY",
                "SEGMENT_COMPLETENESS",
                "NON_TRANSLATABLE_TEXT",
                "EMOJI_CONSISTENCY",
                "INSERTABLE_CONSISTENCY",
                "TARGET_SOURCE_CONSISTENCY"
              ]
            },
            "description": "[check type code](#operation/getTranslationQualityCheckTypes)"
          },
          {
            "name": "checkSubTypeCode",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "EMOJI_ADDED",
                "EMOJI_DELETED",
                "EMOJI_PRESENT",
                "INSERTABLE_ADDED",
                "INSERTABLE_DELETED",
                "PLACEABLE_ADDED",
                "PLACEABLE_DELETED",
                "SPACES_AROUND_PLACEABLE",
                "PLACEABLE_FORMAT",
                "NUMBER_ADDED",
                "NUMBER_DELETED",
                "NUMBER_INCORRECT_CONVERSION",
                "TARGET_IS_EMPTY",
                "TARGET_IS_MUCH_SHORTER_THAN_SOURCE",
                "TARGET_IS_MUCH_LONGER_THAN_SOURCE",
                "TAG_ADDED",
                "TAG_DELETED",
                "SPACES_AROUND_TAGS",
                "TAG_ORDER_IS_CHANGED",
                "OPEN_CLOSED_TAG_ORDER_IS_CHANGED",
                "INVALID_TAG_NESTING",
                "TAG_IS_CHANGED",
                "SAME_SOURCE_DIFFERENT_TRANSLATIONS",
                "SAME_TRANSLATION_DIFFERENT_SOURCES"
              ]
            },
            "description": "[check subtype code](#operation/getTranslationQualityCheckSubTypes)"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "severityLevelCode": {
                        "enum": [
                          "DISABLED",
                          "LOW",
                          "MEDIUM",
                          "HIGH"
                        ]
                      }
                    },
                    "required": [
                      "severityLevelCode"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "severityLevelCode": {
                                  "type": "string",
                                  "description": "severity level code",
                                  "example": "MEDIUM",
                                  "enum": [
                                    "DISABLED",
                                    "LOW",
                                    "MEDIUM",
                                    "HIGH"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTQCJSON\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/$smartlingCheckTypeCode/sub-types/$smartlingCheckSubTypeCode/severity-level\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types/{checkTypeCode}/groups": {
      "get": {
        "description": "Get check type groups settings.",
        "summary": "Get check type groups settings",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "getProfilesTranslationQualityCheckTypeGroupDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountUid"
          },
          {
            "$ref": "#/components/parameters/profileUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/checkTypeCodePathParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfilesAccountCheckTypeGetGroupsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/$smartlingCheckTypeCode/groups\n"
          }
        ]
      },
      "post": {
        "description": "Create check type group.",
        "summary": "Create check type group",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "CreateProfilesTranslationQualityCheckTypeGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountUid"
          },
          {
            "$ref": "#/components/parameters/profileUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/checkTypeCodePathParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "targetLocaleIds": {
                    "description": "List of target locale IDs.",
                    "example": [
                      "ru-RU"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "targetLocaleIds"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfilesAccountCheckTypeCreateGroupResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTQCJSON\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/$smartlingCheckTypeCode/groups\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types/{checkTypeCode}/groups/{groupUid}": {
      "get": {
        "description": "Get a quality check type group by the group identifier.",
        "summary": "Get quality check type group by group identifier",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "getProfilesTranslationQualityCheckTypeGroupDetailsByGroup",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "checkTypeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "[check type code](#operation/getTranslationQualityCheckTypes)",
              "example": "LEADING_TRAILING_SPACES",
              "enum": [
                "LEADING_TRAILING_SPACES",
                "ORIGINAL_EQUALS_TARGET",
                "WHITESPACES",
                "SPELLCHECK",
                "TAG_CONSISTENCY",
                "TARGET_LENGTH_LIMIT",
                "NUMBER_CONSISTENCY",
                "REPEATED_WORD",
                "TARGET_IN_WRONG_LANGUAGE",
                "SOURCE_IN_WRONG_LANGUAGE",
                "SEGMENT_COMPLETENESS",
                "NON_TRANSLATABLE_TEXT",
                "EMOJI_CONSISTENCY",
                "INSERTABLE_CONSISTENCY",
                "TARGET_SOURCE_CONSISTENCY",
                "BLACKLISTED_TERMS",
                "GLOSSARY_COMPLIANCE",
                "TRADEMARK_CONSISTENCY",
                "GRAMMAR_CHECK",
                "GLOBAL_CAPITALISATION_CONSISTENCY",
                "PUNCTUATION_CONSISTENCY",
                "PLURALS_REPETITION",
                "REGEX_CHECK",
                "OPEN_ISSUES"
              ]
            },
            "description": "[check type code](#operation/getTranslationQualityCheckTypes)"
          },
          {
            "name": "groupUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique identifier of corresponding group."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "groupUid": {
                                      "type": "string",
                                      "description": "Unique identifier of corresponding group."
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "profileUid": {
                                      "type": "string",
                                      "description": "Unique identifier of corresponding profile.",
                                      "example": "ce6d6b5dbc12"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "severityLevelCode": {
                                      "type": "string",
                                      "description": "severity level code",
                                      "example": "MEDIUM",
                                      "enum": [
                                        "DISABLED",
                                        "LOW",
                                        "MEDIUM",
                                        "HIGH"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "checkTypeCode": {
                                      "type": "string",
                                      "description": "[check type code](#operation/getTranslationQualityCheckTypes)",
                                      "example": "LEADING_TRAILING_SPACES",
                                      "enum": [
                                        "LEADING_TRAILING_SPACES",
                                        "ORIGINAL_EQUALS_TARGET",
                                        "WHITESPACES",
                                        "SPELLCHECK",
                                        "TAG_CONSISTENCY",
                                        "TARGET_LENGTH_LIMIT",
                                        "NUMBER_CONSISTENCY",
                                        "REPEATED_WORD",
                                        "TARGET_IN_WRONG_LANGUAGE",
                                        "SOURCE_IN_WRONG_LANGUAGE",
                                        "SEGMENT_COMPLETENESS",
                                        "NON_TRANSLATABLE_TEXT",
                                        "EMOJI_CONSISTENCY",
                                        "INSERTABLE_CONSISTENCY",
                                        "TARGET_SOURCE_CONSISTENCY",
                                        "BLACKLISTED_TERMS",
                                        "GLOSSARY_COMPLIANCE",
                                        "TRADEMARK_CONSISTENCY",
                                        "GRAMMAR_CHECK",
                                        "GLOBAL_CAPITALISATION_CONSISTENCY",
                                        "PUNCTUATION_CONSISTENCY",
                                        "PLURALS_REPETITION",
                                        "REGEX_CHECK",
                                        "OPEN_ISSUES"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "subTypes": {
                                      "type": "array",
                                      "items": {
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkSubTypeCode": {
                                                "enum": [
                                                  "EMOJI_ADDED",
                                                  "EMOJI_DELETED",
                                                  "EMOJI_PRESENT",
                                                  "INSERTABLE_ADDED",
                                                  "INSERTABLE_DELETED",
                                                  "PLACEABLE_ADDED",
                                                  "PLACEABLE_DELETED",
                                                  "SPACES_AROUND_PLACEABLE",
                                                  "PLACEABLE_FORMAT",
                                                  "NUMBER_ADDED",
                                                  "NUMBER_DELETED",
                                                  "NUMBER_INCORRECT_CONVERSION",
                                                  "TARGET_IS_EMPTY",
                                                  "TARGET_IS_MUCH_SHORTER_THAN_SOURCE",
                                                  "TARGET_IS_MUCH_LONGER_THAN_SOURCE",
                                                  "TAG_ADDED",
                                                  "TAG_DELETED",
                                                  "SPACES_AROUND_TAGS",
                                                  "TAG_ORDER_IS_CHANGED",
                                                  "OPEN_CLOSED_TAG_ORDER_IS_CHANGED",
                                                  "INVALID_TAG_NESTING",
                                                  "TAG_IS_CHANGED",
                                                  "SAME_SOURCE_DIFFERENT_TRANSLATIONS",
                                                  "SAME_TRANSLATION_DIFFERENT_SOURCES"
                                                ]
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "check subtype name",
                                                "example": "Emoji added"
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "severityLevelCode": {
                                                "type": "string",
                                                "description": "severity level code",
                                                "example": "MEDIUM",
                                                "enum": [
                                                  "DISABLED",
                                                  "LOW",
                                                  "MEDIUM",
                                                  "HIGH"
                                                ]
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "locales": {
                                      "type": "array",
                                      "items": {
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "targetLocaleId": {
                                                "type": "string",
                                                "description": "Smartling ID for the language you want to translate to.",
                                                "example": "it-IT"
                                              }
                                            },
                                            "required": [
                                              "targetLocaleId"
                                            ]
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "ignoreSign": {
                                      "type": "string",
                                      "example": false
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/$smartlingCheckTypeCode/groups/$smartlingGroupUid\n"
          }
        ]
      },
      "delete": {
        "description": "Delete a quality check type group by the group identifier.",
        "summary": "Delete quality check type group by group identifier",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "deleteProfilesTranslationQualityCheckTypeGroup",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "checkTypeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "[check type code](#operation/getTranslationQualityCheckTypes)",
              "example": "LEADING_TRAILING_SPACES",
              "enum": [
                "LEADING_TRAILING_SPACES",
                "ORIGINAL_EQUALS_TARGET",
                "WHITESPACES",
                "SPELLCHECK",
                "TAG_CONSISTENCY",
                "TARGET_LENGTH_LIMIT",
                "NUMBER_CONSISTENCY",
                "REPEATED_WORD",
                "TARGET_IN_WRONG_LANGUAGE",
                "SOURCE_IN_WRONG_LANGUAGE",
                "SEGMENT_COMPLETENESS",
                "NON_TRANSLATABLE_TEXT",
                "EMOJI_CONSISTENCY",
                "INSERTABLE_CONSISTENCY",
                "TARGET_SOURCE_CONSISTENCY",
                "BLACKLISTED_TERMS",
                "GLOSSARY_COMPLIANCE",
                "TRADEMARK_CONSISTENCY",
                "GRAMMAR_CHECK",
                "GLOBAL_CAPITALISATION_CONSISTENCY",
                "PUNCTUATION_CONSISTENCY",
                "PLURALS_REPETITION",
                "REGEX_CHECK",
                "OPEN_ISSUES"
              ]
            },
            "description": "[check type code](#operation/getTranslationQualityCheckTypes)"
          },
          {
            "name": "groupUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique identifier of corresponding group."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SUCCESS"
                      ],
                      "description": "Indicates whether the response was successful or what error has occurred."
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "code": "SUCCESS"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X DELETE -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/$smartlingCheckTypeCode/groups/$smartlingGroupUid\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types/{checkTypeCode}/groups/{groupUid}/settings": {
      "put": {
        "description": "Update profile check type group settings.",
        "summary": "Update profile check type group settings",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "updateProfilesCheckTypeGroupSettings",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "checkTypeCode",
            "in": "path",
            "required": true,
            "schema": {
              "enum": [
                "ORIGINAL_EQUALS_TARGET",
                "SPELLCHECK",
                "NUMBER_CONSISTENCY",
                "TARGET_IN_WRONG_LANGUAGE",
                "SOURCE_IN_WRONG_LANGUAGE",
                "SEGMENT_COMPLETENESS",
                "EMOJI_CONSISTENCY",
                "TARGET_SOURCE_CONSISTENCY",
                "GLOSSARY_COMPLIANCE",
                "OPEN_ISSUES"
              ]
            },
            "description": "[check type code](#operation/getTranslationQualityCheckTypes)"
          },
          {
            "name": "groupUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique identifier of corresponding group."
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "title": "EMOJI_CONSISTENCY",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "noEmojisAllowedInTarget": {
                            "type": "boolean",
                            "description": "No emoji is allowed in target",
                            "example": false
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "noEmojisAllowedInTarget"
                        ]
                      }
                    ]
                  },
                  {
                    "title": "SPELLCHECK",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "skipIfWordInUserDictionary": {
                            "type": "boolean",
                            "description": "Skip if word is in user dictionary.",
                            "example": false
                          },
                          "skipIfWordStartsWithCapitalLetter": {
                            "type": "boolean",
                            "description": "Skip if word starts with capital letter.",
                            "example": false
                          },
                          "skipIfWordAppearsInSourceString": {
                            "type": "boolean",
                            "description": "Skip if word appears in source string.",
                            "example": false
                          },
                          "skipIfWordValidInSourceLocale": {
                            "type": "boolean",
                            "description": "Skip if word is valid in source locale.",
                            "example": false
                          },
                          "runSpellcheckForSubWords": {
                            "type": "boolean",
                            "description": "Run spellchek for sub words.",
                            "example": true
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "skipIfWordInUserDictionary",
                          "skipIfWordStartsWithCapitalLetter",
                          "skipIfWordAppearsInSourceString",
                          "skipIfWordValidInSourceLocale",
                          "runSpellcheckForSubWords"
                        ]
                      }
                    ]
                  },
                  {
                    "title": "SOURCE_IN_WRONG_LANGUAGE",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "minTextLengthLimit": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Minimal text length limit.",
                            "example": 10
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "minTextLengthLimit"
                        ]
                      }
                    ]
                  },
                  {
                    "title": "TARGET_IN_WRONG_LANGUAGE",
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "minTextLengthLimit"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "minTextLengthLimit": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Minimal text length limit.",
                            "example": 10
                          }
                        }
                      }
                    ]
                  },
                  {
                    "title": "NUMBER_CONSISTENCY",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "ignoreSign": {
                            "type": "boolean",
                            "description": "Ignore sign.",
                            "example": true
                          }
                        }
                      }
                    ]
                  },
                  {
                    "title": "TARGET_SOURCE_CONSISTENCY",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "ignoreTagsAndPlaceholders": {
                            "type": "boolean",
                            "description": "Ignore tags and placeholders.",
                            "example": true
                          },
                          "ignoreCase": {
                            "type": "boolean",
                            "description": "Ignore case.",
                            "example": false
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "ignoreTagsAndPlaceholders",
                          "ignoreCase"
                        ]
                      }
                    ]
                  },
                  {
                    "title": "GLOSSARY_COMPLIANCE",
                    "allOf": [
                      {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "matchMethod": {
                                "type": "string",
                                "enum": [
                                  "MATCH_BY_PERCENTAGE",
                                  "EXACT_MATCH",
                                  "LEXICAL_ANALYSIS"
                                ],
                                "description": "[Match method.](#operation/getGlossaryComplianceMatchMethods)",
                                "example": "MATCH_BY_PERCENTAGE"
                              },
                              "matchThreshold": {
                                "type": "integer",
                                "description": "Match threshold.",
                                "minimum": 0,
                                "maximum": 100,
                                "example": 10
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "sameTermCount": {
                                "type": "boolean",
                                "description": "If true the translation should have the glossary term the same number of times as in the source. If false the translation only requires the translation of the term at least once."
                              }
                            }
                          }
                        ]
                      },
                      {
                        "type": "object",
                        "required": [
                          "matchMethod",
                          "matchThreshold"
                        ]
                      }
                    ]
                  },
                  {
                    "title": "ORIGINAL_EQUALS_TARGET",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "mustHaveIdenticalTags": {
                            "type": "boolean",
                            "description": "Must have identical tags",
                            "example": false
                          },
                          "mustHaveIdenticalCapitalization": {
                            "type": "boolean",
                            "description": "Must have identical capitalization",
                            "example": true
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "mustHaveIdenticalTags",
                          "mustHaveIdenticalCapitalization"
                        ]
                      }
                    ]
                  },
                  {
                    "title": "SEGMENT_COMPLETENESS",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "lowerLengthThreshold": {
                            "type": "integer",
                            "description": "Lower length threshould",
                            "example": 10
                          },
                          "upperLengthThreshold": {
                            "type": "integer",
                            "description": "Upper length threshould",
                            "example": 20
                          },
                          "minLengthThreshold": {
                            "type": "integer",
                            "description": "Minimal lenght threshould",
                            "example": 15
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "targetLocaleId": {
                            "type": "string",
                            "description": "Smartling ID for the language you want to translate to.",
                            "example": "it-IT"
                          }
                        },
                        "required": [
                          "targetLocaleId"
                        ]
                      }
                    ]
                  },
                  {
                    "title": "OPEN_ISSUES",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "sourceIssuesMustBeResolved": {
                            "type": "boolean",
                            "description": "All source issues must be resolved",
                            "example": false
                          },
                          "translationIssuesMustBeResolved": {
                            "type": "boolean",
                            "description": "All translation issues must be resolved",
                            "example": true
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "sourceIssuesMustBeResolved",
                          "translationIssuesMustBeResolved"
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "anyOf": [
                                {
                                  "title": "EMOJI_CONSISTENCY",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "noEmojisAllowedInTarget": {
                                          "type": "boolean",
                                          "description": "No emoji is allowed in target",
                                          "example": false
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "title": "SPELLCHECK",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "skipIfWordInUserDictionary": {
                                          "type": "boolean",
                                          "description": "Skip if word is in user dictionary.",
                                          "example": false
                                        },
                                        "skipIfWordStartsWithCapitalLetter": {
                                          "type": "boolean",
                                          "description": "Skip if word starts with capital letter.",
                                          "example": false
                                        },
                                        "skipIfWordAppearsInSourceString": {
                                          "type": "boolean",
                                          "description": "Skip if word appears in source string.",
                                          "example": false
                                        },
                                        "skipIfWordValidInSourceLocale": {
                                          "type": "boolean",
                                          "description": "Skip if word is valid in source locale.",
                                          "example": false
                                        },
                                        "runSpellcheckForSubWords": {
                                          "type": "boolean",
                                          "description": "Run spellchek for sub words.",
                                          "example": true
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "title": "SOURCE_IN_WRONG_LANGUAGE",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "minTextLengthLimit": {
                                          "type": "integer",
                                          "minimum": 0,
                                          "description": "Minimal text length limit.",
                                          "example": 10
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "title": "TARGET_IN_WRONG_LANGUAGE",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "minTextLengthLimit": {
                                          "type": "integer",
                                          "minimum": 0,
                                          "description": "Minimal text length limit.",
                                          "example": 10
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "title": "NUMBER_CONSISTENCY",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "ignoreSign": {
                                          "type": "boolean",
                                          "description": "Ignore sign.",
                                          "example": true
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "title": "TARGET_SOURCE_CONSISTENCY",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "ignoreTagsAndPlaceholders": {
                                          "type": "boolean",
                                          "description": "Ignore tags and placeholders.",
                                          "example": true
                                        },
                                        "ignoreCase": {
                                          "type": "boolean",
                                          "description": "Ignore case.",
                                          "example": false
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "title": "GLOSSARY_COMPLIANCE",
                                  "allOf": [
                                    {
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "matchMethod": {
                                              "type": "string",
                                              "enum": [
                                                "MATCH_BY_PERCENTAGE",
                                                "EXACT_MATCH",
                                                "LEXICAL_ANALYSIS"
                                              ],
                                              "description": "[Match method.](#operation/getGlossaryComplianceMatchMethods)",
                                              "example": "MATCH_BY_PERCENTAGE"
                                            },
                                            "matchThreshold": {
                                              "type": "integer",
                                              "description": "Match threshold.",
                                              "minimum": 0,
                                              "maximum": 100,
                                              "example": 10
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "sameTermCount": {
                                              "type": "boolean",
                                              "description": "If true the translation should have the glossary term the same number of times as in the source. If false the translation only requires the translation of the term at least once."
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "title": "ORIGINAL_EQUALS_TARGET",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "mustHaveIdenticalTags": {
                                          "type": "boolean",
                                          "description": "Must have identical tags",
                                          "example": false
                                        },
                                        "mustHaveIdenticalCapitalization": {
                                          "type": "boolean",
                                          "description": "Must have identical capitalization",
                                          "example": true
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "title": "SEGMENT_COMPLETENESS",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "lowerLengthThreshold": {
                                          "type": "integer",
                                          "description": "Lower length threshould",
                                          "example": 10
                                        },
                                        "upperLengthThreshold": {
                                          "type": "integer",
                                          "description": "Upper length threshould",
                                          "example": 20
                                        },
                                        "minLengthThreshold": {
                                          "type": "integer",
                                          "description": "Minimal lenght threshould",
                                          "example": 15
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "title": "OPEN_ISSUES",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "sourceIssuesMustBeResolved": {
                                          "type": "boolean",
                                          "description": "All source issues must be resolved",
                                          "example": false
                                        },
                                        "translationIssuesMustBeResolved": {
                                          "type": "boolean",
                                          "description": "All translation issues must be resolved",
                                          "example": true
                                        }
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "EMOJI_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "noEmojisAllowedInTarget": true
                        }
                      }
                    }
                  },
                  "SPELLCHECK": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "skipIfWordInUserDictionary": false,
                          "skipIfWordStartsWithCapitalLetter": true,
                          "skipIfWordAppearsInSourceString": false,
                          "skipIfWordValidInSourceLocale": true,
                          "runSpellcheckForSubWords": true
                        }
                      }
                    }
                  },
                  "SOURCE_IN_WRONG_LANGUAGE": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "minTextLengthLimit": 10
                        }
                      }
                    }
                  },
                  "TARGET_IN_WRONG_LANGUAGE": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "minTextLengthLimit": 15
                        }
                      }
                    }
                  },
                  "NUMBER_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "ignoreSign": true
                        }
                      }
                    }
                  },
                  "TARGET_SOURCE_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "ignoreTagsAndPlaceholders": true,
                          "ignoreCase": true
                        }
                      }
                    }
                  },
                  "GLOSSARY_COMPLIANCE": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "matchMethod": "MATCH_BY_PERCENTAGE",
                          "matchThreshold": 10,
                          "sameTermCount": true
                        }
                      }
                    }
                  },
                  "ORIGINAL_EQUALS_TARGET": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "mustHaveIdenticalTags": false,
                          "mustHaveIdenticalCapitalization": false
                        }
                      }
                    }
                  },
                  "SEGMENT_COMPLETENESS": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "lowerLengthThreshold": 10,
                          "upperLengthThreshold": 20,
                          "minLengthThreshold": 15
                        }
                      }
                    }
                  },
                  "OPEN_ISSUES": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "sourceIssuesMustBeResolved": true,
                          "translationIssuesMustBeResolved": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -d \"$smartlingStringTQCJSON\" -H \"Content-Type: application/json\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/$smartlingCheckTypeCode/groups/$smartlingGroupUid/settings\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types/{checkTypeCode}/groups/{groupUid}/locales": {
      "put": {
        "description": "Add locale to a quality check group.",
        "summary": "Add locale to group",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "addLocaleToProfilesTranslationQualityCheckTypeGroup",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "checkTypeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "[check type code](#operation/getTranslationQualityCheckTypes)",
              "example": "LEADING_TRAILING_SPACES",
              "enum": [
                "LEADING_TRAILING_SPACES",
                "ORIGINAL_EQUALS_TARGET",
                "WHITESPACES",
                "SPELLCHECK",
                "TAG_CONSISTENCY",
                "TARGET_LENGTH_LIMIT",
                "NUMBER_CONSISTENCY",
                "REPEATED_WORD",
                "TARGET_IN_WRONG_LANGUAGE",
                "SOURCE_IN_WRONG_LANGUAGE",
                "SEGMENT_COMPLETENESS",
                "NON_TRANSLATABLE_TEXT",
                "EMOJI_CONSISTENCY",
                "INSERTABLE_CONSISTENCY",
                "TARGET_SOURCE_CONSISTENCY",
                "BLACKLISTED_TERMS",
                "GLOSSARY_COMPLIANCE",
                "TRADEMARK_CONSISTENCY",
                "GRAMMAR_CHECK",
                "GLOBAL_CAPITALISATION_CONSISTENCY",
                "PUNCTUATION_CONSISTENCY",
                "PLURALS_REPETITION",
                "REGEX_CHECK",
                "OPEN_ISSUES"
              ]
            },
            "description": "[check type code](#operation/getTranslationQualityCheckTypes)"
          },
          {
            "name": "groupUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique identifier of corresponding group."
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "targetLocaleId": {
                        "type": "string",
                        "description": "Smartling ID for the language you want to translate to.",
                        "example": "it-IT"
                      }
                    },
                    "required": [
                      "targetLocaleId"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "targetLocaleId": {
                                      "type": "string",
                                      "description": "Smartling ID for the language you want to translate to.",
                                      "example": "it-IT"
                                    }
                                  },
                                  "required": [
                                    "targetLocaleId"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTQCJSON\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/$smartlingCheckTypeCode/groups/$smartlingGroupUid/locales\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types/{checkTypeCode}/groups/{groupUid}/locales/{targetLocaleId}": {
      "delete": {
        "description": "Delete locale from a quality check group.",
        "summary": "Delete locale from group",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "deleteLocaleFromProfilesTranslationQualityCheckTypeGroup",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "checkTypeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "[check type code](#operation/getTranslationQualityCheckTypes)",
              "example": "LEADING_TRAILING_SPACES",
              "enum": [
                "LEADING_TRAILING_SPACES",
                "ORIGINAL_EQUALS_TARGET",
                "WHITESPACES",
                "SPELLCHECK",
                "TAG_CONSISTENCY",
                "TARGET_LENGTH_LIMIT",
                "NUMBER_CONSISTENCY",
                "REPEATED_WORD",
                "TARGET_IN_WRONG_LANGUAGE",
                "SOURCE_IN_WRONG_LANGUAGE",
                "SEGMENT_COMPLETENESS",
                "NON_TRANSLATABLE_TEXT",
                "EMOJI_CONSISTENCY",
                "INSERTABLE_CONSISTENCY",
                "TARGET_SOURCE_CONSISTENCY",
                "BLACKLISTED_TERMS",
                "GLOSSARY_COMPLIANCE",
                "TRADEMARK_CONSISTENCY",
                "GRAMMAR_CHECK",
                "GLOBAL_CAPITALISATION_CONSISTENCY",
                "PUNCTUATION_CONSISTENCY",
                "PLURALS_REPETITION",
                "REGEX_CHECK",
                "OPEN_ISSUES"
              ]
            },
            "description": "[check type code](#operation/getTranslationQualityCheckTypes)"
          },
          {
            "name": "groupUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique identifier of corresponding group."
          },
          {
            "name": "targetLocaleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Smartling ID for the language you want to translate to."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SUCCESS"
                      ],
                      "description": "Indicates whether the response was successful or what error has occurred."
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "code": "SUCCESS"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X DELETE -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/$smartlingCheckTypeCode/groups/$smartlingGroupUid/locales/$smartlingTargetLocaleId\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types/{checkTypeCode}/groups/{groupUid}/sub-types/{checkSubTypeCode}/severity-level": {
      "put": {
        "description": "Update the severity level for a quality check subtype and group.",
        "summary": "Update severity level for quality check subtype and group",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "updateSeverityLevelForProfilesGroupAndSubType",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountUid"
          },
          {
            "$ref": "#/components/parameters/profileUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/checkTypeCodeOnlyWithSubtypesPathParameter"
          },
          {
            "$ref": "#/components/parameters/groupUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/checkSubTypeCodePathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckTypeSeverityLevelPutRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckTypeSeverityLevelResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTQCJSON\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/$smartlingCheckTypeCode/groups/$smartlingGroupUid/sub-types/$smartlingCheckSubTypeCode/severity-level\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types/{checkTypeCode}/groups/{groupUid}/severity-level": {
      "put": {
        "description": "Update the severity level for a quality check group.",
        "summary": "Update severity level for group",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "updateProfilesCheckGroupSeverityLevel",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "checkTypeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "[check type code](#operation/getTranslationQualityCheckTypes)",
              "example": "LEADING_TRAILING_SPACES",
              "enum": [
                "LEADING_TRAILING_SPACES",
                "ORIGINAL_EQUALS_TARGET",
                "WHITESPACES",
                "SPELLCHECK",
                "TAG_CONSISTENCY",
                "TARGET_LENGTH_LIMIT",
                "NUMBER_CONSISTENCY",
                "REPEATED_WORD",
                "TARGET_IN_WRONG_LANGUAGE",
                "SOURCE_IN_WRONG_LANGUAGE",
                "SEGMENT_COMPLETENESS",
                "NON_TRANSLATABLE_TEXT",
                "EMOJI_CONSISTENCY",
                "INSERTABLE_CONSISTENCY",
                "TARGET_SOURCE_CONSISTENCY",
                "BLACKLISTED_TERMS",
                "GLOSSARY_COMPLIANCE",
                "TRADEMARK_CONSISTENCY",
                "GRAMMAR_CHECK",
                "GLOBAL_CAPITALISATION_CONSISTENCY",
                "PUNCTUATION_CONSISTENCY",
                "PLURALS_REPETITION",
                "REGEX_CHECK",
                "OPEN_ISSUES"
              ]
            },
            "description": "[check type code](#operation/getTranslationQualityCheckTypes)"
          },
          {
            "name": "groupUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique identifier of corresponding group."
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "severityLevelCode": {
                        "enum": [
                          "DISABLED",
                          "LOW",
                          "MEDIUM",
                          "HIGH"
                        ]
                      }
                    },
                    "required": [
                      "severityLevelCode"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "severityLevelCode": {
                                  "type": "string",
                                  "description": "severity level code",
                                  "example": "MEDIUM",
                                  "enum": [
                                    "DISABLED",
                                    "LOW",
                                    "MEDIUM",
                                    "HIGH"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -d \"$smartlingStringTQCJSON\" -H \"Content-Type: application/json\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/$smartlingCheckTypeCode/groups/$smartlingGroupUid/severity-level\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types/REGEX_CHECK/settings/rules": {
      "post": {
        "description": "Create a custom quality check.",
        "summary": "Create a custom quality check",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "createTQCRegexRule",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "ruleName": {
                        "type": "string",
                        "description": "Rule name",
                        "example": "ruleName"
                      },
                      "severityLevelCode": {
                        "enum": [
                          "DISABLED",
                          "LOW",
                          "MEDIUM",
                          "HIGH"
                        ]
                      },
                      "ruleTypeCode": {
                        "enum": [
                          "FORBIDDEN",
                          "MISSING",
                          "COUNT_MISMATCH"
                        ]
                      },
                      "flavorCode": {
                        "enum": [
                          "JAVA",
                          "DOT_NET"
                        ]
                      },
                      "originalPattern": {
                        "type": "string",
                        "description": "Regular expression to evaluate against the source string.",
                        "example": "@mail"
                      },
                      "translationPattern": {
                        "type": "string",
                        "description": "Regular expression to evaluate against the translation.",
                        "example": "@gmail"
                      },
                      "caseInsensitive": {
                        "type": "boolean",
                        "description": "Enable case insensitive search",
                        "example": true
                      },
                      "multiLine": {
                        "type": "boolean",
                        "description": "Enables multine search. If true then search will span newlines in a string. Users can use ^ and $ characters with special meaning for beginning of line and end of line match.",
                        "example": true
                      },
                      "description": {
                        "type": "string",
                        "description": "Human readable description of the role; shown in the the dashboard UI.",
                        "example": "rule description"
                      },
                      "warningMessage": {
                        "type": "string",
                        "description": "Human readable warning message appended to the standard message that is shown in the CAT tool when the check fails.",
                        "example": " test warning message"
                      }
                    },
                    "required": [
                      "ruleName",
                      "severityLevelCode",
                      "ruleTypeCode",
                      "flavorCode",
                      "originalPattern",
                      "translationPattern",
                      "caseInsensitive",
                      "multiLine"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "ruleUid": {
                                      "type": "string",
                                      "description": "Unique identifier of corresponding check rule",
                                      "example": "ce6d6b5dbc12"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "ruleName": {
                                      "type": "string",
                                      "description": "Rule name",
                                      "example": "ruleName"
                                    },
                                    "severityLevelCode": {
                                      "enum": [
                                        "DISABLED",
                                        "LOW",
                                        "MEDIUM",
                                        "HIGH"
                                      ]
                                    },
                                    "ruleTypeCode": {
                                      "enum": [
                                        "FORBIDDEN",
                                        "MISSING",
                                        "COUNT_MISMATCH"
                                      ]
                                    },
                                    "flavorCode": {
                                      "enum": [
                                        "JAVA",
                                        "DOT_NET"
                                      ]
                                    },
                                    "originalPattern": {
                                      "type": "string",
                                      "description": "Regular expression to evaluate against the source string.",
                                      "example": "@mail"
                                    },
                                    "translationPattern": {
                                      "type": "string",
                                      "description": "Regular expression to evaluate against the translation.",
                                      "example": "@gmail"
                                    },
                                    "caseInsensitive": {
                                      "type": "boolean",
                                      "description": "Enable case insensitive search",
                                      "example": true
                                    },
                                    "multiLine": {
                                      "type": "boolean",
                                      "description": "Enables multine search. If true then search will span newlines in a string. Users can use ^ and $ characters with special meaning for beginning of line and end of line match.",
                                      "example": true
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "Human readable description of the role; shown in the the dashboard UI.",
                                      "example": "rule description"
                                    },
                                    "warningMessage": {
                                      "type": "string",
                                      "description": "Human readable warning message appended to the standard message that is shown in the CAT tool when the check fails.",
                                      "example": " test warning message"
                                    }
                                  },
                                  "required": [
                                    "ruleName",
                                    "severityLevelCode",
                                    "ruleTypeCode",
                                    "flavorCode",
                                    "originalPattern",
                                    "translationPattern",
                                    "caseInsensitive",
                                    "multiLine"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "groups": {
                                      "type": "array",
                                      "items": {
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "groupUid": {
                                                "type": "string",
                                                "description": "Smartling rule group identifier of the translation",
                                                "example": "ce6d6b5dbc12"
                                              },
                                              "ruleUid": {
                                                "type": "string",
                                                "description": "Smartling rule identifier of the translation",
                                                "example": "ce6d6b5dbcs2"
                                              },
                                              "targetLocaleIds": {
                                                "description": "The list of target locales.",
                                                "example": [
                                                  "ru-RU"
                                                ],
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "severityLevelCode": {
                                                "type": "string",
                                                "description": "severity level code",
                                                "example": "MEDIUM",
                                                "enum": [
                                                  "DISABLED",
                                                  "LOW",
                                                  "MEDIUM",
                                                  "HIGH"
                                                ]
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTQCJSON\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/REGEX_CHECK/settings/rules\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types/REGEX_CHECK/settings/rules/{ruleUid}": {
      "get": {
        "description": "Get a custom quality check.",
        "summary": "Get a custom quality check",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "getTQCRegexRule",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "ruleUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding check rule."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "ruleUid": {
                                      "type": "string",
                                      "description": "Unique identifier of corresponding check rule",
                                      "example": "ce6d6b5dbc12"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "ruleName": {
                                      "type": "string",
                                      "description": "Rule name",
                                      "example": "ruleName"
                                    },
                                    "severityLevelCode": {
                                      "enum": [
                                        "DISABLED",
                                        "LOW",
                                        "MEDIUM",
                                        "HIGH"
                                      ]
                                    },
                                    "ruleTypeCode": {
                                      "enum": [
                                        "FORBIDDEN",
                                        "MISSING",
                                        "COUNT_MISMATCH"
                                      ]
                                    },
                                    "flavorCode": {
                                      "enum": [
                                        "JAVA",
                                        "DOT_NET"
                                      ]
                                    },
                                    "originalPattern": {
                                      "type": "string",
                                      "description": "Regular expression to evaluate against the source string.",
                                      "example": "@mail"
                                    },
                                    "translationPattern": {
                                      "type": "string",
                                      "description": "Regular expression to evaluate against the translation.",
                                      "example": "@gmail"
                                    },
                                    "caseInsensitive": {
                                      "type": "boolean",
                                      "description": "Enable case insensitive search",
                                      "example": true
                                    },
                                    "multiLine": {
                                      "type": "boolean",
                                      "description": "Enables multine search. If true then search will span newlines in a string. Users can use ^ and $ characters with special meaning for beginning of line and end of line match.",
                                      "example": true
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "Human readable description of the role; shown in the the dashboard UI.",
                                      "example": "rule description"
                                    },
                                    "warningMessage": {
                                      "type": "string",
                                      "description": "Human readable warning message appended to the standard message that is shown in the CAT tool when the check fails.",
                                      "example": " test warning message"
                                    }
                                  },
                                  "required": [
                                    "ruleName",
                                    "severityLevelCode",
                                    "ruleTypeCode",
                                    "flavorCode",
                                    "originalPattern",
                                    "translationPattern",
                                    "caseInsensitive",
                                    "multiLine"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "groups": {
                                      "type": "array",
                                      "items": {
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "groupUid": {
                                                "type": "string",
                                                "description": "Smartling rule group identifier of the translation",
                                                "example": "ce6d6b5dbc12"
                                              },
                                              "ruleUid": {
                                                "type": "string",
                                                "description": "Smartling rule identifier of the translation",
                                                "example": "ce6d6b5dbcs2"
                                              },
                                              "targetLocaleIds": {
                                                "description": "The list of target locales.",
                                                "example": [
                                                  "ru-RU"
                                                ],
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "severityLevelCode": {
                                                "type": "string",
                                                "description": "severity level code",
                                                "example": "MEDIUM",
                                                "enum": [
                                                  "DISABLED",
                                                  "LOW",
                                                  "MEDIUM",
                                                  "HIGH"
                                                ]
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/REGEX_CHECK/settings/rules/$smartlingCheckRuleUid\n"
          }
        ]
      },
      "put": {
        "description": "Update a custom quality check.",
        "summary": "Update a custom quality check",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "updateTQCRegexRule",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "ruleUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding check rule."
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "ruleName": {
                        "type": "string",
                        "description": "Rule name",
                        "example": "ruleName"
                      },
                      "severityLevelCode": {
                        "enum": [
                          "DISABLED",
                          "LOW",
                          "MEDIUM",
                          "HIGH"
                        ]
                      },
                      "ruleTypeCode": {
                        "enum": [
                          "FORBIDDEN",
                          "MISSING",
                          "COUNT_MISMATCH"
                        ]
                      },
                      "flavorCode": {
                        "enum": [
                          "JAVA",
                          "DOT_NET"
                        ]
                      },
                      "originalPattern": {
                        "type": "string",
                        "description": "Regular expression to evaluate against the source string.",
                        "example": "@mail"
                      },
                      "translationPattern": {
                        "type": "string",
                        "description": "Regular expression to evaluate against the translation.",
                        "example": "@gmail"
                      },
                      "caseInsensitive": {
                        "type": "boolean",
                        "description": "Enable case insensitive search",
                        "example": true
                      },
                      "multiLine": {
                        "type": "boolean",
                        "description": "Enables multine search. If true then search will span newlines in a string. Users can use ^ and $ characters with special meaning for beginning of line and end of line match.",
                        "example": true
                      },
                      "description": {
                        "type": "string",
                        "description": "Human readable description of the role; shown in the the dashboard UI.",
                        "example": "rule description"
                      },
                      "warningMessage": {
                        "type": "string",
                        "description": "Human readable warning message appended to the standard message that is shown in the CAT tool when the check fails.",
                        "example": " test warning message"
                      }
                    },
                    "required": [
                      "ruleName",
                      "severityLevelCode",
                      "ruleTypeCode",
                      "flavorCode",
                      "originalPattern",
                      "translationPattern",
                      "caseInsensitive",
                      "multiLine"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "ruleUid": {
                                      "type": "string",
                                      "description": "Unique identifier of corresponding check rule",
                                      "example": "ce6d6b5dbc12"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "ruleName": {
                                      "type": "string",
                                      "description": "Rule name",
                                      "example": "ruleName"
                                    },
                                    "severityLevelCode": {
                                      "enum": [
                                        "DISABLED",
                                        "LOW",
                                        "MEDIUM",
                                        "HIGH"
                                      ]
                                    },
                                    "ruleTypeCode": {
                                      "enum": [
                                        "FORBIDDEN",
                                        "MISSING",
                                        "COUNT_MISMATCH"
                                      ]
                                    },
                                    "flavorCode": {
                                      "enum": [
                                        "JAVA",
                                        "DOT_NET"
                                      ]
                                    },
                                    "originalPattern": {
                                      "type": "string",
                                      "description": "Regular expression to evaluate against the source string.",
                                      "example": "@mail"
                                    },
                                    "translationPattern": {
                                      "type": "string",
                                      "description": "Regular expression to evaluate against the translation.",
                                      "example": "@gmail"
                                    },
                                    "caseInsensitive": {
                                      "type": "boolean",
                                      "description": "Enable case insensitive search",
                                      "example": true
                                    },
                                    "multiLine": {
                                      "type": "boolean",
                                      "description": "Enables multine search. If true then search will span newlines in a string. Users can use ^ and $ characters with special meaning for beginning of line and end of line match.",
                                      "example": true
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "Human readable description of the role; shown in the the dashboard UI.",
                                      "example": "rule description"
                                    },
                                    "warningMessage": {
                                      "type": "string",
                                      "description": "Human readable warning message appended to the standard message that is shown in the CAT tool when the check fails.",
                                      "example": " test warning message"
                                    }
                                  },
                                  "required": [
                                    "ruleName",
                                    "severityLevelCode",
                                    "ruleTypeCode",
                                    "flavorCode",
                                    "originalPattern",
                                    "translationPattern",
                                    "caseInsensitive",
                                    "multiLine"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "groups": {
                                      "type": "array",
                                      "items": {
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "groupUid": {
                                                "type": "string",
                                                "description": "Smartling rule group identifier of the translation",
                                                "example": "ce6d6b5dbc12"
                                              },
                                              "ruleUid": {
                                                "type": "string",
                                                "description": "Smartling rule identifier of the translation",
                                                "example": "ce6d6b5dbcs2"
                                              },
                                              "targetLocaleIds": {
                                                "description": "The list of target locales.",
                                                "example": [
                                                  "ru-RU"
                                                ],
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "severityLevelCode": {
                                                "type": "string",
                                                "description": "severity level code",
                                                "example": "MEDIUM",
                                                "enum": [
                                                  "DISABLED",
                                                  "LOW",
                                                  "MEDIUM",
                                                  "HIGH"
                                                ]
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTQCJSON\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/REGEX_CHECK/settings/rules/$smartlingCheckRuleUid\n"
          }
        ]
      },
      "delete": {
        "description": "Delete a custom quality check.",
        "summary": "Delete a custom quality check",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "deleteTQCRegexRule",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "ruleUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding check rule."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SUCCESS"
                      ],
                      "description": "Indicates whether the response was successful or what error has occurred."
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "code": "SUCCESS"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X DELETE -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/REGEX_CHECK/settings/rules/$smartlingCheckRuleUid\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types/REGEX_CHECK/settings/rules/{ruleUid}/severity-level": {
      "put": {
        "description": "Update severity level for custom quality check.",
        "summary": "Update severity level for custom quality check",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "updateProfilesCheckRuleSeverityLevel",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "ruleUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding check rule."
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "severityLevelCode": {
                        "enum": [
                          "DISABLED",
                          "LOW",
                          "MEDIUM",
                          "HIGH"
                        ]
                      }
                    },
                    "required": [
                      "severityLevelCode"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "ruleUid": {
                                      "type": "string",
                                      "description": "Unique identifier of corresponding check rule",
                                      "example": "ce6d6b5dbc12"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "ruleName": {
                                      "type": "string",
                                      "description": "Rule name",
                                      "example": "ruleName"
                                    },
                                    "severityLevelCode": {
                                      "enum": [
                                        "DISABLED",
                                        "LOW",
                                        "MEDIUM",
                                        "HIGH"
                                      ]
                                    },
                                    "ruleTypeCode": {
                                      "enum": [
                                        "FORBIDDEN",
                                        "MISSING",
                                        "COUNT_MISMATCH"
                                      ]
                                    },
                                    "flavorCode": {
                                      "enum": [
                                        "JAVA",
                                        "DOT_NET"
                                      ]
                                    },
                                    "originalPattern": {
                                      "type": "string",
                                      "description": "Regular expression to evaluate against the source string.",
                                      "example": "@mail"
                                    },
                                    "translationPattern": {
                                      "type": "string",
                                      "description": "Regular expression to evaluate against the translation.",
                                      "example": "@gmail"
                                    },
                                    "caseInsensitive": {
                                      "type": "boolean",
                                      "description": "Enable case insensitive search",
                                      "example": true
                                    },
                                    "multiLine": {
                                      "type": "boolean",
                                      "description": "Enables multine search. If true then search will span newlines in a string. Users can use ^ and $ characters with special meaning for beginning of line and end of line match.",
                                      "example": true
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "Human readable description of the role; shown in the the dashboard UI.",
                                      "example": "rule description"
                                    },
                                    "warningMessage": {
                                      "type": "string",
                                      "description": "Human readable warning message appended to the standard message that is shown in the CAT tool when the check fails.",
                                      "example": " test warning message"
                                    }
                                  },
                                  "required": [
                                    "ruleName",
                                    "severityLevelCode",
                                    "ruleTypeCode",
                                    "flavorCode",
                                    "originalPattern",
                                    "translationPattern",
                                    "caseInsensitive",
                                    "multiLine"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "groups": {
                                      "type": "array",
                                      "items": {
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "properties": {
                                              "groupUid": {
                                                "type": "string",
                                                "description": "Smartling rule group identifier of the translation",
                                                "example": "ce6d6b5dbc12"
                                              },
                                              "ruleUid": {
                                                "type": "string",
                                                "description": "Smartling rule identifier of the translation",
                                                "example": "ce6d6b5dbcs2"
                                              },
                                              "targetLocaleIds": {
                                                "description": "The list of target locales.",
                                                "example": [
                                                  "ru-RU"
                                                ],
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "severityLevelCode": {
                                                "type": "string",
                                                "description": "severity level code",
                                                "example": "MEDIUM",
                                                "enum": [
                                                  "DISABLED",
                                                  "LOW",
                                                  "MEDIUM",
                                                  "HIGH"
                                                ]
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -d \"$smartlingStringTQCJSON\" -H \"Content-Type: application/json\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/REGEX_CHECK/settings/rules/$smartlingCheckRuleUid/severity-level\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types/REGEX_CHECK/settings/rules/{ruleUid}/groups": {
      "post": {
        "description": "Create a custom quality check group",
        "summary": "Create a custom quality check group",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "createTQCRegexRuleGroup",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "ruleUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding check rule."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "targetLocaleIds": {
                    "description": "List of target locale IDs.",
                    "example": [
                      "ru-RU"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "targetLocaleIds"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "groupUid": {
                                  "type": "string",
                                  "description": "Smartling rule group identifier of the translation",
                                  "example": "ce6d6b5dbc12"
                                },
                                "ruleUid": {
                                  "type": "string",
                                  "description": "Smartling rule identifier of the translation",
                                  "example": "ce6d6b5dbcs2"
                                },
                                "targetLocaleIds": {
                                  "description": "The list of target locales.",
                                  "example": [
                                    "ru-RU"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "severityLevelCode": {
                                  "type": "string",
                                  "description": "severity level code",
                                  "example": "MEDIUM",
                                  "enum": [
                                    "DISABLED",
                                    "LOW",
                                    "MEDIUM",
                                    "HIGH"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "x-code-samples": [
            {
              "lang": "curl",
              "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTQCJSON\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/REGEX_CHECK/settings/rules/$smartlingCheckRuleUid/groups\n"
            }
          ]
        }
      },
      "get": {
        "description": "Get a custom quality check groups.",
        "summary": "Get a custom quality check groups",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "getTQCRegexRuleGroups",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "ruleUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding check rule."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "totalCount": {
                                  "type": "integer",
                                  "description": "Total element count",
                                  "example": 1
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "groupUid": {
                                            "type": "string",
                                            "description": "Smartling rule group identifier of the translation",
                                            "example": "ce6d6b5dbc12"
                                          },
                                          "ruleUid": {
                                            "type": "string",
                                            "description": "Smartling rule identifier of the translation",
                                            "example": "ce6d6b5dbcs2"
                                          },
                                          "targetLocaleIds": {
                                            "description": "The list of target locales.",
                                            "example": [
                                              "ru-RU"
                                            ],
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "severityLevelCode": {
                                            "type": "string",
                                            "description": "severity level code",
                                            "example": "MEDIUM",
                                            "enum": [
                                              "DISABLED",
                                              "LOW",
                                              "MEDIUM",
                                              "HIGH"
                                            ]
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "x-code-samples": [
            {
              "lang": "curl",
              "source": "curl -X GET -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/REGEX_CHECK/settings/rules/$smartlingCheckRuleUid/groups\n"
            }
          ]
        }
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types/REGEX_CHECK/settings/rules/{ruleUid}/groups/{groupUid}": {
      "get": {
        "description": "Get a custom quality check group.",
        "summary": "Get a custom quality check group",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "getTQCRegexRuleGroup",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "ruleUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding check rule."
          },
          {
            "name": "groupUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique identifier of corresponding group."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "groupUid": {
                                  "type": "string",
                                  "description": "Smartling rule group identifier of the translation",
                                  "example": "ce6d6b5dbc12"
                                },
                                "ruleUid": {
                                  "type": "string",
                                  "description": "Smartling rule identifier of the translation",
                                  "example": "ce6d6b5dbcs2"
                                },
                                "targetLocaleIds": {
                                  "description": "The list of target locales.",
                                  "example": [
                                    "ru-RU"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "severityLevelCode": {
                                  "type": "string",
                                  "description": "severity level code",
                                  "example": "MEDIUM",
                                  "enum": [
                                    "DISABLED",
                                    "LOW",
                                    "MEDIUM",
                                    "HIGH"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "x-code-samples": [
            {
              "lang": "curl",
              "source": "curl -X GET -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/REGEX_CHECK/settings/rules/$smartlingCheckRuleUid/groups/$smartlingCheckRuleGroupUid\n"
            }
          ]
        }
      },
      "delete": {
        "description": "Delete a custom quality check group.",
        "summary": "Delete a custom quality check group",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "deleteTQCRegexRuleGroup",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "ruleUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding check rule."
          },
          {
            "name": "groupUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique identifier of corresponding group."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SUCCESS"
                      ],
                      "description": "Indicates whether the response was successful or what error has occurred."
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "code": "SUCCESS"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "x-code-samples": [
            {
              "lang": "curl",
              "source": "curl -X DELETE -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/REGEX_CHECK/settings/rules/$smartlingCheckRuleUid/groups/$smartlingCheckRuleGroupUid\n"
            }
          ]
        }
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types/REGEX_CHECK/settings/rules/{ruleUid}/groups/{groupUid}/locales": {
      "put": {
        "description": "Add locale to custom quality check group.",
        "summary": "Add locale custom quality check group",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "addLocaleToProfilesTranslationQualityCheckTypeRegexRuleGroup",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "ruleUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding check rule."
          },
          {
            "name": "groupUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique identifier of corresponding group."
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "targetLocaleId": {
                        "type": "string",
                        "description": "Smartling ID for the language you want to translate to.",
                        "example": "it-IT"
                      }
                    },
                    "required": [
                      "targetLocaleId"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "groupUid": {
                                  "type": "string",
                                  "description": "Smartling rule group identifier of the translation",
                                  "example": "ce6d6b5dbc12"
                                },
                                "ruleUid": {
                                  "type": "string",
                                  "description": "Smartling rule identifier of the translation",
                                  "example": "ce6d6b5dbcs2"
                                },
                                "targetLocaleIds": {
                                  "description": "The list of target locales.",
                                  "example": [
                                    "ru-RU"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "severityLevelCode": {
                                  "type": "string",
                                  "description": "severity level code",
                                  "example": "MEDIUM",
                                  "enum": [
                                    "DISABLED",
                                    "LOW",
                                    "MEDIUM",
                                    "HIGH"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTQCJSON\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/REGEX_CHECK/settings/rules/$smartlingCheckRuleUid/groups/$smartlingCheckRuleGroupUid/locales\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types/REGEX_CHECK/settings/rules/{ruleUid}/groups/{groupUid}/locales/{targetLocaleId}": {
      "delete": {
        "description": "Delete locale from custom quality check group.",
        "summary": "Delete locale from custom quality check group",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "deleteLocaleFromTranslationQualityCheckTypeRegexRuleGroup",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "ruleUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding check rule."
          },
          {
            "name": "groupUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique identifier of corresponding group."
          },
          {
            "name": "targetLocaleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Smartling ID for the language you want to translate to."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SUCCESS"
                      ],
                      "description": "Indicates whether the response was successful or what error has occurred."
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "code": "SUCCESS"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X DELETE -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/REGEX_CHECK/settings/rules/$smartlingCheckRuleUid/groups/$smartlingCheckRuleGroupUid/locales/{targetLocaleId}\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/profiles/{profileUid}/check-types/REGEX_CHECK/settings/rules/{ruleUid}/groups/{groupUid}/severity-level": {
      "put": {
        "description": "Update the severity level for custom quality check group.",
        "summary": "Update severity level for custom quality check group",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "updateProfilesCheckRuleGroupSeverityLevel",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "profileUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding profile."
          },
          {
            "name": "ruleUid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of corresponding check rule."
          },
          {
            "name": "groupUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique identifier of corresponding group."
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "severityLevelCode": {
                        "enum": [
                          "DISABLED",
                          "LOW",
                          "MEDIUM",
                          "HIGH"
                        ]
                      }
                    },
                    "required": [
                      "severityLevelCode"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "groupUid": {
                                  "type": "string",
                                  "description": "Smartling rule group identifier of the translation",
                                  "example": "ce6d6b5dbc12"
                                },
                                "ruleUid": {
                                  "type": "string",
                                  "description": "Smartling rule identifier of the translation",
                                  "example": "ce6d6b5dbcs2"
                                },
                                "targetLocaleIds": {
                                  "description": "The list of target locales.",
                                  "example": [
                                    "ru-RU"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "severityLevelCode": {
                                  "type": "string",
                                  "description": "severity level code",
                                  "example": "MEDIUM",
                                  "enum": [
                                    "DISABLED",
                                    "LOW",
                                    "MEDIUM",
                                    "HIGH"
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X PUT -H \"Authorization: Bearer $smartlingToken\" -d \"$smartlingStringTQCJSON\" -H \"Content-Type: application/json\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/profiles/$smartlingProfileUid/check-types/REGEX_CHECK/settings/rules/$smartlingCheckRuleUid/groups/$smartlingCheckRuleGroupUid/severity-level\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/projects/{projectId}/locales/{localeId}/check-types": {
      "get": {
        "description": "Get project check types settings.",
        "summary": "Get project check types settings",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "getProjectCheckTypesSettings",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "localeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "A valid Smartling Locale ID."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "totalCount": {
                                  "type": "integer",
                                  "description": "Total element count"
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "anyOf": [
                                      {
                                        "title": "BLACKLISTED_TERMS",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "BLACKLISTED_TERMS"
                                                ],
                                                "description": "check type code",
                                                "example": "BLACKLISTED_TERMS"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "EMOJI_CONSISTENCY",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "noEmojisAllowedInTarget": {
                                                "type": "boolean",
                                                "description": "No emoji is allowed in target",
                                                "example": false
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "EMOJI_CONSISTENCY"
                                                ],
                                                "description": "check type code",
                                                "example": "EMOJI_CONSISTENCY"
                                              },
                                              "subTypes": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkSubTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "EMOJI_ADDED",
                                                        "EMOJI_DELETED",
                                                        "EMOJI_PRESENT"
                                                      ],
                                                      "description": "check subtype code",
                                                      "example": "EMOJI_ADDED"
                                                    },
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH",
                                                        "DISABLED"
                                                      ],
                                                      "description": "severity level code",
                                                      "example": "LOW"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "GLOBAL_CAPITALISATION_CONSISTENCY",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "GLOBAL_CAPITALISATION_CONSISTENCY"
                                                ],
                                                "description": "check type code",
                                                "example": "GLOBAL_CAPITALISATION_CONSISTENCY"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "GLOSSARY_COMPLIANCE",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "matchMethod": {
                                                "type": "string",
                                                "enum": [
                                                  "MATCH_BY_PERCENTAGE",
                                                  "EXACT_MATCH",
                                                  "LEXICAL_ANALYSIS"
                                                ],
                                                "description": "[Match method.](#operation/getGlossaryComplianceMatchMethods)",
                                                "example": "MATCH_BY_PERCENTAGE"
                                              },
                                              "matchThreshold": {
                                                "type": "integer",
                                                "description": "Match threshold.",
                                                "minimum": 0,
                                                "maximum": 100,
                                                "example": 10
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "sameTermCount": {
                                                "type": "boolean",
                                                "description": "If true the translation should have the glossary term the same number of times as in the source. If false the translation only requires the translation of the term at least once."
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "GLOSSARY_COMPLIANCE"
                                                ],
                                                "description": "check type code",
                                                "example": "GLOSSARY_COMPLIANCE"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "GRAMMAR_CHECK",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "GRAMMAR_CHECK"
                                                ],
                                                "description": "check type code",
                                                "example": "GRAMMAR_CHECK"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "INSERTABLE_CONSISTENCY",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "INSERTABLE_CONSISTENCY"
                                                ],
                                                "description": "check type code",
                                                "example": "INSERTABLE_CONSISTENCY"
                                              },
                                              "subTypes": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkSubTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "INSERTABLE_ADDED",
                                                        "INSERTABLE_DELETED"
                                                      ],
                                                      "description": "check subtype code",
                                                      "example": "INSERTABLE_ADDED"
                                                    },
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH",
                                                        "DISABLED"
                                                      ],
                                                      "description": "severity level code",
                                                      "example": "LOW"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "LEADING_TRAILING_SPACES",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "required": [
                                              "checkTypeCode"
                                            ],
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "LEADING_TRAILING_SPACES"
                                                ],
                                                "description": "check type code",
                                                "example": "LEADING_TRAILING_SPACES"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "NON_TRANSLATABLE_TEXT",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "NON_TRANSLATABLE_TEXT"
                                                ],
                                                "description": "check type code",
                                                "example": "NON_TRANSLATABLE_TEXT"
                                              },
                                              "subTypes": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkSubTypeCode": {
                                                      "type": "string",
                                                      "nullable": true,
                                                      "enum": [
                                                        "PLACEABLE_ADDED",
                                                        "PLACEABLE_DELETED",
                                                        "SPACES_AROUND_PLACEABLE",
                                                        "PLACEABLE_FORMAT"
                                                      ],
                                                      "description": "check subtype code",
                                                      "example": "PLACEABLE_ADDED"
                                                    },
                                                    "severityLevelCode": {
                                                      "nullable": true,
                                                      "type": "string",
                                                      "enum": [
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH",
                                                        "DISABLED"
                                                      ],
                                                      "description": "severity level code",
                                                      "example": "LOW"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "NUMBER_CONSISTENCY",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "ignoreSign": {
                                                "type": "boolean",
                                                "description": "Ignore sign.",
                                                "example": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "NUMBER_CONSISTENCY"
                                                ],
                                                "description": "check type code",
                                                "example": "NUMBER_CONSISTENCY"
                                              },
                                              "subTypes": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkSubTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "NUMBER_ADDED",
                                                        "NUMBER_DELETED",
                                                        "NUMBER_INCORRECT_CONVERSION"
                                                      ],
                                                      "description": "check subtype code",
                                                      "example": "NUMBER_ADDED"
                                                    },
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH",
                                                        "DISABLED"
                                                      ],
                                                      "description": "severity level code",
                                                      "example": "LOW"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "ORIGINAL_EQUALS_TARGET",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "mustHaveIdenticalTags": {
                                                "type": "boolean",
                                                "description": "Must have identical tags",
                                                "example": false
                                              },
                                              "mustHaveIdenticalCapitalization": {
                                                "type": "boolean",
                                                "description": "Must have identical capitalization",
                                                "example": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "required": [
                                              "checkTypeCode"
                                            ],
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "ORIGINAL_EQUALS_TARGET"
                                                ],
                                                "description": "check type code",
                                                "example": "ORIGINAL_EQUALS_TARGET"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "REPEATED_WORD",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "REPEATED_WORD"
                                                ],
                                                "description": "check type code",
                                                "example": "REPEATED_WORD"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "SEGMENT_COMPLETENESS",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "lowerLengthThreshold": {
                                                "type": "integer",
                                                "description": "Lower length threshould",
                                                "example": 10
                                              },
                                              "upperLengthThreshold": {
                                                "type": "integer",
                                                "description": "Upper length threshould",
                                                "example": 20
                                              },
                                              "minLengthThreshold": {
                                                "type": "integer",
                                                "description": "Minimal lenght threshould",
                                                "example": 15
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "SEGMENT_COMPLETENESS"
                                                ],
                                                "description": "check type code",
                                                "example": "SEGMENT_COMPLETENESS"
                                              },
                                              "subTypes": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkSubTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET_IS_EMPTY",
                                                        "TARGET_IS_MUCH_SHORTER_THAN_SOURCE",
                                                        "TARGET_IS_MUCH_LONGER_THAN_SOURCE"
                                                      ],
                                                      "description": "check subtype code",
                                                      "example": "TARGET_IS_EMPTY"
                                                    },
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH",
                                                        "DISABLED"
                                                      ],
                                                      "description": "severity level code",
                                                      "example": "LOW"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "SOURCE_IN_WRONG_LANGUAGE",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "minTextLengthLimit": {
                                                "type": "integer",
                                                "minimum": 0,
                                                "description": "Minimal text length limit.",
                                                "example": 10
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "SOURCE_IN_WRONG_LANGUAGE"
                                                ],
                                                "description": "check type code",
                                                "example": "SOURCE_IN_WRONG_LANGUAGE"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "SPELLCHECK",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "skipIfWordInUserDictionary": {
                                                "type": "boolean",
                                                "description": "Skip if word is in user dictionary.",
                                                "example": false
                                              },
                                              "skipIfWordStartsWithCapitalLetter": {
                                                "type": "boolean",
                                                "description": "Skip if word starts with capital letter.",
                                                "example": false
                                              },
                                              "skipIfWordAppearsInSourceString": {
                                                "type": "boolean",
                                                "description": "Skip if word appears in source string.",
                                                "example": false
                                              },
                                              "skipIfWordValidInSourceLocale": {
                                                "type": "boolean",
                                                "description": "Skip if word is valid in source locale.",
                                                "example": false
                                              },
                                              "runSpellcheckForSubWords": {
                                                "type": "boolean",
                                                "description": "Run spellchek for sub words.",
                                                "example": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "SPELLCHECK"
                                                ],
                                                "description": "check type code",
                                                "example": "SPELLCHECK"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "TAG_CONSISTENCY",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "TAG_CONSISTENCY"
                                                ],
                                                "description": "check type code",
                                                "example": "TAG_CONSISTENCY"
                                              },
                                              "subTypes": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkSubTypeCode": {
                                                      "nullable": true,
                                                      "type": "string",
                                                      "enum": [
                                                        "TAG_ADDED",
                                                        "TAG_DELETED",
                                                        "SPACES_AROUND_TAGS",
                                                        "TAG_ORDER_IS_CHANGED"
                                                      ],
                                                      "description": "check subtype code",
                                                      "example": "TAG_ADDED"
                                                    },
                                                    "severityLevelCode": {
                                                      "nullable": true,
                                                      "type": "string",
                                                      "enum": [
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH",
                                                        "DISABLED"
                                                      ],
                                                      "description": "severity level code",
                                                      "example": "LOW"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "TARGET_IN_WRONG_LANGUAGE",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "minTextLengthLimit": {
                                                "type": "integer",
                                                "minimum": 0,
                                                "description": "Minimal text length limit.",
                                                "example": 10
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "TARGET_IN_WRONG_LANGUAGE"
                                                ],
                                                "description": "check type code",
                                                "example": "TARGET_IN_WRONG_LANGUAGE"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "TARGET_LENGTH_LIMIT",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "TARGET_LENGTH_LIMIT"
                                                ],
                                                "description": "check type code",
                                                "example": "TARGET_LENGTH_LIMIT"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "TARGET_SOURCE_CONSISTENCY",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "ignoreTagsAndPlaceholders": {
                                                "type": "boolean",
                                                "description": "Ignore tags and placeholders.",
                                                "example": true
                                              },
                                              "ignoreCase": {
                                                "type": "boolean",
                                                "description": "Ignore case.",
                                                "example": false
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "TARGET_SOURCE_CONSISTENCY"
                                                ],
                                                "description": "check type code",
                                                "example": "TARGET_SOURCE_CONSISTENCY"
                                              },
                                              "subTypes": {
                                                "type": "array",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkSubTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "SAME_SOURCE_DIFFERENT_TRANSLATIONS",
                                                        "SAME_TRANSLATION_DIFFERENT_SOURCES"
                                                      ],
                                                      "description": "check subtype code",
                                                      "example": "SAME_SOURCE_DIFFERENT_TRANSLATIONS"
                                                    },
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH",
                                                        "DISABLED"
                                                      ],
                                                      "description": "severity level code",
                                                      "example": "LOW"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "TRADEMARK_CONSISTENCY",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "TRADEMARK_CONSISTENCY"
                                                ],
                                                "description": "check type code",
                                                "example": "TRADEMARK_CONSISTENCY"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "WHITESPACES",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "WHITESPACES"
                                                ],
                                                "description": "check type code",
                                                "example": "WHITESPACES"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "PUNCTUATION_CONSISTENCY",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "PUNCTUATION_CONSISTENCY"
                                                ],
                                                "description": "check type code",
                                                "example": "PUNCTUATION_CONSISTENCY"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "PLURALS_REPETITION",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "PLURALS_REPETITION"
                                                ],
                                                "description": "check type code",
                                                "example": "PLURALS_REPETITION"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "REGEX_CHECK",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "REGEX_CHECK"
                                                ],
                                                "description": "check type code",
                                                "example": "REGEX_CHECK"
                                              },
                                              "rules": {
                                                "type": "array",
                                                "items": {
                                                  "allOf": [
                                                    {
                                                      "type": "object",
                                                      "properties": {
                                                        "ruleUid": {
                                                          "type": "string",
                                                          "description": "Unique identifier of corresponding check rule",
                                                          "example": "ce6d6b5dbc12"
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "type": "object",
                                                      "properties": {
                                                        "ruleName": {
                                                          "type": "string",
                                                          "description": "Rule name",
                                                          "example": "ruleName"
                                                        },
                                                        "severityLevelCode": {
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        },
                                                        "ruleTypeCode": {
                                                          "enum": [
                                                            "FORBIDDEN",
                                                            "MISSING",
                                                            "COUNT_MISMATCH"
                                                          ]
                                                        },
                                                        "flavorCode": {
                                                          "enum": [
                                                            "JAVA",
                                                            "DOT_NET"
                                                          ]
                                                        },
                                                        "originalPattern": {
                                                          "type": "string",
                                                          "description": "Regular expression to evaluate against the source string.",
                                                          "example": "@mail"
                                                        },
                                                        "translationPattern": {
                                                          "type": "string",
                                                          "description": "Regular expression to evaluate against the translation.",
                                                          "example": "@gmail"
                                                        },
                                                        "caseInsensitive": {
                                                          "type": "boolean",
                                                          "description": "Enable case insensitive search",
                                                          "example": true
                                                        },
                                                        "multiLine": {
                                                          "type": "boolean",
                                                          "description": "Enables multine search. If true then search will span newlines in a string. Users can use ^ and $ characters with special meaning for beginning of line and end of line match.",
                                                          "example": true
                                                        },
                                                        "description": {
                                                          "type": "string",
                                                          "description": "Human readable description of the role; shown in the the dashboard UI.",
                                                          "example": "rule description"
                                                        },
                                                        "warningMessage": {
                                                          "type": "string",
                                                          "description": "Human readable warning message appended to the standard message that is shown in the CAT tool when the check fails.",
                                                          "example": " test warning message"
                                                        }
                                                      },
                                                      "required": [
                                                        "ruleName",
                                                        "severityLevelCode",
                                                        "ruleTypeCode",
                                                        "flavorCode",
                                                        "originalPattern",
                                                        "translationPattern",
                                                        "caseInsensitive",
                                                        "multiLine"
                                                      ]
                                                    },
                                                    {
                                                      "type": "object",
                                                      "properties": {
                                                        "groups": {
                                                          "type": "array",
                                                          "items": {
                                                            "allOf": [
                                                              {
                                                                "type": "object",
                                                                "properties": {
                                                                  "groupUid": {
                                                                    "type": "string",
                                                                    "description": "Smartling rule group identifier of the translation",
                                                                    "example": "ce6d6b5dbc12"
                                                                  },
                                                                  "ruleUid": {
                                                                    "type": "string",
                                                                    "description": "Smartling rule identifier of the translation",
                                                                    "example": "ce6d6b5dbcs2"
                                                                  },
                                                                  "targetLocaleIds": {
                                                                    "description": "The list of target locales.",
                                                                    "example": [
                                                                      "ru-RU"
                                                                    ],
                                                                    "items": {
                                                                      "type": "string"
                                                                    },
                                                                    "type": "array"
                                                                  },
                                                                  "severityLevelCode": {
                                                                    "type": "string",
                                                                    "description": "severity level code",
                                                                    "example": "MEDIUM",
                                                                    "enum": [
                                                                      "DISABLED",
                                                                      "LOW",
                                                                      "MEDIUM",
                                                                      "HIGH"
                                                                    ]
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "title": "OPEN_ISSUES",
                                        "allOf": [
                                          {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "severityLevelCode": {
                                                    "type": "string",
                                                    "description": "severity level code",
                                                    "example": "MEDIUM",
                                                    "enum": [
                                                      "DISABLED",
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH"
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "subTypes": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "checkSubTypeCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "check subtype code",
                                                          "example": ""
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "localeSeverityLevels": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "targetLocaleId": {
                                                          "type": "string",
                                                          "description": "Smartling locale identifier of the translation",
                                                          "example": "it-IT"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "description": "severity level code",
                                                          "example": "MEDIUM",
                                                          "enum": [
                                                            "DISABLED",
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH"
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "groups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "groupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of group",
                                                          "example": "12dsd344ds"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "sourceIssuesMustBeResolved": {
                                                "type": "boolean",
                                                "description": "All source issues must be resolved",
                                                "example": false
                                              },
                                              "translationIssuesMustBeResolved": {
                                                "type": "boolean",
                                                "description": "All translation issues must be resolved",
                                                "example": true
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "required": [
                                              "checkTypeCode"
                                            ],
                                            "properties": {
                                              "checkTypeCode": {
                                                "type": "string",
                                                "enum": [
                                                  "OPEN_ISSUES"
                                                ],
                                                "description": "check type code",
                                                "example": "OPEN_ISSUES"
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "example": {
                  "response": {
                    "code": "SUCCESS",
                    "data": {
                      "totalCount": 24,
                      "items": [
                        {
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "LEADING_TRAILING_SPACES",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "ORIGINAL_EQUALS_TARGET",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "mustHaveIdenticalTags": true,
                          "mustHaveIdenticalCapitalization": true
                        },
                        {
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "WHITESPACES",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "SPELLCHECK",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "skipIfWordInUserDictionary": true,
                          "skipIfWordStartsWithCapitalLetter": false,
                          "skipIfWordAppearsInSourceString": true,
                          "skipIfWordValidInSourceLocale": false,
                          "runSpellcheckForSubWords": false
                        },
                        {
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "TAG_CONSISTENCY",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "TAG_ADDED",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "TAG_DELETED",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "TAG_ORDER_IS_CHANGED",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "SPACES_AROUND_TAGS",
                              "severityLevelCode": "LOW"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "severityLevelCode": "HIGH",
                          "checkTypeCode": "TARGET_LENGTH_LIMIT",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "NUMBER_CONSISTENCY",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "NUMBER_DELETED",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "NUMBER_ADDED",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "NUMBER_INCORRECT_CONVERSION",
                              "severityLevelCode": "LOW"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": [
                            {
                              "groupUid": "b0dd258b05ee"
                            },
                            {
                              "groupUid": "a853df2cf8ac"
                            }
                          ],
                          "ignoreSign": true
                        },
                        {
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "REPEATED_WORD",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "TARGET_IN_WRONG_LANGUAGE",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "minTextLengthLimit": 40
                        },
                        {
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "SOURCE_IN_WRONG_LANGUAGE",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "minTextLengthLimit": 40
                        },
                        {
                          "severityLevelCode": "MEDIUM",
                          "checkTypeCode": "SEGMENT_COMPLETENESS",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "TARGET_IS_MUCH_SHORTER_THAN_SOURCE",
                              "severityLevelCode": "MEDIUM"
                            },
                            {
                              "checkSubTypeCode": "TARGET_IS_MUCH_LONGER_THAN_SOURCE",
                              "severityLevelCode": "MEDIUM"
                            },
                            {
                              "checkSubTypeCode": "TARGET_IS_EMPTY",
                              "severityLevelCode": "DISABLED"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "lowerLengthThreshold": 50,
                          "upperLengthThreshold": 250,
                          "minLengthThreshold": 10
                        },
                        {
                          "severityLevelCode": "MEDIUM",
                          "checkTypeCode": "NON_TRANSLATABLE_TEXT",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "PLACEABLE_DELETED",
                              "severityLevelCode": "MEDIUM"
                            },
                            {
                              "checkSubTypeCode": "SPACES_AROUND_PLACEABLE",
                              "severityLevelCode": "MEDIUM"
                            },
                            {
                              "checkSubTypeCode": "PLACEABLE_ADDED",
                              "severityLevelCode": "MEDIUM"
                            },
                            {
                              "checkSubTypeCode": "PLACEABLE_FORMAT",
                              "severityLevelCode": "MEDIUM"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "EMOJI_CONSISTENCY",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "EMOJI_PRESENT",
                              "severityLevelCode": "DISABLED"
                            },
                            {
                              "checkSubTypeCode": "EMOJI_DELETED",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "EMOJI_ADDED",
                              "severityLevelCode": "LOW"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "noEmojisAllowedInTarget": false
                        },
                        {
                          "response": {
                            "code": "SUCCESS",
                            "data": {
                              "severityLevelCode": "LOW",
                              "checkTypeCode": "INSERTABLE_CONSISTENCY",
                              "subTypes": [
                                {
                                  "checkSubTypeCode": "INSERTABLE_DELETED",
                                  "severityLevelCode": "LOW"
                                },
                                {
                                  "checkSubTypeCode": "INSERTABLE_ADDED",
                                  "severityLevelCode": "LOW"
                                }
                              ],
                              "localeSeverityLevels": [],
                              "groups": []
                            }
                          }
                        },
                        {
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "TARGET_SOURCE_CONSISTENCY",
                          "subTypes": [
                            {
                              "checkSubTypeCode": "SAME_TRANSLATION_DIFFERENT_SOURCES",
                              "severityLevelCode": "LOW"
                            },
                            {
                              "checkSubTypeCode": "SAME_SOURCE_DIFFERENT_TRANSLATIONS",
                              "severityLevelCode": "LOW"
                            }
                          ],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "ignoreTagsAndPlaceholders": true,
                          "ignoreCase": true
                        },
                        {
                          "severityLevelCode": "MEDIUM",
                          "checkTypeCode": "BLACKLISTED_TERMS",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "severityLevelCode": "MEDIUM",
                          "checkTypeCode": "GLOSSARY_COMPLIANCE",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "matchMethod": "MATCH_BY_PERCENTAGE",
                          "matchThreshold": 50,
                          "sameTermCount": true
                        },
                        {
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "TRADEMARK_CONSISTENCY",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "GRAMMAR_CHECK",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "GLOBAL_CAPITALISATION_CONSISTENCY",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "PUNCTUATION_CONSISTENCY",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "severityLevelCode": "MEDIUM",
                          "checkTypeCode": "PLURALS_REPETITION",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": []
                        },
                        {
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "REGEX_CHECK",
                          "subTypes": [],
                          "groups": [],
                          "rules": [
                            {
                              "ruleUid": "2d83ea74c848",
                              "severityLevelCode": "LOW",
                              "ruleName": "ruleName1",
                              "ruleTypeCode": "FORBIDDEN",
                              "flavorCode": "JAVA",
                              "originalPattern": "@mail",
                              "translationPattern": "@gmail",
                              "description": "ruleName1 description",
                              "caseInsensitive": true,
                              "multiLine": false,
                              "warningMessage": "test warning",
                              "groups": []
                            }
                          ]
                        },
                        {
                          "severityLevelCode": "LOW",
                          "checkTypeCode": "OPEN_ISSUES",
                          "subTypes": [],
                          "localeSeverityLevels": [],
                          "groups": [],
                          "sourceIssuesMustBeResolved": true,
                          "translationIssuesMustBeResolved": true
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -H \"Authorization: Bearer $smartlingToken\" https://api.smartling.com/translation-quality-api/v2/projects/$smartlingProjectId/locales/$smartlingLocaleId/check-types/\n"
          }
        ]
      }
    },
    "/translation-quality-api/v2/accounts/{accountUid}/projects/{projectId}/check": {
      "post": {
        "description": "Check string translation quality.",
        "summary": "Check string translation quality",
        "tags": [
          "Translation quality checks"
        ],
        "operationId": "runStringTranslationQualityCheck",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API."
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "targetLocaleId": {
                        "type": "string",
                        "description": "Smartling ID for the language you want to translate to.",
                        "example": "it-IT"
                      }
                    },
                    "required": [
                      "targetLocaleId"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "sourceLocaleId": {
                        "type": "string",
                        "description": "The locale identifier for the source locale of the project. This indicates the base locale for which content should be uploaded to the project.",
                        "example": "en-US"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "skipSuggestions": {
                        "type": "boolean",
                        "description": "skip suggestions",
                        "example": false
                      },
                      "strings": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "hashcode": {
                                  "type": "string",
                                  "description": "string hashcode",
                                  "example": "7191152182c69d9b72069ac1290fe24b"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "stringUid": {
                                  "nullable": true,
                                  "type": "string",
                                  "description": "it is string part unique identifier if string is splitted on several parts",
                                  "example": ""
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "originalString": {
                                  "type": "string",
                                  "description": "original string",
                                  "example": "blacklist_term"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "translation": {
                                  "type": "string",
                                  "description": "translation of the original string",
                                  "example": "blacklist_term"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "pluralFormGroupUid": {
                                  "type": "string",
                                  "nullable": true,
                                  "description": "unique identifier of plural form",
                                  "example": "7191152182c69d9b72069ac1290fe24b"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "pluralForm": {
                                  "nullable": true,
                                  "type": "string",
                                  "description": "plural form",
                                  "example": "ONE"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "useDefaultSettings": {
                        "type": "boolean",
                        "description": "use default settings",
                        "example": false
                      },
                      "checkTypeCodes": {
                        "minItems": 1,
                        "maxItems": 100,
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "[check type code](#operation/getTranslationQualityCheckTypes)",
                          "example": "LEADING_TRAILING_SPACES",
                          "enum": [
                            "LEADING_TRAILING_SPACES",
                            "ORIGINAL_EQUALS_TARGET",
                            "WHITESPACES",
                            "SPELLCHECK",
                            "TAG_CONSISTENCY",
                            "TARGET_LENGTH_LIMIT",
                            "NUMBER_CONSISTENCY",
                            "REPEATED_WORD",
                            "TARGET_IN_WRONG_LANGUAGE",
                            "SOURCE_IN_WRONG_LANGUAGE",
                            "SEGMENT_COMPLETENESS",
                            "NON_TRANSLATABLE_TEXT",
                            "EMOJI_CONSISTENCY",
                            "INSERTABLE_CONSISTENCY",
                            "TARGET_SOURCE_CONSISTENCY",
                            "BLACKLISTED_TERMS",
                            "GLOSSARY_COMPLIANCE",
                            "TRADEMARK_CONSISTENCY",
                            "GRAMMAR_CHECK",
                            "GLOBAL_CAPITALISATION_CONSISTENCY",
                            "PUNCTUATION_CONSISTENCY",
                            "PLURALS_REPETITION",
                            "REGEX_CHECK",
                            "OPEN_ISSUES"
                          ]
                        },
                        "description": "[check type codes](#operation/getTranslationQualityCheckTypes)"
                      }
                    }
                  }
                ]
              },
              "example": {
                "targetLocaleId": "en-US",
                "sourceLocaleId": "fr-FR",
                "skipSuggestions": false,
                "strings": [
                  {
                    "originalString": "Bonjour ©",
                    "translation": "Hello",
                    "hashcode": "9091152182c69d9b72069ac1290fe2345",
                    "stringUid": null,
                    "pluralFormGroupUid": null,
                    "pluralForm": null
                  },
                  {
                    "originalString": "Bonjour 100",
                    "translation": "Hello    100",
                    "hashcode": "1091152182c69d9b72069ac1290fe23999",
                    "stringUid": null,
                    "pluralFormGroupUid": null,
                    "pluralForm": null
                  }
                ],
                "useDefaultSettings": false,
                "checkTypeCodes": [
                  "BLACKLISTED_TERMS",
                  "EMOJI_CONSISTENCY"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "code"
                          ],
                          "properties": {
                            "code": {
                              "type": "string",
                              "enum": [
                                "SUCCESS"
                              ],
                              "description": "Indicates whether the response was successful or what error has occurred."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "results": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "string": {
                                        "type": "object",
                                        "properties": {
                                          "stringUid": {
                                            "type": "string",
                                            "nullable": true,
                                            "description": "it is string part unique identifier if string is splitted on several parts",
                                            "example": ""
                                          },
                                          "originalString": {
                                            "type": "string",
                                            "description": "original string",
                                            "example": "blacklist_term"
                                          },
                                          "translation": {
                                            "type": "string",
                                            "description": "translation of the original string",
                                            "example": "blacklist_term"
                                          },
                                          "hashcode": {
                                            "type": "string",
                                            "description": "string hashcode",
                                            "example": "7191152182c69d9b72069ac1290fe24b"
                                          },
                                          "pluralFormGroupUid": {
                                            "type": "string",
                                            "nullable": true,
                                            "description": "unique identifier of plural form",
                                            "example": "7191152182c69d9b72069ac1290fe24b"
                                          },
                                          "pluralForm": {
                                            "type": "string",
                                            "nullable": true,
                                            "description": "plural form",
                                            "example": "FEW"
                                          }
                                        }
                                      },
                                      "mistakes": {
                                        "type": "array",
                                        "items": {
                                          "oneOf": [
                                            {
                                              "title": "BLACKLISTED_TERMS",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "BLACKLISTED_TERMS"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "BLACKLISTED_TERMS"
                                                    },
                                                    "details": {
                                                      "type": "object",
                                                      "properties": {
                                                        "blacklistedTermUid": {
                                                          "type": "string",
                                                          "description": "black listed term unique identifier",
                                                          "example": "uidgj1"
                                                        },
                                                        "termText": {
                                                          "type": "string",
                                                          "description": "term text",
                                                          "example": "blacklist_term"
                                                        },
                                                        "alternatives": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string",
                                                            "example": "alternative 1"
                                                          }
                                                        },
                                                        "notes": {
                                                          "type": "string",
                                                          "description": "notes",
                                                          "example": ""
                                                        }
                                                      }
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "TARGET"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "EMOJI_CONSISTENCY",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "EMOJI_CONSISTENCY"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "EMOJI_CONSISTENCY"
                                                    },
                                                    "details": {
                                                      "nullable": true,
                                                      "type": "object",
                                                      "properties": {
                                                        "emoji": {
                                                          "type": "string",
                                                          "description": "emoji symbol",
                                                          "example": "😀"
                                                        },
                                                        "type": {
                                                          "type": "string",
                                                          "enum": [
                                                            "EMOJI_ADDED",
                                                            "EMOJI_DELETED",
                                                            "EMOJI_PRESENT"
                                                          ],
                                                          "description": "emoji defect type",
                                                          "example": "EMOJI_DELETED"
                                                        },
                                                        "severityLevelCode": {
                                                          "type": "string",
                                                          "enum": [
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH",
                                                            "DISABLED"
                                                          ],
                                                          "description": "severity level code",
                                                          "example": "LOW"
                                                        }
                                                      }
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "SOURCE",
                                                        "TARGET"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "SOURCE"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "GLOBAL_CAPITALISATION_CONSISTENCY",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "GLOBAL_CAPITALISATION_CONSISTENCY"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "GLOBAL_CAPITALISATION_CONSISTENCY"
                                                    },
                                                    "details": {
                                                      "nullable": true,
                                                      "type": "object"
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "TARGET"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "GLOSSARY_COMPLIANCE",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "GLOSSARY_COMPLIANCE"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "GLOSSARY_COMPLIANCE"
                                                    },
                                                    "details": {
                                                      "type": "object",
                                                      "nullable": true,
                                                      "properties": {
                                                        "glossaryTerm": {
                                                          "type": "object",
                                                          "properties": {
                                                            "termUid": {
                                                              "type": "string",
                                                              "description": "term uid",
                                                              "example": "cdd443b9-814f-442c-9ba6-4d97e0afce74"
                                                            },
                                                            "translation": {
                                                              "type": "object",
                                                              "properties": {
                                                                "localeId": {
                                                                  "type": "string",
                                                                  "description": "locale identifier",
                                                                  "example": "ru-RU"
                                                                },
                                                                "translatedTerm": {
                                                                  "type": "string",
                                                                  "description": "translated term",
                                                                  "example": "изменить размер"
                                                                },
                                                                "notes": {
                                                                  "type": "string",
                                                                  "description": "notes",
                                                                  "example": ""
                                                                },
                                                                "translatorUserUid": {
                                                                  "type": "string",
                                                                  "description": "translator user identifier",
                                                                  "example": "23ddd32e",
                                                                  "nullable": true
                                                                },
                                                                "lockTranslation": {
                                                                  "type": "boolean",
                                                                  "description": "lock translation",
                                                                  "example": false
                                                                },
                                                                "submittedForTranslation": {
                                                                  "type": "boolean",
                                                                  "description": "submitted for translation",
                                                                  "example": false
                                                                },
                                                                "createdDate": {
                                                                  "type": "string",
                                                                  "description": "created date",
                                                                  "example": "2018-11-16T16:06:53Z"
                                                                },
                                                                "modifiedDate": {
                                                                  "type": "string",
                                                                  "description": "modified date",
                                                                  "example": "2018-11-17T16:06:53Z"
                                                                }
                                                              }
                                                            },
                                                            "termText": {
                                                              "type": "string",
                                                              "description": "term text",
                                                              "example": "resize"
                                                            },
                                                            "caseSensitive": {
                                                              "type": "boolean",
                                                              "description": "case sensitive",
                                                              "example": false
                                                            },
                                                            "exactMatch": {
                                                              "type": "boolean",
                                                              "description": "exact match",
                                                              "example": false
                                                            },
                                                            "definition": {
                                                              "type": "string",
                                                              "description": "definition",
                                                              "example": ""
                                                            },
                                                            "variations": {
                                                              "type": "string",
                                                              "description": "variations",
                                                              "example": ""
                                                            },
                                                            "synonyms": {
                                                              "type": "string",
                                                              "description": "synonyms",
                                                              "example": ""
                                                            },
                                                            "antonyms": {
                                                              "type": "string",
                                                              "description": "antonyms",
                                                              "example": ""
                                                            },
                                                            "seo": {
                                                              "type": "boolean",
                                                              "description": "seo",
                                                              "example": false
                                                            },
                                                            "doNotTranslate": {
                                                              "type": "boolean",
                                                              "description": "do not translate",
                                                              "example": false
                                                            },
                                                            "notes": {
                                                              "type": "string",
                                                              "description": "notes",
                                                              "example": ""
                                                            },
                                                            "partOfSpeechCode": {
                                                              "type": "string",
                                                              "description": "part of speech code",
                                                              "example": "UNSPECIFIED"
                                                            },
                                                            "createdByUserUid": {
                                                              "type": "string",
                                                              "description": "created by user identifier",
                                                              "example": "xas344dsd3"
                                                            },
                                                            "createdDate": {
                                                              "type": "string",
                                                              "description": "created date",
                                                              "example": "2018-11-16T16:06:53Z"
                                                            },
                                                            "modifiedDate": {
                                                              "type": "string",
                                                              "description": "modified date",
                                                              "example": "2018-11-17T16:06:53Z"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET",
                                                        "SOURCE"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "SOURCE"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "GRAMMAR_CHECK",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "GRAMMAR_CHECK"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "GRAMMAR_CHECK"
                                                    },
                                                    "details": {
                                                      "nullable": true,
                                                      "type": "object",
                                                      "properties": {
                                                        "text": {
                                                          "type": "string",
                                                          "description": "text",
                                                          "example": "play"
                                                        },
                                                        "message": {
                                                          "type": "string",
                                                          "description": "message",
                                                          "example": "Possible agreement error -- use past participle here: <suggestion>played</suggestion>."
                                                        },
                                                        "description": {
                                                          "type": "string",
                                                          "description": "description",
                                                          "example": "Had + verb present tense"
                                                        },
                                                        "mistakeTypeCode": {
                                                          "type": "string",
                                                          "description": "mistake type code",
                                                          "example": "Grammar"
                                                        },
                                                        "suggestions": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string",
                                                            "example": "played"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "TARGET"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "INSERTABLE_CONSISTENCY",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "INSERTABLE_CONSISTENCY"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "INSERTABLE_CONSISTENCY"
                                                    },
                                                    "details": {
                                                      "type": "object",
                                                      "nullable": true,
                                                      "properties": {
                                                        "insertable": {
                                                          "type": "string",
                                                          "description": "insertable",
                                                          "example": "<br>"
                                                        },
                                                        "insertableType": {
                                                          "type": "string",
                                                          "description": "insertable type",
                                                          "example": "BR_TAG"
                                                        },
                                                        "type": {
                                                          "type": "string",
                                                          "enum": [
                                                            "INSERTABLE_ADDED",
                                                            "INSERTABLE_DELETED"
                                                          ],
                                                          "description": "insertable",
                                                          "example": "INSERTABLE_DELETED"
                                                        }
                                                      }
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET",
                                                        "SOURCE"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "SOURCE"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "LEADING_TRAILING_SPACES",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LEADING_TRAILING_SPACES"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "LEADING_TRAILING_SPACES"
                                                    },
                                                    "details": {
                                                      "type": "object",
                                                      "nullable": true
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "TARGET"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "NON_TRANSLATABLE_TEXT",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "NON_TRANSLATABLE_TEXT"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "NON_TRANSLATABLE_TEXT"
                                                    },
                                                    "details": {
                                                      "type": "object",
                                                      "nullable": true,
                                                      "properties": {
                                                        "placeable": {
                                                          "type": "string",
                                                          "description": "placeable",
                                                          "example": "{0}"
                                                        },
                                                        "type": {
                                                          "type": "string",
                                                          "enum": [
                                                            "PLACEABLE_ADDED",
                                                            "PLACEABLE_DELETED",
                                                            "SPACES_AROUND_PLACEABLE",
                                                            "PLACEABLE_FORMAT"
                                                          ],
                                                          "description": "type",
                                                          "example": "PLACEABLE_DELETED"
                                                        }
                                                      }
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET",
                                                        "SOURCE"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "SOURCE"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "NUMBER_CONSISTENCY",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "NUMBER_CONSISTENCY"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "NUMBER_CONSISTENCY"
                                                    },
                                                    "details": {
                                                      "type": "object",
                                                      "nullable": true,
                                                      "oneOf": [
                                                        {
                                                          "type": "object",
                                                          "title": "NUMBER_ADDED",
                                                          "properties": {
                                                            "type": {
                                                              "type": "string",
                                                              "enum": [
                                                                "NUMBER_ADDED"
                                                              ],
                                                              "example": "NUMBER_ADDED"
                                                            },
                                                            "number": {
                                                              "type": "string",
                                                              "description": "number",
                                                              "example": "1000"
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "object",
                                                          "title": "NUMBER_DELETED",
                                                          "properties": {
                                                            "type": {
                                                              "type": "string",
                                                              "enum": [
                                                                "NUMBER_DELETED"
                                                              ],
                                                              "example": "NUMBER_DELETED"
                                                            },
                                                            "number": {
                                                              "type": "string",
                                                              "description": "number",
                                                              "example": "1000"
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "object",
                                                          "title": "NUMBER_INCORRECT_CONVERSION",
                                                          "properties": {
                                                            "type": {
                                                              "type": "string",
                                                              "enum": [
                                                                "NUMBER_INCORRECT_CONVERSION"
                                                              ],
                                                              "example": "NUMBER_INCORRECT_CONVERSION"
                                                            },
                                                            "number": {
                                                              "type": "string",
                                                              "description": "number",
                                                              "example": "1000,1"
                                                            },
                                                            "expectedFormat": {
                                                              "type": "string",
                                                              "description": "number expected format",
                                                              "example": "1,000.10"
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET",
                                                        "SOURCE"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "SOURCE"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "ORIGINAL_EQUALS_TARGET",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "ORIGINAL_EQUALS_TARGET"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "ORIGINAL_EQUALS_TARGET"
                                                    },
                                                    "details": {
                                                      "nullable": true,
                                                      "type": "object",
                                                      "properties": {
                                                        "types": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string",
                                                            "enum": [
                                                              "IDENTICAL_CAPITALIZATION",
                                                              "IDENTICAL_TAGS"
                                                            ],
                                                            "example": "[\"IDENTICAL_CAPITALIZATION\", \"IDENTICAL_TAGS\"]"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "TARGET"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "REPEATED_WORD",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "REPEATED_WORD"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "REPEATED_WORD"
                                                    },
                                                    "details": {
                                                      "nullable": true,
                                                      "type": "object",
                                                      "properties": {
                                                        "word": {
                                                          "type": "string",
                                                          "description": "word",
                                                          "example": "szia"
                                                        }
                                                      }
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "TARGET"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "SEGMENT_COMPLETENESS",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "SEGMENT_COMPLETENESS"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "SEGMENT_COMPLETENESS"
                                                    },
                                                    "details": {
                                                      "type": "object",
                                                      "nullable": true,
                                                      "properties": {
                                                        "type": {
                                                          "type": "string",
                                                          "enum": [
                                                            "TARGET_IS_EMPTY",
                                                            "TARGET_IS_MUCH_SHORTER_THAN_SOURCE",
                                                            "TARGET_IS_MUCH_LONGER_THAN_SOURCE"
                                                          ],
                                                          "description": "word",
                                                          "example": "TARGET_IS_MUCH_SHORTER_THAN_SOURCE"
                                                        }
                                                      }
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "TARGET"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "SOURCE_IN_WRONG_LANGUAGE",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "SOURCE_IN_WRONG_LANGUAGE"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "SOURCE_IN_WRONG_LANGUAGE"
                                                    },
                                                    "details": {
                                                      "nullable": true,
                                                      "type": "object"
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "SOURCE"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "SOURCE"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "SPELLCHECK",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "SPELLCHECK"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "SPELLCHECK"
                                                    },
                                                    "details": {
                                                      "type": "object",
                                                      "nullable": true,
                                                      "properties": {
                                                        "word": {
                                                          "type": "string",
                                                          "description": "word",
                                                          "example": "Sziaa"
                                                        },
                                                        "suggestions": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string"
                                                          },
                                                          "description": "suggestions",
                                                          "example": "[\"Szia\", \"Szita\", \"Szila\", \"Szia a\", \"Szilvia\"]"
                                                        }
                                                      }
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "TARGET"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "TAG_CONSISTENCY",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TAG_CONSISTENCY"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "TAG_CONSISTENCY"
                                                    },
                                                    "details": {
                                                      "type": "object",
                                                      "properties": {
                                                        "tag": {
                                                          "type": "string",
                                                          "description": "tag",
                                                          "example": "</p>"
                                                        },
                                                        "type": {
                                                          "type": "string",
                                                          "enum": [
                                                            "TAG_ADDED",
                                                            "TAG_DELETED",
                                                            "SPACES_AROUND_TAGS",
                                                            "TAG_ORDER_IS_CHANGED"
                                                          ],
                                                          "example": "TAG_DELETED"
                                                        }
                                                      }
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET",
                                                        "SOURCE"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "SOURCE"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "TARGET_IN_WRONG_LANGUAGE",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET_IN_WRONG_LANGUAGE"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "TARGET_IN_WRONG_LANGUAGE"
                                                    },
                                                    "details": {
                                                      "type": "object",
                                                      "nullable": true
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "TARGET"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "TARGET_LENGTH_LIMIT",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET_LENGTH_LIMIT"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "TARGET_LENGTH_LIMIT"
                                                    },
                                                    "details": {
                                                      "type": "object",
                                                      "nullable": true
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "TARGET"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "TARGET_SOURCE_CONSISTENCY",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET_SOURCE_CONSISTENCY"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "TARGET_SOURCE_CONSISTENCY"
                                                    },
                                                    "details": {
                                                      "type": "object",
                                                      "nullable": true,
                                                      "properties": {
                                                        "type": {
                                                          "type": "string",
                                                          "enum": [
                                                            "SAME_SOURCE_DIFFERENT_TRANSLATIONS",
                                                            "SAME_TRANSLATION_DIFFERENT_SOURCES"
                                                          ],
                                                          "description": "type",
                                                          "example": "SAME_SOURCE_DIFFERENT_TRANSLATIONS"
                                                        },
                                                        "originalString": {
                                                          "type": "string",
                                                          "description": "original string",
                                                          "example": "I like to go to the mountains very much."
                                                        },
                                                        "translation": {
                                                          "type": "string",
                                                          "description": "translation",
                                                          "example": "Ich möchte an den Strand gehen."
                                                        }
                                                      }
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "TARGET"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "TRADEMARK_CONSISTENCY",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TRADEMARK_CONSISTENCY"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "TRADEMARK_CONSISTENCY"
                                                    },
                                                    "details": {
                                                      "type": "object",
                                                      "nullable": true,
                                                      "properties": {
                                                        "trademarkTypeCode": {
                                                          "type": "string",
                                                          "enum": [
                                                            "SERVICE_MARK",
                                                            "COPYRIGHT",
                                                            "REGISTERED",
                                                            "TRADEMARK"
                                                          ],
                                                          "description": "trademark type code",
                                                          "example": "COPYRIGHT"
                                                        }
                                                      }
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "SOURCE"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "SOURCE"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "WHITESPACES",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "WHITESPACES"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "WHITESPACES"
                                                    },
                                                    "details": {
                                                      "type": "object",
                                                      "nullable": true
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "TARGET"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "PUNCTUATION_CONSISTENCY",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "PUNCTUATION_CONSISTENCY"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "PUNCTUATION_CONSISTENCY"
                                                    },
                                                    "details": {
                                                      "nullable": true,
                                                      "type": "object"
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "SOURCE"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "SOURCE"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "PLURALS_REPETITION",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "PLURALS_REPETITION"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "PLURALS_REPETITION"
                                                    },
                                                    "details": {
                                                      "nullable": true,
                                                      "type": "object",
                                                      "properties": {
                                                        "pluralFormGroupUid": {
                                                          "type": "string",
                                                          "description": "unique identifier of plural form",
                                                          "example": "7191152182c69d9b72069ac1290fe24b"
                                                        },
                                                        "repeatedPluralForms": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "string",
                                                            "example": "ONE"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "TARGET"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "REGEX_CHECK",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "REGEX_CHECK"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "REGEX_CHECK"
                                                    },
                                                    "details": {
                                                      "type": "object",
                                                      "nullable": true,
                                                      "oneOf": [
                                                        {
                                                          "allOf": [
                                                            {
                                                              "type": "object",
                                                              "properties": {
                                                                "ruleUid": {
                                                                  "type": "string",
                                                                  "description": "Unique identifier of corresponding check rule",
                                                                  "example": "ce6d6b5dbc12"
                                                                }
                                                              }
                                                            },
                                                            {
                                                              "type": "object",
                                                              "properties": {
                                                                "ruleName": {
                                                                  "type": "string",
                                                                  "description": "Rule name",
                                                                  "example": "ruleName"
                                                                },
                                                                "severityLevelCode": {
                                                                  "enum": [
                                                                    "DISABLED",
                                                                    "LOW",
                                                                    "MEDIUM",
                                                                    "HIGH"
                                                                  ]
                                                                },
                                                                "ruleTypeCode": {
                                                                  "enum": [
                                                                    "FORBIDDEN",
                                                                    "MISSING",
                                                                    "COUNT_MISMATCH"
                                                                  ]
                                                                },
                                                                "flavorCode": {
                                                                  "enum": [
                                                                    "JAVA",
                                                                    "DOT_NET"
                                                                  ]
                                                                },
                                                                "originalPattern": {
                                                                  "type": "string",
                                                                  "description": "Regular expression to evaluate against the source string.",
                                                                  "example": "@mail"
                                                                },
                                                                "translationPattern": {
                                                                  "type": "string",
                                                                  "description": "Regular expression to evaluate against the translation.",
                                                                  "example": "@gmail"
                                                                },
                                                                "caseInsensitive": {
                                                                  "type": "boolean",
                                                                  "description": "Enable case insensitive search",
                                                                  "example": true
                                                                },
                                                                "multiLine": {
                                                                  "type": "boolean",
                                                                  "description": "Enables multine search. If true then search will span newlines in a string. Users can use ^ and $ characters with special meaning for beginning of line and end of line match.",
                                                                  "example": true
                                                                },
                                                                "description": {
                                                                  "type": "string",
                                                                  "description": "Human readable description of the role; shown in the the dashboard UI.",
                                                                  "example": "rule description"
                                                                },
                                                                "warningMessage": {
                                                                  "type": "string",
                                                                  "description": "Human readable warning message appended to the standard message that is shown in the CAT tool when the check fails.",
                                                                  "example": " test warning message"
                                                                }
                                                              },
                                                              "required": [
                                                                "ruleName",
                                                                "severityLevelCode",
                                                                "ruleTypeCode",
                                                                "flavorCode",
                                                                "originalPattern",
                                                                "translationPattern",
                                                                "caseInsensitive",
                                                                "multiLine"
                                                              ]
                                                            },
                                                            {
                                                              "type": "object",
                                                              "properties": {
                                                                "groups": {
                                                                  "type": "array",
                                                                  "items": {
                                                                    "allOf": [
                                                                      {
                                                                        "type": "object",
                                                                        "properties": {
                                                                          "groupUid": {
                                                                            "type": "string",
                                                                            "description": "Smartling rule group identifier of the translation",
                                                                            "example": "ce6d6b5dbc12"
                                                                          },
                                                                          "ruleUid": {
                                                                            "type": "string",
                                                                            "description": "Smartling rule identifier of the translation",
                                                                            "example": "ce6d6b5dbcs2"
                                                                          },
                                                                          "targetLocaleIds": {
                                                                            "description": "The list of target locales.",
                                                                            "example": [
                                                                              "ru-RU"
                                                                            ],
                                                                            "items": {
                                                                              "type": "string"
                                                                            },
                                                                            "type": "array"
                                                                          },
                                                                          "severityLevelCode": {
                                                                            "type": "string",
                                                                            "description": "severity level code",
                                                                            "example": "MEDIUM",
                                                                            "enum": [
                                                                              "DISABLED",
                                                                              "LOW",
                                                                              "MEDIUM",
                                                                              "HIGH"
                                                                            ]
                                                                          }
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "TARGET"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            {
                                              "title": "OPEN_ISSUES",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "severityLevelCode": {
                                                      "type": "string",
                                                      "description": "severity level code",
                                                      "example": "MEDIUM",
                                                      "enum": [
                                                        "DISABLED",
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH"
                                                      ]
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "positions": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "from": {
                                                            "type": "integer",
                                                            "description": "start position in the string"
                                                          },
                                                          "to": {
                                                            "type": "integer",
                                                            "description": "end position in the string"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "properties": {
                                                    "checkTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "OPEN_ISSUES"
                                                      ],
                                                      "description": "check type code",
                                                      "example": "OPEN_ISSUES"
                                                    },
                                                    "details": {
                                                      "nullable": true,
                                                      "type": "object",
                                                      "properties": {
                                                        "sourceIssuesCount": {
                                                          "type": "integer",
                                                          "description": "text",
                                                          "example": 2
                                                        },
                                                        "translationIssuesCount": {
                                                          "type": "integer",
                                                          "description": "message",
                                                          "example": 3
                                                        }
                                                      }
                                                    },
                                                    "positionTypeCode": {
                                                      "type": "string",
                                                      "enum": [
                                                        "TARGET"
                                                      ],
                                                      "description": "position type code",
                                                      "example": "TARGET"
                                                    }
                                                  }
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "BLACKLISTED_TERMS": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "blacklist_term",
                                "translation": "blacklist_term",
                                "hashcode": "7191152182c69d9b72069ac1290fe24b",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "BLACKLISTED_TERMS",
                                  "severityLevelCode": "MEDIUM",
                                  "positions": [
                                    {
                                      "from": 0,
                                      "to": 14
                                    }
                                  ],
                                  "details": {
                                    "blacklistedTermUid": "uidgj1",
                                    "termText": "blacklist_term",
                                    "alternatives": [],
                                    "notes": ""
                                  },
                                  "positionTypeCode": "TARGET"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "EMOJI_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "Bonjour 😀",
                                "translation": "Hello",
                                "hashcode": "7191152182c69d9b72069ac1290fe24b",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "EMOJI_CONSISTENCY",
                                  "severityLevelCode": "LOW",
                                  "positions": [
                                    {
                                      "from": 14,
                                      "to": 16
                                    }
                                  ],
                                  "details": {
                                    "emoji": "😀",
                                    "type": "EMOJI_DELETED"
                                  },
                                  "positionTypeCode": "SOURCE"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "GLOBAL_CAPITALISATION_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "ATTENTION",
                                "translation": "WARNINg",
                                "hashcode": "7191152182c69d9b72069ac1290fe24b",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "GLOBAL_CAPITALISATION_CONSISTENCY",
                                  "severityLevelCode": "LOW",
                                  "positions": [
                                    {
                                      "from": 0,
                                      "to": 7
                                    }
                                  ],
                                  "details": null,
                                  "positionTypeCode": "TARGET"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "GLOSSARY_COMPLIANCE": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "resize",
                                "translation": "поменять",
                                "hashcode": "7191152182c69d9b72069ac1290fe24b",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "GLOSSARY_COMPLIANCE",
                                  "severityLevelCode": "MEDIUM",
                                  "positions": [
                                    {
                                      "from": 0,
                                      "to": 6
                                    }
                                  ],
                                  "details": {
                                    "glossaryTerm": {
                                      "termUid": "cdd443b9-814f-442c-9ba6-4d97e0afce74",
                                      "translation": {
                                        "localeId": "ru-RU",
                                        "translatedTerm": "изменить размер",
                                        "notes": "",
                                        "translatorUserUid": null,
                                        "lockTranslation": false,
                                        "submittedForTranslation": false,
                                        "createdDate": "2018-11-16T16:06:53Z",
                                        "modifiedDate": "2018-11-16T16:06:53Z"
                                      },
                                      "termText": "resize",
                                      "caseSensitive": false,
                                      "exactMatch": false,
                                      "definition": "",
                                      "variations": "",
                                      "synonyms": "",
                                      "antonyms": "",
                                      "seo": false,
                                      "doNotTranslate": false,
                                      "notes": "",
                                      "partOfSpeechCode": "UNSPECIFIED",
                                      "createdByUserUid": "f64d50d91867",
                                      "createdDate": "2018-11-16T16:06:05Z",
                                      "modifiedDate": "2018-11-16T16:06:05Z"
                                    }
                                  },
                                  "positionTypeCode": "SOURCE"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "INSERTABLE_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "Bonjour <br>",
                                "translation": "Hello",
                                "hashcode": "7191152182c69d9b72069ac1290fe24b",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "INSERTABLE_CONSISTENCY",
                                  "severityLevelCode": "LOW",
                                  "positions": [
                                    {
                                      "from": 13,
                                      "to": 17
                                    }
                                  ],
                                  "details": {
                                    "insertable": "<br>",
                                    "insertableType": "BR_TAG",
                                    "type": "INSERTABLE_DELETED"
                                  },
                                  "positionTypeCode": "SOURCE"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "LEADING_TRAILING_SPACES": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "Bonjour",
                                "translation": " Hello ",
                                "hashcode": "7191152182c69d9b72069ac1290fe24b",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "LEADING_TRAILING_SPACES",
                                  "severityLevelCode": "LOW",
                                  "positions": [
                                    {
                                      "from": 0,
                                      "to": 1
                                    },
                                    {
                                      "from": 6,
                                      "to": 7
                                    }
                                  ],
                                  "details": null,
                                  "positionTypeCode": "TARGET"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "NON_TRANSLATABLE_TEXT": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "Bonjour {0}",
                                "translation": "Hello",
                                "hashcode": "7191152182c69d9b72069ac1290fe24b",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "NON_TRANSLATABLE_TEXT",
                                  "severityLevelCode": "MEDIUM",
                                  "positions": [
                                    {
                                      "from": 6,
                                      "to": 9
                                    }
                                  ],
                                  "details": {
                                    "placeable": "{0}",
                                    "type": "PLACEABLE_DELETED"
                                  },
                                  "positionTypeCode": "SOURCE"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "NUMBER_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "Bonjour 1000",
                                "translation": "Hello 20",
                                "hashcode": "7191152182c69d9b72069ac1290fe24b",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "NUMBER_CONSISTENCY",
                                  "severityLevelCode": "LOW",
                                  "positions": [
                                    {
                                      "from": 6,
                                      "to": 10
                                    }
                                  ],
                                  "details": {
                                    "type": "NUMBER_DELETED",
                                    "number": "1000"
                                  },
                                  "positionTypeCode": "SOURCE"
                                },
                                {
                                  "checkTypeCode": "NUMBER_CONSISTENCY",
                                  "severityLevelCode": "LOW",
                                  "positions": [
                                    {
                                      "from": 5,
                                      "to": 7
                                    }
                                  ],
                                  "details": {
                                    "type": "NUMBER_ADDED",
                                    "number": "20"
                                  },
                                  "positionTypeCode": "TARGET"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "REPEATED_WORD": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "Bonjour",
                                "translation": "Hello Hello",
                                "hashcode": "7191152182c69d9b72069ac1290fe24b",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "REPEATED_WORD",
                                  "severityLevelCode": "LOW",
                                  "positions": [
                                    {
                                      "from": 5,
                                      "to": 9
                                    }
                                  ],
                                  "details": {
                                    "word": "Hello"
                                  },
                                  "positionTypeCode": "TARGET"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "SEGMENT_COMPLETENESS": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "Le chien a mangé mes devoirs.",
                                "translation": "The dog ate",
                                "hashcode": "7191152182c69d9b72069ac1290fe24b",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "SEGMENT_COMPLETENESS",
                                  "severityLevelCode": "MEDIUM",
                                  "positions": [
                                    {
                                      "from": 0,
                                      "to": 10
                                    }
                                  ],
                                  "details": {
                                    "type": "TARGET_IS_MUCH_SHORTER_THAN_SOURCE"
                                  },
                                  "positionTypeCode": "TARGET"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "SOURCE_IN_WRONG_LANGUAGE": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "Der Hund hat meine Hausaufgaben gegessen.",
                                "translation": "The dog ate my homework.",
                                "hashcode": "7191152182c69d9b72069ac1290fe24b",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "SOURCE_IN_WRONG_LANGUAGE",
                                  "severityLevelCode": "LOW",
                                  "positions": [
                                    {
                                      "from": 0,
                                      "to": 63
                                    }
                                  ],
                                  "details": null,
                                  "positionTypeCode": "SOURCE"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "SPELLCHECK": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "Le chien a mangé mes devoirs.",
                                "translation": "The dog ate my homewrk.",
                                "hashcode": "7191152182c69d9b72069ac1290fe24b",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "SPELLCHECK",
                                  "severityLevelCode": "MEDIUM",
                                  "positions": [
                                    {
                                      "from": 0,
                                      "to": 5
                                    }
                                  ],
                                  "details": {
                                    "word": "homewrk",
                                    "suggestions": [
                                      "homework"
                                    ]
                                  },
                                  "positionTypeCode": "TARGET"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "TAG_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "<p>Bonjour</p>",
                                "translation": "<p>Hello",
                                "hashcode": "7191152182c69d9b72069ac1290fe24b",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "TAG_CONSISTENCY",
                                  "severityLevelCode": "MEDIUM",
                                  "positions": [
                                    {
                                      "from": 8,
                                      "to": 12
                                    }
                                  ],
                                  "details": {
                                    "tag": "</p>",
                                    "type": "TAG_DELETED"
                                  },
                                  "positionTypeCode": "SOURCE"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "TARGET_LENGTH_LIMIT": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "Bonjour",
                                "translation": "Hello",
                                "hashcode": "7191152182c69d9b72069ac1290fe24b",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "TARGET_LENGTH_LIMIT",
                                  "severityLevelCode": "HIGH",
                                  "positions": [
                                    {
                                      "from": 0,
                                      "to": 4
                                    }
                                  ],
                                  "details": null,
                                  "positionTypeCode": "TARGET"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "TARGET_IN_WRONG_LANGUAGE": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "Le chien a mangé mes devoirs.",
                                "translation": "Der Hund hat meine Hausaufgaben gegessen.",
                                "hashcode": "a0b1acda22fc97da9c2b9ae5f3b25888",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "TARGET_IN_WRONG_LANGUAGE",
                                  "severityLevelCode": "LOW",
                                  "positions": [
                                    {
                                      "from": 0,
                                      "to": 64
                                    }
                                  ],
                                  "details": null,
                                  "positionTypeCode": "TARGET"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "TARGET_SOURCE_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "Le chien a mangé mes devoirs.",
                                "translation": "The dog have ate my homework.",
                                "hashcode": "7191152182c69d9b72069ac1290fe24b",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "TARGET_SOURCE_CONSISTENCY",
                                  "severityLevelCode": "LOW",
                                  "positions": [
                                    {
                                      "from": 0,
                                      "to": 27
                                    }
                                  ],
                                  "details": {
                                    "type": "SAME_SOURCE_DIFFERENT_TRANSLATIONS",
                                    "originalString": "Le chien a mangé mes devoirs.",
                                    "translation": "The dog have ate my homework."
                                  },
                                  "positionTypeCode": "TARGET"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "TRADEMARK_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "Bonjour ©",
                                "translation": "Hello",
                                "hashcode": "9091152182c69d9b72069ac1290fe2345",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "TRADEMARK_CONSISTENCY",
                                  "severityLevelCode": "LOW",
                                  "positions": [
                                    {
                                      "from": 6,
                                      "to": 7
                                    }
                                  ],
                                  "details": {
                                    "trademarkTypeCode": "COPYRIGHT"
                                  },
                                  "positionTypeCode": "SOURCE"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "WHITESPACES": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "Bonjour 100",
                                "translation": "Hello  100",
                                "hashcode": "1091152182c69d9b72069ac1290fe23999",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "WHITESPACES",
                                  "severityLevelCode": "LOW",
                                  "positions": [
                                    {
                                      "from": 4,
                                      "to": 6
                                    }
                                  ],
                                  "details": null,
                                  "positionTypeCode": "TARGET"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "GRAMMAR_CHECK": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "Le chien a mangé mes devoirs.",
                                "translation": "The dog have ate my homework.",
                                "hashcode": "a0b1acda22fc97da9c2b9ae5f3b25888",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "GRAMMAR_CHECK",
                                  "severityLevelCode": "LOW",
                                  "positions": [
                                    {
                                      "from": 9,
                                      "to": 13
                                    }
                                  ],
                                  "details": {
                                    "text": "ate",
                                    "message": "Possible agreement error",
                                    "description": "Agreement: 'have' + past/present tense",
                                    "mistakeTypeCode": "Grammar",
                                    "suggestions": [
                                      "eaten"
                                    ]
                                  },
                                  "positionTypeCode": "TARGET"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "ORIGINAL_EQUALS_TARGET": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "hello",
                                "translation": "hello",
                                "hashcode": "a0b1acda22fc97da9c2b9ae5f3b25888",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "ORIGINAL_EQUALS_TARGET",
                                  "severityLevelCode": "LOW",
                                  "positions": [
                                    {
                                      "from": 0,
                                      "to": 5
                                    }
                                  ],
                                  "details": {
                                    "types": [
                                      "IDENTICAL_CAPITALIZATION",
                                      "IDENTICAL_TAGS"
                                    ]
                                  },
                                  "positionTypeCode": "TARGET"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "PUNCTUATION_CONSISTENCY": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "Hello!",
                                "translation": "Привет. Как дела?",
                                "hashcode": "a0b1acda22fc97da9c2b9ae5f3b25888",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "PUNCTUATION_CONSISTENCY",
                                  "severityLevelCode": "LOW",
                                  "positions": [
                                    {
                                      "from": 5,
                                      "to": 6
                                    }
                                  ],
                                  "details": {
                                    "punctuationMark": "!",
                                    "type": "PUNCTUATION_MARK_DELETED",
                                    "punctuationMarkType": "TERMINAL"
                                  },
                                  "positionTypeCode": "SOURCE"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "PLURALS_REPETITION": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "2 rows",
                                "translation": "2 rows",
                                "hashcode": "a0b1acda22fc97da9c2b9ae5f3b25888",
                                "stringUid": null,
                                "pluralFormGroupUid": "a0b1acda22fc97da9c2b9ae5f3b25888",
                                "pluralForm": "MANY"
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "PLURALS_REPETITION",
                                  "severityLevelCode": "MEDIUM",
                                  "positions": [
                                    {
                                      "from": 0,
                                      "to": 5
                                    }
                                  ],
                                  "details": {
                                    "pluralFormGroupUid": "a0b1acda22fc97da9c2b9ae5f3b25888",
                                    "repeatedPluralForms": [
                                      "MANY",
                                      "FEW"
                                    ]
                                  },
                                  "positionTypeCode": "TARGET"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "REGEX_CHECK": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "test@gmail",
                                "translation": "test@mail",
                                "hashcode": "7191152182c69d9b72069ac1290fe24b",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "REGEX_CHECK",
                                  "severityLevelCode": "LOW",
                                  "positions": [
                                    {
                                      "from": 5,
                                      "to": 10
                                    }
                                  ],
                                  "details": {
                                    "ruleUid": "30606c59ee92",
                                    "severityLevelCode": "LOW",
                                    "ruleName": "name1",
                                    "ruleTypeCode": "FORBIDDEN",
                                    "flavorCode": "JAVA",
                                    "originalPattern": "@f1",
                                    "translationPattern": "@f1",
                                    "description": "name1 description",
                                    "caseInsensitive": true,
                                    "multiLine": false,
                                    "warningMessage": "test warning"
                                  },
                                  "positionTypeCode": "TARGET",
                                  "ignored": false
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "OPEN_ISSUES": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "results": [
                            {
                              "string": {
                                "originalString": "hello",
                                "translation": "hello",
                                "hashcode": "a0b1acda22fc97da9c2b9ae5f3b25888",
                                "stringUid": null,
                                "pluralFormGroupUid": null,
                                "pluralForm": null
                              },
                              "mistakes": [
                                {
                                  "checkTypeCode": "OPEN_ISSUES",
                                  "severityLevelCode": "LOW",
                                  "positions": [
                                    {
                                      "from": 0,
                                      "to": 5
                                    }
                                  ],
                                  "details": {
                                    "sourceIssuesCount": 5,
                                    "translationIssuesCount": 3
                                  },
                                  "positionTypeCode": "TARGET"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provided request parameters are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "VALIDATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "VALIDATION_ERROR",
                        "errors": [
                          {
                            "key": "unknown.field",
                            "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                            "details": {}
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Provided credentials are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "AUTHENTICATION_ERROR",
                            "AUTHORIZATION_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "AUTHENTICATION_ERROR",
                        "errors": [
                          {
                            "key": "invalid_token",
                            "details": {},
                            "message": "Invalid token"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many simultaneous API requests.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "MAX_OPERATIONS_LIMIT_EXCEEDED"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                        "errors": [
                          {
                            "key": "too.many.requests",
                            "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "response": {
                      "properties": {
                        "code": {
                          "description": "Indicates whether the response was successful or what error has occured.",
                          "enum": [
                            "GENERAL_ERROR",
                            "MAINTENANCE_MODE_ERROR"
                          ],
                          "type": "string"
                        },
                        "errors": {
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "example": "general_error",
                                "type": "string"
                              },
                              "message": {
                                "example": "Unexpected server error",
                                "type": "string"
                              },
                              "details": {
                                "example": {},
                                "type": "object"
                              }
                            },
                            "required": [
                              "key",
                              "message"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "code",
                        "errors"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "response"
                  ],
                  "type": "object"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -H \"Content-Type: application/json\" -d \"$smartlingStringTagJSON\" https://api.smartling.com/translation-quality-api/v2/accounts/$smartlingAccountId/projects/$smartlingProjectId/check\n"
          }
        ]
      }
    },
    "/attachments-api/v2/accounts/{accountUid}/{type}/attachments/{attachmentUid}": {
      "get": {
        "summary": "Download binary attachment",
        "description": "Download attachment file",
        "tags": [
          "Attachments"
        ],
        "operationId": "downloadAttachment",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "description": "Attachment type",
            "schema": {
              "enum": [
                "jobs",
                "strings",
                "issues"
              ],
              "type": "string"
            }
          },
          {
            "name": "attachmentUid",
            "in": "path",
            "required": true,
            "description": "Attachment unique identifier.",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/attachments-api/v2/accounts/{accountUid}/{type}/{entityUid}": {
      "get": {
        "summary": "Get list of linked attachments",
        "description": "List of linked attachments with entity",
        "tags": [
          "Attachments"
        ],
        "operationId": "listAttachment",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "description": "Attachment type",
            "schema": {
              "enum": [
                "jobs",
                "strings",
                "issues"
              ],
              "type": "string"
            }
          },
          {
            "name": "entityUid",
            "in": "path",
            "required": true,
            "description": "Entity uid",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentListEntityResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "totalCount": 2,
                          "items": [
                            {
                              "attachmentUid": "1e2f4378324e",
                              "name": "my-attachment",
                              "description": "meta-for-my-attachment",
                              "createdDate": "2018-03-30T12:58:22Z",
                              "createdByUserUid": "5789003e276a",
                              "canDelete": false
                            },
                            {
                              "attachmentUid": "198eafe96267",
                              "name": "my-attachment",
                              "description": "meta-for-my-attachment",
                              "createdDate": "2018-03-30T12:58:22Z",
                              "createdByUserUid": "5789003e276a",
                              "canDelete": true
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/attachments-api/v2/accounts/{accountUid}/{type}/attachments": {
      "post": {
        "summary": "Upload binary attachment",
        "description": "Upload attachment file",
        "tags": [
          "Attachments"
        ],
        "operationId": "uploadAttachment",
        "parameters": [
          {
            "name": "accountUid",
            "in": "path",
            "required": true,
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "description": "Attachment type",
            "schema": {
              "enum": [
                "jobs",
                "strings",
                "issues"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The attachment file contents to upload."
                  },
                  "name": {
                    "type": "string",
                    "description": "Functional name of the file uploaded. This is not a unique identifier."
                  },
                  "entityUids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "(Optional) The list of entity uids attachment will be linked with (max 100).",
                    "maxItems": 100
                  },
                  "description": {
                    "type": "string",
                    "description": "(Optional) Description of uploaded binary file."
                  }
                },
                "required": [
                  "file",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAttachmentResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "attachmentUid": "1e2f4378324e",
                          "name": "my-attachment",
                          "description": "meta-for-my-attachment",
                          "createdDate": "2018-03-30T12:58:22Z",
                          "createdByUserUid": "5789003e276a"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/Error401ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/glossaries": {
      "post": {
        "summary": "Create glossary",
        "description": "Create glossary endpoint.",
        "tags": [
          "Glossary API"
        ],
        "operationId": "createGlossary",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlossaryCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlossaryResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/glossaries/{glossaryUid}": {
      "get": {
        "tags": [
          "Glossary API"
        ],
        "summary": "Read glossary",
        "description": "Read glossary endpoint.",
        "operationId": "readGlossary",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/glossaryUidPathParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlossaryResponsePTO"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      },
      "put": {
        "summary": "Update glossary",
        "description": "Update glossary endpoint.",
        "tags": [
          "Glossary API"
        ],
        "operationId": "updateGlossary",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/glossaryUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlossaryCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlossaryResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/glossaries/archive": {
      "post": {
        "summary": "Bulk archive glossaries",
        "description": "Bulk archive glossaries endpoint.",
        "tags": [
          "Glossary API"
        ],
        "operationId": "archiveGlossaries",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlossariesArchiveUnarchiveCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlossariesArchiveUnarchivedResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/glossaries/unarchive": {
      "post": {
        "summary": "Bulk unarchive/restore glossaries.",
        "description": "Bulk unarchive/restore glossaries endpoint.",
        "tags": [
          "Glossary API"
        ],
        "operationId": "restoreGlossaries",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlossariesArchiveUnarchiveCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlossariesArchiveUnarchivedResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/glossaries/search": {
      "post": {
        "summary": "Search glossaries by filter",
        "description": "Search glossaries by filter endpoint.",
        "tags": [
          "Glossary API"
        ],
        "operationId": "searchGlossaries",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetGlossariesWithEntriesCountByFilterCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlossarySearchListResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/glossaries/search/count": {
      "post": {
        "summary": "Search glossaries entries count by filter",
        "description": "Search glossaries entries count by filter endpoint.",
        "tags": [
          "Glossary API"
        ],
        "operationId": "searchGlossariesWithEntriesCounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetGlossariesByFilterCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlossaryEntriesCountsSuccessResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/glossaries/{glossaryUid}/entries": {
      "post": {
        "summary": "Create glossary entry",
        "description": "Create glossary entry endpoint.",
        "tags": [
          "Glossary API"
        ],
        "operationId": "createGlossaryEntry",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/glossaryUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlossaryEntryCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlossaryEntryDetailedResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/glossaries/{glossaryUid}/entries/{entryUid}": {
      "get": {
        "summary": "Read glossary entry",
        "description": "Read glossary entry endpoint.",
        "tags": [
          "Glossary API"
        ],
        "operationId": "readGlossaryEntry",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/glossaryUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/entryUidPathParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlossaryEntryDetailedResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      },
      "put": {
        "summary": "Update glossary entry",
        "description": "Update glossary entry endpoint.",
        "tags": [
          "Glossary API"
        ],
        "operationId": "updateGlossaryEntry",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/glossaryUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/entryUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlossaryEntryCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlossaryEntryDetailedResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/glossaries/{glossaryUid}/entries/search": {
      "post": {
        "summary": "Search glossary entries",
        "description": "Search glossary entries endpoint.",
        "tags": [
          "Glossary API"
        ],
        "operationId": "searchGlossaryEntries",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/glossaryUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetGlossaryEntriesByFilterCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntriesSearchSuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/glossaries/{glossaryUid}/entries/archive": {
      "post": {
        "summary": "Archive glossary entries",
        "description": "Archive glossary entries endpoint.",
        "tags": [
          "Glossary API"
        ],
        "operationId": "archiveGlossaryEntries",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/glossaryUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntriesBulkActionCommandPTO"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/glossaries/{glossaryUid}/entries/unarchive": {
      "post": {
        "summary": "Unarchive/restore glossary entries",
        "description": "Unarchive/restore glossary entries endpoint.",
        "tags": [
          "Glossary API"
        ],
        "operationId": "restoreGlossaryEntries",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/glossaryUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntriesBulkActionCommandPTO"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/glossaries/{glossaryUid}/entries/add-labels": {
      "post": {
        "summary": "Add labels to glossary entries",
        "description": "Add labels to glossary entries endpoint.",
        "tags": [
          "Glossary API"
        ],
        "operationId": "addLabelsToGlossaryEntries",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/glossaryUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntriesBulkUpdateLabelsCommandPTO"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/glossaries/{glossaryUid}/entries/remove-labels": {
      "post": {
        "summary": "Remove labels from glossary entries",
        "description": "Remove labels from glossary entries endpoint.",
        "tags": [
          "Glossary API"
        ],
        "operationId": "removeLabelsFromGlossaryEntries",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/glossaryUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntriesBulkUpdateLabelsCommandPTO"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/glossaries/{glossaryUid}/entries/delete": {
      "post": {
        "summary": "Remove glossary entries",
        "description": "Remove glossary entries endpoint.",
        "tags": [
          "Glossary API"
        ],
        "operationId": "removeGlossaryEntries",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/glossaryUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntriesBulkActionCommandPTO"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/glossaries/{glossaryUid}/entries/download": {
      "post": {
        "summary": "Export glossary entries",
        "description": "This request export glossary entries into file with preselected format. For now next formats are allowed:\n - CSV,\n - XLSX,\n - TBX.\n\nFor TBX files - 2 version-names / versions supported:\n - TBXcoreStructV02,\n - TBXcoreStructV03.",
        "tags": [
          "Glossary API"
        ],
        "operationId": "exportGlossary",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/glossaryUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlossaryEntriesExportCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/glossaries/{glossaryUid}/import": {
      "post": {
        "tags": [
          "Glossary API"
        ],
        "summary": "Initialize glossary import process",
        "description": "Initialize glossary import process. Upload file, and perform validation. ( No changes will be done during this method call ). In case of success glossary import will be created with 'PENDING' status.",
        "operationId": "initializeGlossaryImport",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/glossaryUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/GlossaryImportCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlossaryImportResponsePTO"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "glossaryImport": {
                            "glossaryUid": "bad90990-4be1-4570-81da-b719cddd5352",
                            "importUid": "939a4439-2ed0-4123-bc68-d188e4d664ab",
                            "importStatus": "PENDING"
                          },
                          "entryChanges": {
                            "newEntries": "0,",
                            "existingEntryUpdates": "1,",
                            "notMatchedEntries": "1,",
                            "entriesToArchive": 0
                          },
                          "translationChanges": [
                            {
                              "localeId": "en-US",
                              "newTranslations": 1,
                              "updatedTranslations": 0,
                              "translationsToRemove": 1
                            }
                          ],
                          "warnings": [
                            {
                              "key": "warning.key1",
                              "message": "message-1"
                            },
                            {
                              "key": "warning.key2",
                              "message": "message-2"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/glossaries/{glossaryUid}/import/{importUid}": {
      "get": {
        "tags": [
          "Glossary API"
        ],
        "summary": "Read import process status",
        "description": "Read import process status",
        "operationId": "importStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/glossaryUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/importUidPathParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlossaryImportPTO"
                },
                "examples": {
                  "response": {
                    "value": {
                      "response": {
                        "code": "SUCCESS",
                        "data": {
                          "glossaryUid": "bad90990-4be1-4570-81da-b719cddd5352",
                          "importUid": "939a4439-2ed0-4123-bc68-d188e4d664ab",
                          "importStatus": "PENDING"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/glossaries/{glossaryUid}/import/{importUid}/confirm": {
      "post": {
        "tags": [
          "Glossary API"
        ],
        "summary": "Confirm previously created glossary import",
        "description": "Confirm previously created glossary import. Only imports in status : 'PENDING' may be confirmed.",
        "operationId": "confirmGlossaryImport",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/glossaryUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/importUidPathParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlossaryImportPTO"
                },
                "response": {
                  "value": {
                    "response": {
                      "code": "SUCCESS",
                      "data": {
                        "glossaryUid": "bad90990-4be1-4570-81da-b719cddd5352",
                        "importUid": "939a4439-2ed0-4123-bc68-d188e4d664ab",
                        "importStatus": "IN_PROGRESS"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -F \"importFile=@$uploadFilePath;type=text/plain\" -F \"importFileName=$uploadFileSmartlingName\" -F \"importFileMediaType=$uploadFileSmartlingMediaType\" \"https://api.smartling.com//glossary-api/v3/accounts/$smartlingAccountUid/glossaries/$smartlingGlossaryUid/import\"    \n"
          }
        ]
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/glossaries/{glossaryUid}/entries/authorization": {
      "post": {
        "summary": "Authorize glossary entries for translations.",
        "description": "Allow to authorize entries for translation. Creates all required strings, authorize, then and add  to the JOB.",
        "tags": [
          "Glossary API"
        ],
        "operationId": "authorizeEntriesForTranslation",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/glossaryUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizeGlossaryEntriesPTO"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/labels": {
      "get": {
        "tags": [
          "Glossary API"
        ],
        "summary": "Read account glossary labels",
        "description": "Read all glossary labels endpoint.",
        "operationId": "readAllGlossaryLabels",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGlossaryLabelsSuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      },
      "post": {
        "summary": "Create glossary label",
        "description": "Create glossary label endpoint.",
        "tags": [
          "Glossary API"
        ],
        "operationId": "createGlossaryLabel",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManageGlossaryLabelCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlossaryLabelPTO"
                },
                "response": {
                  "value": {
                    "response": {
                      "code": "SUCCESS",
                      "data": {
                        "labelUid": "bad90990-4be1-4570-81da-b719cddd5352",
                        "labelText": "text of the label"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/labels/{labelUid}": {
      "put": {
        "tags": [
          "Glossary API"
        ],
        "summary": "Update glossary label",
        "description": "Update glossary label endpoint.",
        "operationId": "updateGlossaryLabel",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/labelPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManageGlossaryLabelCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlossaryLabelPTO"
                },
                "response": {
                  "value": {
                    "response": {
                      "code": "SUCCESS",
                      "data": {
                        "labelUid": "bad90990-4be1-4570-81da-b719cddd5352",
                        "labelText": "text of the label"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      },
      "delete": {
        "tags": [
          "Glossary API"
        ],
        "summary": "Delete glossary label",
        "description": "Delete glossary label endpoint.",
        "operationId": "deleteGlossaryLabel",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/labelPathParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/components-schemas-EmptyResponse"
                },
                "response": {
                  "value": {
                    "response": {
                      "code": "SUCCESS",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/blocklists": {
      "post": {
        "summary": "Create blocklist",
        "description": "Create blocklist endpoint.",
        "tags": [
          "Blocklist API"
        ],
        "operationId": "createBlocklist",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlocklistCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/blocklists/{blocklistUid}": {
      "get": {
        "tags": [
          "Blocklist API"
        ],
        "summary": "Read blocklist",
        "description": "Read blocklist endpoint.",
        "operationId": "readBlocklist",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/blocklistUidPathParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistResponsePTO"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      },
      "put": {
        "summary": "Update blocklist",
        "description": "Update blocklist endpoint.",
        "tags": [
          "Blocklist API"
        ],
        "operationId": "updateBlocklist",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/blocklistUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlocklistCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/blocklists/{blocklistUid}/archive": {
      "put": {
        "summary": "Archive blocklist",
        "description": "Archive blocklist endpoint.",
        "tags": [
          "Blocklist API"
        ],
        "operationId": "archiveBlocklist",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/blocklistUidPathParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistArchiveUnarchivedResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/blocklists/{blocklistUid}/unarchive": {
      "put": {
        "summary": "Unarchive/restore blocklist",
        "description": "Unarchive/restore blocklist endpoint.",
        "tags": [
          "Blocklist API"
        ],
        "operationId": "restoreBlocklist",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/blocklistUidPathParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistArchiveUnarchivedResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/blocklists/search": {
      "post": {
        "summary": "Search blocklists by filter",
        "description": "Search blocklists by filter endpoint.",
        "tags": [
          "Blocklist API"
        ],
        "operationId": "searchBlocklist",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBlocklistByFilterCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistSearchListResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/blocklists/{blocklistUid}/terms": {
      "post": {
        "summary": "Create blocklist term",
        "description": "Create blocklist term endpoint.",
        "tags": [
          "Blocklist API"
        ],
        "operationId": "createBlocklistTerm",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/blocklistUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlocklistTermCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistTermResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/blocklists/{blocklistUid}/terms/{termUid}": {
      "get": {
        "summary": "Read blocklist term",
        "description": "Read blocklist term endpoint.",
        "tags": [
          "Blocklist API"
        ],
        "operationId": "readBlocklistTerm",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/blocklistUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/termUidPathParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistTermResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      },
      "put": {
        "summary": "Update blocklist term",
        "description": "Update blocklist term endpoint.",
        "tags": [
          "Blocklist API"
        ],
        "operationId": "updateBlocklistTerm",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/blocklistUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/termUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlocklistTermCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistTermResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/blocklists/{blocklistUid}/terms/{termUid}/archive": {
      "post": {
        "summary": "Archive blocklist term",
        "description": "Archive blocklist term endpoint.",
        "tags": [
          "Blocklist API"
        ],
        "operationId": "archiveBlocklistTerm",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/blocklistUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/termUidPathParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistTermArchiveUnarchivedResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/blocklists/{blocklistUid}/terms/{termUid}/unarchive": {
      "post": {
        "summary": "Unarchive/restore blocklist term",
        "description": "Unarchive/restore blocklist term endpoint.",
        "tags": [
          "Blocklist API"
        ],
        "operationId": "restoreBlocklistTerm",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/blocklistUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/termUidPathParameter"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {}
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistTermArchiveUnarchivedResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/blocklists/{blocklistUid}/terms/search": {
      "post": {
        "summary": "Search blocklist terms",
        "description": "Search blocklist terms endpoint.",
        "tags": [
          "Blocklist API"
        ],
        "operationId": "searchBlocklistTerms",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/blocklistUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBlocklistTermByFilterCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistTermsSearchSuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3//accounts/{accountUid}/blocklists/{blocklistUid}/download": {
      "get": {
        "summary": "Export blocklist terms",
        "description": "This request export blocklist terms into file with preselected format. For now next formats are allowed:\n - CSV,\n - XLSX.",
        "tags": [
          "Blocklist API"
        ],
        "operationId": "exportBlocklist",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/blocklistUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/exportFormat"
          },
          {
            "$ref": "#/components/parameters/skipEntriesParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/blocklists/{blocklistUid}/import": {
      "post": {
        "tags": [
          "Blocklist API"
        ],
        "summary": "Initialize blocklist import process",
        "description": "Initialize blocklist import process. Upload file, and perform validation. ( No changes will be done during this method call ). In case of success blocklist import will be created with 'PENDING' status.",
        "operationId": "initializeBlocklistImport",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/blocklistUidPathParameter"
          }
        ],
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/BlocklistImportCommandPTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistImportResponsePTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/{accountUid}/blocklists/{blocklistUid}/import/{importUid}": {
      "get": {
        "tags": [
          "Blocklist API"
        ],
        "summary": "Read import process status",
        "description": "Read import process status",
        "operationId": "blocklistImportStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/blocklistUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/importUidPathParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistImportPTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        }
      }
    },
    "/glossary-api/v3/accounts/accounts/{accountUid}/blocklists/{blocklistUid}/import/{importUid}/confirm": {
      "post": {
        "tags": [
          "Blocklist API"
        ],
        "summary": "Confirm previously created blocklist import",
        "description": "Confirm previously created blocklist import. Only imports in status : 'PENDING' may be confirmed.",
        "operationId": "confirmBlocklistImport",
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-accountUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/blocklistUidPathParameter"
          },
          {
            "$ref": "#/components/parameters/importUidPathParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlocklistImportPTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/g_common_components-responses-Error400ResponseDefinition"
          },
          "401": {
            "$ref": "#/components/responses/components-responses-Error401ResponseDefinition"
          },
          "403": {
            "$ref": "#/components/responses/Error403ResponseDefinition"
          },
          "404": {
            "$ref": "#/components/responses/Error404ResponseDefinition"
          },
          "429": {
            "$ref": "#/components/responses/components-responses-Error429ResponseDefinition"
          },
          "500": {
            "$ref": "#/components/responses/components-responses-Error500ResponseDefinition"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H \"Authorization: Bearer $smartlingToken\" -F \"importFile=@$uploadFilePath;type=text/csv\" -F \"importFileName=$uploadFileSmartlingName\" -F \"importFileMediaType=$uploadFileSmartlingMediaType\" \"https://api.smartling.com//glossary-api/v3/accounts/$smartlingAccountUid/blocklist/$smartlingBlocklistUid/import\"    \n"
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "requestBodies": {
      "TagsWithStrings": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "tags": {
                  "description": "List of tags. Maximum length is 128 characters.",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 100,
                  "minItems": 1,
                  "type": "array"
                },
                "stringHashcodes": {
                  "description": "List of string hashcodes",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 1000,
                  "type": "array"
                }
              },
              "required": [
                "tags",
                "stringHashcodes"
              ],
              "type": "object"
            }
          }
        },
        "required": true
      }
    },
    "schemas": {
      "LEADING_TRAILING_SPACES": {
        "$ref": "#/components/schemas/AccountCheckTypeEffectiveDTO"
      },
      "ORIGINAL_EQUALS_TARGET": {
        "$ref": "#/components/schemas/schemas-AccountCheckTypeEffectiveDTO"
      },
      "WHITESPACES": {
        "$ref": "#/components/schemas/components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "SPELLCHECK": {
        "$ref": "#/components/schemas/spellcheck_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "TAG_CONSISTENCY": {
        "$ref": "#/components/schemas/tag_consistency_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "TARGET_LENGTH_LIMIT": {
        "$ref": "#/components/schemas/target_length_limit_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "NUMBER_CONSISTENCY": {
        "$ref": "#/components/schemas/number_consistency_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "REPEATED_WORD": {
        "$ref": "#/components/schemas/repeated_word_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "TARGET_IN_WRONG_LANGUAGE": {
        "$ref": "#/components/schemas/target_in_wrong_language_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "SOURCE_IN_WRONG_LANGUAGE": {
        "$ref": "#/components/schemas/source_in_wrong_language_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "SEGMENT_COMPLETENESS": {
        "$ref": "#/components/schemas/segment_completeness_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "NON_TRANSLATABLE_TEXT": {
        "$ref": "#/components/schemas/non_translatable_text_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "EMOJI_CONSISTENCY": {
        "$ref": "#/components/schemas/emoji_consistency_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "INSERTABLE_CONSISTENCY": {
        "$ref": "#/components/schemas/insertable_consistency_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "TARGET_SOURCE_CONSISTENCY": {
        "$ref": "#/components/schemas/target_source_consistency_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "BLACKLISTED_TERMS": {
        "$ref": "#/components/schemas/blacklisted_terms_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "GLOSSARY_COMPLIANCE": {
        "$ref": "#/components/schemas/glossary_compliance_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "TRADEMARK_CONSISTENCY": {
        "$ref": "#/components/schemas/trademark_consistency_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "GRAMMAR_CHECK": {
        "$ref": "#/components/schemas/grammar_check_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "GLOBAL_CAPITALISATION_CONSISTENCY": {
        "$ref": "#/components/schemas/global_capitalisation_consistency_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "PUNCTUATION_CONSISTENCY": {
        "$ref": "#/components/schemas/punctuation_consistency_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "PLURALS_REPETITION": {
        "$ref": "#/components/schemas/plurals_repetition_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "OPEN_ISSUES": {
        "$ref": "#/components/schemas/open_issues_components-schemas-AccountCheckTypeEffectiveDTO"
      },
      "AccountAPIListProjectItem": {
        "example": {
          "accountUid": "ab5f1939",
          "archived": false,
          "projectId": "fd7244365",
          "projectName": "fd7244365",
          "projectTypeCode": "APPLICATION_RESOURCES",
          "sourceLocaleDescription": "English",
          "sourceLocaleId": "en-US"
        },
        "properties": {
          "accountUid": {
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "type": "string"
          },
          "archived": {
            "description": "Indicator whether or not the project has been archived. Archived projects are typically hidden from a user's view, but can still be accessible",
            "type": "boolean"
          },
          "projectId": {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "type": "string"
          },
          "projectName": {
            "description": "The name of the project. Names of projects are not guaranteed to be unique within an account.",
            "type": "string"
          },
          "projectTypeCode": {
            "description": "Indicator for the type of the project.",
            "type": "string"
          },
          "sourceLocaleDescription": {
            "description": "The full name of the sourceLocaleId",
            "type": "string"
          },
          "sourceLocaleId": {
            "description": "The locale identifier for the source locale of the project. This indicates the base locale for which content should be uploaded to the project.",
            "type": "string"
          }
        },
        "required": [
          "projectId",
          "projectName",
          "accountUid",
          "archived",
          "projectTypeCode",
          "sourceLocaleId",
          "sourceLocaleDescription"
        ],
        "type": "object"
      },
      "AccountAPIProjectListSuccessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/AccountAPIListProjectItem"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "description": "The number of projects that match your specified criteria",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "totalCount",
                      "items"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "AddFileJobRequest": {
        "description": "The payload to use when adding a file to a job.",
        "properties": {
          "fileUri": {
            "description": "The URI of the file that has been uploaded to Smartling. `fileUri` is required.",
            "type": "string"
          },
          "targetLocaleIds": {
            "description": "The array of `localeId`s that the file should be added to. If not specified, the file will be added to all locales. If specified, the file will only be added for the locales provided. If the locales were not already part of the job, then the job will be extended to contain the additional locales.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SearchTranslationJobByLocalesAndHashcodesRequest": {
        "description": "The payload to use when searching translation jobs by hashcodes and locales.",
        "properties": {
          "hashcodes": {
            "description": "The array of hashcodes to search a job containing given hashcodes. If empty, response will also be empty list.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "localeIds": {
            "description": "List of localeIds to search jobs associated with provided hashcodes and locales. If empty, search will be performed only by hashcodes.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AddStringsJobRequest": {
        "description": "The payload to use when adding strings to a job.",
        "properties": {
          "hashcodes": {
            "description": "The array of hashcodes to use to add to the job. The hashcodes must exist within Smartling, for the project, in order to be added to a job. Hashcodes are required when adding strings to a job. Hashcodes are limited to 1000 per API call.",
            "items": {
              "type": "string"
            },
            "maxItems": 1000,
            "type": "array"
          },
          "moveEnabled": {
            "default": false,
            "description": "(Optional), default is false. A string for a locale can only be in one job. If the string identified in the request is already in a job for a locale then it won't be added. However, `moveEnabled=true` can be specified, and in this case, the string will be moved into the specified job.",
            "type": "boolean"
          },
          "targetLocaleIds": {
            "description": "The array of `localeId`s that strings should be added to. If it's not specified, the strings will be added to all locales within that job. If it's specified, the strings will only be added for the locales provided. If the locales were not already part of the job, the job will be extended to contain the additional locales.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AsyncAcceptedResponse": {
        "properties": {
          "code": {
            "enum": [
              "ACCEPTED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "AsyncProcessResponse": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Code of the completed operation.",
                "enum": [
                  "SUCCESS"
                ],
                "type": "string"
              },
              "data": {
                "properties": {
                  "processUid": {
                    "description": "Identifier of the started asynchronous process.",
                    "format": "uuid",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "AsyncMatchResponse": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Code of the completed operation.",
                "enum": [
                  "SUCCESS"
                ],
                "type": "string"
              },
              "data": {
                "properties": {
                  "processUid": {
                    "description": "Identifier of the started asynchronous process. Should be specified for getting matching stats.",
                    "format": "uuid",
                    "type": "string"
                  },
                  "matchId": {
                    "description": "Identifier of the started match operation. Should be specified for getting matching stats. Deprecated, use `processUid` property",
                    "format": "uuid",
                    "deprecated": true,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "AsyncProcessResultResponse": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occurred.",
                "enum": [
                  "SUCCESS"
                ],
                "type": "string"
              },
              "data": {
                "properties": {
                  "processState": {
                    "description": "State of the completed process.",
                    "enum": [
                      "COMPLETED",
                      "IN_PROGRESS",
                      "FAILED"
                    ],
                    "type": "string"
                  },
                  "createdDate": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "modifiedDate": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "errorMessage": {
                    "type": "string"
                  },
                  "processType": {
                    "enum": [
                      "MATCH_CONTEXT",
                      "DELETE_CONTEXTS"
                    ],
                    "type": "string"
                  },
                  "result": {
                    "description": "result if the response is COMPLETED. The content of the field is depends on `type` field",
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/MatchAsyncResult"
                      },
                      {
                        "$ref": "#/components/schemas/DeleteContextsAsyncResult"
                      }
                    ]
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "MatchAsyncResult": {
        "properties": {
          "bindings": {
            "items": {
              "$ref": "#/components/schemas/Binding"
            },
            "type": "array"
          },
          "contextUid": {
            "description": "Unique identifier for the context.",
            "type": "string"
          },
          "checkedStringsCount": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DeleteContextsAsyncResult": {
        "description": "Empty object",
        "properties": {},
        "type": "object"
      },
      "AsyncMatchStatsResponse": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Code of the completed operation.",
                "enum": [
                  "SUCCESS"
                ],
                "type": "string"
              },
              "data": {
                "properties": {
                  "bindings": {
                    "items": {
                      "$ref": "#/components/schemas/Binding"
                    },
                    "type": "array"
                  },
                  "createdDate": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "matchId": {
                    "description": "Identifier of the started match operation. Should be specified for getting matching stats.",
                    "format": "uuid",
                    "type": "string"
                  },
                  "modifiedDate": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "status": {
                    "enum": [
                      "IN_PROGRESS",
                      "COMPLETED",
                      "FAILED"
                    ],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "AsyncProcessJobResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncAcceptedResponse"
          },
          {
            "properties": {
              "data": {
                "properties": {
                  "message": {
                    "description": "User friendly string for the async response explaining the async action taking place.",
                    "type": "string"
                  },
                  "processUid": {
                    "description": "The unique identifier crated for the async process.",
                    "type": "string"
                  },
                  "url": {
                    "description": "The URL that a system can use to check the status of the async processing request.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        ]
      },
      "Authentication": {
        "properties": {
          "accessToken": {
            "description": "Contains the security credentials for a login session and identifies the user.",
            "type": "string"
          },
          "expiresIn": {
            "description": "TTL (time-to-live) in seconds for the access token.",
            "type": "integer"
          },
          "refreshExpiresIn": {
            "description": "TTL (time-to-live) in seconds for the refresh token.",
            "type": "integer"
          },
          "refreshToken": {
            "description": "A kind of token that can be used to obtain a renewed access token.",
            "type": "string"
          },
          "tokenType": {
            "description": "The access token type.",
            "enum": [
              "Bearer"
            ],
            "type": "string"
          }
        },
        "required": [
          "accessToken",
          "refreshToken"
        ],
        "type": "object"
      },
      "AuthenticationRefreshRequest": {
        "properties": {
          "refreshToken": {
            "description": "The refresh token returned from a previous authentication request.",
            "type": "string"
          }
        },
        "required": [
          "refreshToken"
        ],
        "type": "object"
      },
      "AuthenticationRequest": {
        "properties": {
          "userIdentifier": {
            "description": "Unique integer used to identify a user.",
            "example": "Qw**********",
            "type": "string"
          },
          "userSecret": {
            "description": "A personal code that identifies an authorized user of the API endpoint.",
            "example": "Zj**********",
            "type": "string"
          }
        },
        "required": [
          "userIdentifier",
          "userSecret"
        ],
        "type": "object"
      },
      "AuthenticationResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Authentication"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "AuthorizeJobItemRequest": {
        "description": "Indicates which workflow to authorize for a given locale.",
        "properties": {
          "targetLocaleId": {
            "description": "The locale identifier to use when indicating the locale to authorize content for. If `targetLocaleId` is specified, then `workflowUid` is required as well. Both can be omitted, and the default workflow for that locale will be used.",
            "type": "string"
          },
          "workflowUid": {
            "description": "The UID of the workflow to authorize content into.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuthorizeJobRequest": {
        "properties": {
          "localeWorkflows": {
            "items": {
              "$ref": "#/components/schemas/AuthorizeJobItemRequest"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AttachmentListEntityResponse": {
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "description": "attachemnts",
                        "items": {
                          "$ref": "#/components/schemas/AttachmentResponseItem"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "description": "total number of attachemnts",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            ]
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "AttachmentResponseItem": {
        "properties": {
          "attachmentJobUid": {
            "description": "The unique identifier of the attachment.",
            "format": "uid",
            "type": "string"
          },
          "name": {
            "description": "The name of the attachemnt.",
            "type": "string"
          },
          "description": {
            "description": "The description of the attachment.",
            "type": "string"
          },
          "createdDate": {
            "description": "The UTC value of the date the attachemnt was uploaded.",
            "example": "2018-03-30T12:58:22Z",
            "format": "date-time",
            "type": "string"
          },
          "createdByUserUid": {
            "description": "The unique identifier of user whom upload attachment",
            "format": "uid",
            "example": "c297ff10f584",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateAttachmentResponse": {
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "attachmentUid": {
                        "description": "The unique identifier of the attachment.",
                        "format": "uid",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the attachment.",
                        "type": "string"
                      },
                      "description": {
                        "description": "The description of the attachment.",
                        "type": "string"
                      },
                      "createdDate": {
                        "description": "The UTC value of the date the attachment was uploaded.",
                        "example": "2018-03-30T12:58:22Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "createdByUserUid": {
                        "description": "The unique identifier of user whom upload attachment.",
                        "format": "uid",
                        "example": "c297ff10f584",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            ]
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "BatchStatus": {
        "description": "The status of the Batch",
        "enum": [
          "DRAFT",
          "ADDING_FILES",
          "EXECUTING",
          "COMPLETED"
        ],
        "type": "string"
      },
      "BatchItemStatus": {
        "description": "The status of the BatchItem",
        "enum": [
          "DRAFT",
          "UPLOADING",
          "UPLOAD_FAILED",
          "ATTACHING",
          "ATTACH_FAILED",
          "COMPLETED",
          "CANCELED"
        ],
        "type": "string"
      },
      "Batch": {
        "description": "The Job Batch is a session for uploading multiple files into tms, attaching them to a translationJob and authorizing this job.",
        "properties": {
          "batchUid": {
            "description": "A unique identifier for a batch.",
            "format": "uid",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/BatchStatus"
          },
          "authorized": {
            "description": "The flag showing if authorizing job is requested for this Batch",
            "type": "boolean"
          },
          "translationJobUid": {
            "description": "The UID of the translationJob",
            "format": "uid",
            "type": "string"
          },
          "projectId": {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "format": "uid",
            "type": "string"
          },
          "createdDate": {
            "description": "The UTC value of the date the batch was created.",
            "example": "2015-11-21T01:51:17.000Z",
            "format": "date-time",
            "type": "string"
          },
          "modifiedDate": {
            "description": "The UTC value of the date the batch was modified.",
            "example": "2015-11-21T01:51:17.000Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BatchItemV1": {
        "description": "Associates an uploaded file with particular Batch. BatchItem is handled",
        "properties": {
          "errors": {
            "description": "A list of errors occured while uploading or attaching file linked to this batchItem",
            "type": "string"
          },
          "fileUri": {
            "description": "Uri of the file linked to the Batch",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/BatchItemStatus"
          },
          "targetLocales": {
            "items": {
              "$ref": "#/components/schemas/BatchItemLocaleV1"
            },
            "type": "array"
          },
          "updatedDate": {
            "description": "The UTC value of the date the batch item was updated.",
            "example": "2015-11-21T01:51:17.000Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BatchItemV2": {
        "description": "Associates an uploaded file with particular Batch. BatchItem is handled",
        "properties": {
          "errors": {
            "description": "A list of errors occured while uploading or attaching file linked to this batchItem",
            "type": "string"
          },
          "fileUri": {
            "description": "Uri of the file linked to the Batch",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/BatchItemStatus"
          },
          "targetLocales": {
            "items": {
              "$ref": "#/components/schemas/BatchItemLocaleV2"
            },
            "type": "array"
          },
          "updatedDate": {
            "description": "The UTC value of the date the batch item was updated.",
            "example": "2015-11-21T01:51:17.000Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BatchItemLocaleV1": {
        "description": "A smartling locale which file should be authorized to",
        "properties": {
          "localeId": {
            "description": "Smartling locale identifier",
            "type": "string"
          },
          "stringsAdded": {
            "description": "Number of strings added to the translationJob from this file",
            "type": "integer"
          },
          "stringsSkipped": {
            "description": "Number of strings not added to the translationJob from this file",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BatchItemLocaleV2": {
        "description": "A smartling locale which the file should be authorized and translated into",
        "properties": {
          "localeId": {
            "description": "Smartling locale identifier",
            "type": "string"
          },
          "stringsAdded": {
            "description": "Number of strings added to the translationJob from this file",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CreateBatchRequestV1": {
        "description": "The payload to use when creating a job batch.",
        "properties": {
          "authorize": {
            "description": "if the set is true then the job will be authorized when uploaded and attach processes completed for all files in the batch.",
            "type": "boolean"
          },
          "translationJobUid": {
            "description": "The UID of the previously created translation job.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateBatchRequestV2": {
        "description": "The payload to use when creating a job batch.",
        "required": [
          "authorize",
          "translationJobUid",
          "fileUris"
        ],
        "properties": {
          "authorize": {
            "description": "if the set is true then the job will be authorized when uploaded and attach processes completed for all files in the batch.",
            "type": "boolean"
          },
          "translationJobUid": {
            "description": "The UID of the previously created translation job.",
            "type": "string"
          },
          "fileUris": {
            "description": "A list of File URI's to be uploaded later",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "localeWorkflows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocaleWorkflow"
            }
          }
        },
        "type": "object"
      },
      "CreateBatchResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "batchUid": {
                        "description": "The UID of the created batch.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "description": "Info about created batch."
      },
      "ListBatchesResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/Batch"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "description": "number of batches in the current rsponse",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "description": "A list of found, filtered and sorted batches"
      },
      "BatchActionRequestV1": {
        "description": "Describes the action to be done with the Batch",
        "properties": {
          "action": {
            "enum": [
              "execute"
            ],
            "type": "string"
          },
          "localeWorkflows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocaleWorkflow"
            }
          }
        },
        "type": "object"
      },
      "BatchActionRequestV2": {
        "description": "Describes the action to be done with the Batch",
        "required": [
          "action",
          "fileUri"
        ],
        "properties": {
          "action": {
            "enum": [
              "CANCEL_FILE",
              "REGISTER_FILE"
            ],
            "type": "string"
          },
          "fileUri": {
            "description": "fileUri to be cancelled or registred",
            "type": "string"
          },
          "reason": {
            "description": "any text to describe the reason the file is canceled",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BatchStatusResponseV1": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "status": {
                        "$ref": "#/components/schemas/BatchStatus"
                      },
                      "authorized": {
                        "description": "The flag showing if authorizing job is requested for this Batch",
                        "type": "boolean"
                      },
                      "generalErrors": {
                        "description": "Describes a list of errors which occurred while batch processing",
                        "type": "string"
                      },
                      "projectId": {
                        "description": "The UID of the project",
                        "format": "uid",
                        "type": "string"
                      },
                      "translationJobUid": {
                        "description": "The UID of the translationJob",
                        "format": "uid",
                        "type": "string"
                      },
                      "updatedDate": {
                        "description": "The UTC value of the date the batch was updated.",
                        "example": "2015-11-21T01:51:17.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "files": {
                        "items": {
                          "$ref": "#/components/schemas/BatchItemV1"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "description": "Batch info with detailed statuses of all batch items and their locales"
      },
      "BatchStatusResponseV2": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "status": {
                        "$ref": "#/components/schemas/BatchStatus"
                      },
                      "authorized": {
                        "description": "The flag showing if authorizing job is requested for this Batch",
                        "type": "boolean"
                      },
                      "generalErrors": {
                        "description": "Describes a list of errors which occurred while batch processing",
                        "type": "string"
                      },
                      "projectId": {
                        "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
                        "format": "uid",
                        "type": "string"
                      },
                      "translationJobUid": {
                        "description": "The UID of the translationJob",
                        "format": "uid",
                        "type": "string"
                      },
                      "updatedDate": {
                        "description": "The UTC value of the date the batch was updated.",
                        "example": "2015-11-21T01:51:17.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "files": {
                        "items": {
                          "$ref": "#/components/schemas/BatchItemV2"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "description": "Batch info with detailed statuses of all batch items and their locales"
      },
      "Binding": {
        "description": "String to context binding",
        "properties": {
          "anchors": {
            "description": "Wrapper HTML element anchor numbers",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "contextPosition": {
            "description": "Binding position in context",
            "type": "integer"
          },
          "bindingUid": {
            "description": "Unique identifier for the context binding.",
            "type": "string"
          },
          "contextUid": {
            "description": "Unique identifier for the context.",
            "type": "string"
          },
          "coordinates": {
            "$ref": "#/components/schemas/Coordinates"
          },
          "stringHashcode": {
            "description": "Unique identifier for the translatable.",
            "type": "string"
          },
          "timecode": {
            "$ref": "#/components/schemas/Timecode"
          }
        },
        "required": [
          "contextUid",
          "stringHashcode"
        ],
        "type": "object"
      },
      "BindingsRequest": {
        "properties": {
          "bindings": {
            "description": "List of strings-to-context bindings. List size is limited to 150 items.",
            "items": {
              "description": "Binding request",
              "properties": {
                "contextUid": {
                  "description": "Unique identifier for the context.",
                  "format": "uuid",
                  "type": "string"
                },
                "stringHashcode": {
                  "description": "Unique identifier for the translatable.",
                  "format": "hash",
                  "type": "string"
                },
                "coordinates": {
                  "$ref": "#/components/schemas/Coordinates"
                },
                "selector": {
                  "description": "Values for \"data-sl-anchor\" attributes of HTML elements.",
                  "properties": {
                    "anchors": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "timecode": {
                  "$ref": "#/components/schemas/Timecode"
                }
              },
              "required": [
                "contextUid",
                "stringHashcode"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BindingsResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/Binding"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "items"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "BatchBindingsRequest": {
        "type": "object",
        "description": "Parameters for bindings search",
        "properties": {
          "stringHashcodes": {
            "description": "List of the hashcodes for the strings to get bindings for.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "contentFileUri": {
            "description": "Content file name to get bindings for.",
            "type": "string"
          },
          "contextUid": {
            "description": "ContextUID to get bindings for.",
            "format": "uuid",
            "type": "string"
          },
          "bindingUids": {
            "description": "List of unique binding identifiers.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "DeleteBatchBindingsRequest": {
        "type": "object",
        "description": "Parameters for bindings to delete search",
        "properties": {
          "stringHashcodes": {
            "description": "List of the hashcodes for the strings to delete bindings for.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "contentFileUri": {
            "description": "Content file name to delete bindings for.",
            "type": "string"
          },
          "contextUid": {
            "description": "ContextUID to delete bindings for.",
            "format": "uuid",
            "type": "string"
          },
          "bindingUids": {
            "description": "Unique binding identifier to delete.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "BindingListResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/Binding"
                        },
                        "type": "array"
                      },
                      "offset": {
                        "description": "Result set is partial, if not empty. To retreive everything, request should be repeated with offset value.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "items"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "CancelJobRequest": {
        "description": "The payload to use when cancelling a job.",
        "properties": {
          "reason": {
            "description": "Optional field that can be used to indicate the reason the job was cancelled.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ContentProgressReportItemResponse": {
        "properties": {
          "targetLocaleDescription": {
            "type": "string"
          },
          "targetLocaleId": {
            "type": "string"
          },
          "unuathorizedProgressReport": {
            "$ref": "#/components/schemas/StringCountWordCountResponse"
          },
          "workflowProgressReportList": {
            "items": {
              "$ref": "#/components/schemas/WorkflowProgressReportItemResponse"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Context": {
        "description": "Basic information about the context.",
        "properties": {
          "contextType": {
            "description": "Type of context file. Currently, **HTML**, **IMAGE** or **VIDEO** types are supported.",
            "enum": [
              "IMAGE",
              "HTML",
              "VIDEO"
            ],
            "type": "string"
          },
          "contextUid": {
            "description": "Unique identifier for the context file",
            "type": "string"
          },
          "name": {
            "description": "File name for **IMAGE** context, URL for **HTML** Context and video URL for **VIDEO** context.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ContextListResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/Context"
                        },
                        "type": "array"
                      },
                      "offset": {
                        "description": "Result set is partial, if not empty. To retreive everything, request should be repeated with offset value.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "items"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "ContextResponse": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Code of the completed operation.",
                "enum": [
                  "SUCCESS"
                ],
                "type": "string"
              },
              "data": {
                "description": "Basic information about the context.",
                "properties": {
                  "contextType": {
                    "description": "Type of context file.",
                    "enum": [
                      "IMAGE",
                      "HTML",
                      "VIDEO"
                    ],
                    "type": "string"
                  },
                  "contextUid": {
                    "description": "Unique identifier for the context.",
                    "type": "string"
                  },
                  "created": {
                    "description": "A date when the context was created. Format: ISO8601 date and time string",
                    "format": "date-time",
                    "type": "string"
                  },
                  "name": {
                    "description": "File name for IMAGE context, URL for HTML Context and video URL for VIDEO context.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Coordinates": {
        "description": "Describes the location and size of a box enclosing the string in a context image. ‘top’ and ‘left’ are the distances in pixels of the top left corner of the string (from the top left of the image). ‘width’ and ‘height’ are the dimensions of the string in pixels. This information is used to highlight the position of the string when displaying the context image in the translation interface (CAT tool). If coordinates are not provided, Smartling will attempt to locate the string on the image using Optical Character Recognition. If OCR fails, coordinates will default to 0, 0, 0, 0. This meaans that the image will be displayed when the string is translated, without any highlighting to show the position of the string.",
        "properties": {
          "height": {
            "type": "number"
          },
          "left": {
            "type": "number"
          },
          "top": {
            "type": "number"
          },
          "width": {
            "type": "number"
          }
        },
        "required": [
          "top",
          "left",
          "height",
          "width"
        ],
        "type": "object"
      },
      "CreateBindingsResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "created": {
                        "properties": {
                          "items": {
                            "items": {
                              "$ref": "#/components/schemas/Binding"
                            },
                            "type": "array"
                          },
                          "totalCount": {
                            "type": "integer"
                          }
                        },
                        "required": [
                          "items"
                        ],
                        "type": "object"
                      },
                      "errors": {
                        "properties": {
                          "items": {
                            "items": {
                              "properties": {
                                "message": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "message"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "totalCount": {
                            "type": "integer"
                          }
                        },
                        "required": [
                          "items"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "created"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "CreateJobRequest": {
        "description": "The payload to use when creating a job.",
        "properties": {
          "jobName": {
            "description": "The name of the job to create. It must be unique within the Smartling project. `jobName` is **required**.",
            "example": "This is my job name.",
            "maxLength": 170,
            "type": "string"
          },
          "targetLocaleIds": {
            "description": "The array of `localeId`s to be used when creating the job. The locales specified must be valid within the Smartling project.",
            "example": [
              "ru-RU"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "description": "The description of the job. The description is limited to 2,000 characters.",
            "example": "This is my job description.",
            "type": "string"
          },
          "dueDate": {
            "description": "The date the job is requested to be completed by.",
            "example": "2020-11-21T01:51:17Z",
            "format": "date-time",
            "type": "string"
          },
          "referenceNumber": {
            "description": "Customer specific number/identifier for the job.",
            "example": "referenceNumb1",
            "type": "string"
          },
          "callbackUrl": {
            "description": "The URL for Smartling to invoke when the job is completed.",
            "maxLength": 8192,
            "example": "https://myDomain.com",
            "type": "string"
          },
          "callbackMethod": {
            "description": "The HTTP method to call (GET|POST) when invoking the `callbackUrl`.",
            "example": "GET",
            "type": "string"
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldBasicRequest"
            },
            "description": "Custom fields assigned to the project which job is created in. Validation on custom fields is done in scope of that request."
          }
        },
        "type": "object"
      },
      "CreateJobFuzzyReportRequest": {
        "description": "The payload to use when generating a job fuzzy report.",
        "properties": {
          "contentType": {
            "enum": [
              "TRANSLATION",
              "ALL_CONTENT",
              "CLAIMING",
              "UNAUTHORIZED"
            ],
            "type": "string",
            "default": "ALL_CONTENT"
          },
          "tags": {
            "example": [
              "tag1",
              "tag2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "CreateJobCostReportRequest": {
        "description": "The payload to use when generating a job cost report.",
        "properties": {
          "contentType": {
            "enum": [
              "TRANSLATION",
              "ALL_CONTENT",
              "CLAIMING",
              "UNAUTHORIZED"
            ],
            "type": "string",
            "default": "ALL_CONTENT"
          },
          "tags": {
            "example": [
              "tag1",
              "tag2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "localeWorkflows": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "targetLocaleId": {
                  "type": "string"
                },
                "workflowUid": {
                  "type": "string"
                }
              }
            }
          },
          "fuzzyProfileUid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomFieldBasicRequest": {
        "type": "object",
        "properties": {
          "fieldUid": {
            "type": "string",
            "description": "Custom field unique identifier.",
            "example": "3rrwchzmjf24"
          },
          "fieldValue": {
            "type": "string",
            "description": "Custom field value.",
            "example": "Finance Dept"
          }
        }
      },
      "HashcodesByLocaleResponse": {
        "type": "object",
        "properties": {
          "localeId": {
            "description": "Smartling locale identifier.",
            "type": "string"
          },
          "hashcodes": {
            "description": "The array of hashcodes.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "CustomFieldBasicResponse": {
        "type": "object",
        "properties": {
          "fieldUid": {
            "type": "string",
            "description": "Custom field unique identifier.",
            "example": "3rrwchzmjf24"
          },
          "fieldName": {
            "type": "string",
            "description": "Custom field name.",
            "example": "Department Name"
          },
          "fieldValue": {
            "type": "string",
            "description": "Custom field value.",
            "example": "Finance Dept"
          }
        }
      },
      "CreateStringResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/CreatedString"
                        },
                        "type": "array"
                      },
                      "processUid": {
                        "description": "If the request takes longer than 60 seconds to process, a `202` response will be returned, indicating the request has not failed, but is not yet complete. Use the processUid value to check the status of the request using the Check Create String Status request.",
                        "type": "string"
                      },
                      "stringCount": {
                        "description": "Total number of strings captured as a result of the request.",
                        "type": "number"
                      },
                      "totalCount": {
                        "type": "number"
                      },
                      "wordCount": {
                        "description": "Total number of words captured as a result of the request.",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "CreateStringStatusResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "createdDate": {
                        "description": "Total number of strings captured as a result of the request.",
                        "type": "string"
                      },
                      "modifiedDate": {
                        "description": "If the request takes longer than 60 seconds to process, a `202` response will be returned, indicating the request has not failed, but is not yet complete. Use the processUid value to check the status of the request using the Check Create String Status request.",
                        "type": "string"
                      },
                      "processState": {
                        "description": "State of the request",
                        "enum": [
                          "OPEN",
                          "CLOSED",
                          "FAILED"
                        ],
                        "type": "string"
                      },
                      "processStatistics": {
                        "description": "Information on the created or updated string",
                        "properties": {
                          "errored": {
                            "description": "strings that had errors",
                            "type": "string"
                          },
                          "processed": {
                            "description": "strings processed",
                            "type": "string"
                          },
                          "requested": {
                            "description": "strings requested",
                            "type": "string"
                          },
                          "skipped": {
                            "description": "strings skipped",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "processUid": {
                        "description": "Unique identifer for a create string request.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "CreatedString": {
        "description": "Information on the created or updated string",
        "properties": {
          "hashcode": {
            "description": "The generated unique idenitfier for this created or updated string.",
            "type": "string"
          },
          "overWritten": {
            "description": "Idenitfies if the string was already in the system.",
            "type": "string"
          },
          "parsedStringText": {
            "description": "The text for this string used to define its uniqueness in the Smartling system.  This is after placeholders have been processed and escaping normalization has been applied.",
            "type": "string"
          },
          "stringText": {
            "description": "The text for this string",
            "type": "string"
          },
          "variant": {
            "description": "String variant",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LocaleHashcodeResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "totalCount": {
                        "description": "Total amount of elements",
                        "type": "integer"
                      },
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "targetLocaleId": {
                              "type": "string",
                              "description": "The locale identidier.",
                              "example": "de-DE"
                            },
                            "hashcode": {
                              "description": "Unique identifier for the translatable.",
                              "format": "hash",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "DetailedJobResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "callbackMethod": {
                        "description": "The http method (GET|POST) to use when Smartling invokes the callback URL upon job completion.",
                        "type": "string"
                      },
                      "callbackUrl": {
                        "description": "The callback URL to invoke when a job is completed.",
                        "type": "string"
                      },
                      "createdByUserUid": {
                        "description": "The userUid of whom created the job.",
                        "type": "string"
                      },
                      "createdDate": {
                        "description": "The UTC value of the date the job was created.",
                        "example": "2015-11-21T01:51:17.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "description": {
                        "description": "The description of the job.",
                        "type": "string"
                      },
                      "dueDate": {
                        "description": "The UTC value of the due date for the job.",
                        "example": "2015-11-21T01:51:17.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "firstCompletedDate": {
                        "description": "The UTC value of when the job was first completed.",
                        "example": "2015-11-21T01:51:17.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "firstAuthorizedDate": {
                        "description": "The UTC value of when the job was first authorized.",
                        "example": "2015-01-21T01:51:17.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "jobName": {
                        "description": "The name of the job.",
                        "type": "string"
                      },
                      "jobNumber": {
                        "description": "The account level unique number of the job. Consist of unique short prefix and sequence number.",
                        "example": "SMTL-123",
                        "type": "string"
                      },
                      "priority": {
                        "description": "The account level unique integer value that shows the priority of the job compared to others.",
                        "example": 238,
                        "type": "integer"
                      },
                      "referenceNumber": {
                        "description": "Some text to reference job in external systems.",
                        "type": "string"
                      },
                      "jobStatus": {
                        "description": "The status of the job.",
                        "enum": [
                          "DRAFT",
                          "AWAITING_AUTHORIZATION",
                          "IN_PROGRESS",
                          "COMPLETED",
                          "CANCELLED",
                          "CLOSED",
                          "DELETED"
                        ],
                        "type": "string"
                      },
                      "lastCompletedDate": {
                        "description": "The UTC value of when the job was last completed.",
                        "example": "2015-11-21T01:51:17.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "lastAuthorizedDate": {
                        "description": "The UTC value of when the job was last authorized.",
                        "example": "2015-12-21T01:51:17.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "modifiedByUserUid": {
                        "description": "The userUid of whom last modified the job.",
                        "type": "string"
                      },
                      "modifiedDate": {
                        "description": "The UTC value of the date the job was modified.",
                        "example": "2015-11-21T01:51:17.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "sourceFiles": {
                        "description": "List of source files of the job. Limited to **300** unordered entries. To get all of the job files use [List files within job](/#operation/getJobFilesList) API",
                        "items": {
                          "$ref": "#/components/schemas/SourceFile"
                        },
                        "type": "array"
                      },
                      "targetLocaleIds": {
                        "description": "The array of localeIds for the job.",
                        "items": {
                          "example": "de-DE",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "customFields": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/CustomFieldBasicResponse"
                        }
                      },
                      "translationJobUid": {
                        "description": "The unique identifier created for the job.",
                        "type": "string"
                      },
                      "issues": {
                        "$ref": "#/components/schemas/IssuesCount"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "JobFiledAddError423Response": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occured.",
                "enum": [
                  "VALIDATION_ERROR"
                ],
                "type": "string"
              },
              "errors": {
                "items": {
                  "$ref": "#/components/schemas/Error"
                },
                "type": "array"
              }
            },
            "required": [
              "code",
              "errors"
            ],
            "type": "object"
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "EmptyResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "description": "Always null.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "key": {
            "example": "general_error",
            "type": "string"
          },
          "message": {
            "example": "Unexpected server error",
            "type": "string"
          },
          "details": {
            "example": {},
            "type": "object"
          }
        },
        "required": [
          "key",
          "message"
        ]
      },
      "Error400Response": {
        "type": "object",
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occured.",
                "enum": [
                  "VALIDATION_ERROR"
                ],
                "type": "string"
              },
              "errors": {
                "items": {
                  "$ref": "#/components/schemas/Error"
                },
                "type": "array"
              }
            },
            "required": [
              "code",
              "errors"
            ],
            "type": "object"
          }
        },
        "required": [
          "response"
        ]
      },
      "Error401Response": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occured.",
                "enum": [
                  "AUTHENTICATION_ERROR",
                  "AUTHORIZATION_ERROR"
                ],
                "type": "string"
              },
              "errors": {
                "items": {
                  "$ref": "#/components/schemas/Error"
                },
                "type": "array"
              }
            },
            "required": [
              "code",
              "errors"
            ],
            "type": "object"
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "Error404Response": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occured.",
                "enum": [
                  "NOT_FOUND_ERROR"
                ],
                "type": "string"
              },
              "errors": {
                "items": {
                  "$ref": "#/components/schemas/Error"
                },
                "type": "array"
              }
            },
            "required": [
              "code",
              "errors"
            ],
            "type": "object"
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "Error423Response": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occured.",
                "enum": [
                  "RESOURCE_LOCKED"
                ],
                "type": "string"
              },
              "errors": {
                "items": {
                  "$ref": "#/components/schemas/Error"
                },
                "type": "array"
              }
            },
            "required": [
              "code",
              "errors"
            ],
            "type": "object"
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "Error429Response": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occured.",
                "enum": [
                  "MAX_OPERATIONS_LIMIT_EXCEEDED"
                ],
                "type": "string"
              },
              "errors": {
                "items": {
                  "$ref": "#/components/schemas/Error"
                },
                "type": "array"
              }
            },
            "required": [
              "code",
              "errors"
            ],
            "type": "object"
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "Error500Response": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occured.",
                "enum": [
                  "GENERAL_ERROR",
                  "MAINTENANCE_MODE_ERROR"
                ],
                "type": "string"
              },
              "errors": {
                "items": {
                  "$ref": "#/components/schemas/Error"
                },
                "type": "array"
              }
            },
            "required": [
              "code",
              "errors"
            ],
            "type": "object"
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "EstimateJobReportResponse": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occured.",
                "enum": [
                  "GENERAL_ERROR",
                  "MAINTENANCE_MODE_ERROR"
                ],
                "type": "string"
              },
              "data": {
                "items": {
                  "$ref": "#/components/schemas/EstimateJobReport"
                },
                "type": "array"
              }
            },
            "required": [
              "code",
              "data"
            ],
            "type": "object"
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "EstimateJobReport": {
        "type": "object",
        "properties": {
          "reportUid": {
            "type": "string"
          },
          "schemaType": {
            "type": "string"
          },
          "reportType": {
            "type": "string"
          },
          "schema": {
            "type": "string"
          },
          "reportStatus": {
            "type": "string"
          },
          "totalStrings": {
            "type": "integer"
          },
          "projectId": {
            "type": "string"
          },
          "creatorUserUid": {
            "type": "string"
          },
          "creatorUserRole": {
            "type": "string"
          },
          "contentCoverage": {
            "type": "string"
          },
          "creatorAgencyUid": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "YYYY-MM-DDThh:mm:ssZ"
          },
          "totalWordCount": {
            "type": "string"
          },
          "totalWeightedWordCount": {
            "type": "integer"
          },
          "priceInformation": {
            "type": "string"
          },
          "localeEstimates": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EstimateJobGenericReportResponse": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occured.",
                "enum": [
                  "GENERAL_ERROR",
                  "MAINTENANCE_MODE_ERROR"
                ],
                "type": "string"
              },
              "data": {
                "items": {
                  "$ref": "#/components/schemas/EstimateJobGenericReport"
                },
                "type": "array"
              }
            },
            "required": [
              "code",
              "data"
            ],
            "type": "object"
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "EstimateJobGenericReport": {
        "type": "object",
        "properties": {
          "reportUid": {
            "type": "string"
          },
          "reportType": {
            "type": "string"
          },
          "reportStatus": {
            "type": "string"
          }
        }
      },
      "EstimateJobReportStatusResponse": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occured.",
                "enum": [
                  "GENERAL_ERROR",
                  "MAINTENANCE_MODE_ERROR"
                ],
                "type": "string"
              },
              "data": {
                "$ref": "#/components/schemas/EstimateJobReportStatus"
              }
            },
            "required": [
              "code",
              "data"
            ],
            "type": "object"
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "EstimateJobReportStatus": {
        "type": "object",
        "properties": {
          "reportUid": {
            "type": "string"
          },
          "reportType": {
            "type": "string"
          },
          "reportStatus": {
            "type": "string"
          },
          "totalStrings": {
            "type": "integer"
          },
          "percentComplete": {
            "type": "integer"
          },
          "createdDate": {
            "type": "string",
            "format": "YYYY-MM-DDThh:mm:ssZ"
          }
        }
      },
      "EstimateJobReportTagsResponse": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occured.",
                "enum": [
                  "GENERAL_ERROR",
                  "MAINTENANCE_MODE_ERROR"
                ],
                "type": "string"
              },
              "data": {
                "$ref": "#/components/schemas/EstimateJobReportTags"
              }
            },
            "required": [
              "code",
              "data"
            ],
            "type": "object"
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "EstimateJobReportTags": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FileType": {
        "type": "string",
        "description": "A unique identifier for the file type.",
        "enum": [
          "android",
          "ios",
          "gettext",
          "html",
          "java_properties",
          "xliff",
          "xml",
          "json",
          "docx",
          "pptx",
          "xlsx",
          "idml",
          "qt",
          "resx",
          "plain_text",
          "csv",
          "srt",
          "stringsdict",
          "xls",
          "doc",
          "ppt",
          "pres",
          "madcap",
          "yaml",
          "markdown"
        ]
      },
      "TranslationJobFile": {
        "properties": {
          "data": {
            "properties": {
              "uri": {
                "description": "File uri",
                "type": "string"
              },
              "localeIds": {
                "description": "List of locale ids",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "fileUid": {
                "description": "File uid",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "FilesAPILastModifiedAllLocalesSuccessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/FilesAPILastModifiedResponseItem"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "description": "",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "totalCount",
                      "items"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "FilesAPILastModifiedResponseItem": {
        "properties": {
          "lastModified": {
            "description": "The date the file was last modified for the specified locale",
            "format": "YYYY-MM-DDThh:mm:ssZ",
            "type": "string"
          },
          "localeId": {
            "description": "A unique identifier for the uploaded file",
            "type": "string"
          }
        },
        "required": [
          "localeId",
          "lastModified"
        ],
        "type": "object"
      },
      "FilesAPILastModifiedSingleLocaleSuccessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/FilesAPILastModifiedResponseItem"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "FilesAPIListFileItem": {
        "example": {
          "created": "2016-12-31T00:00:00Z",
          "fileType": "json",
          "fileUri": "file.json",
          "hasInstructions": false,
          "lastUploaded": "2016-01-01T00:00:00Z"
        },
        "properties": {
          "created": {
            "description": "The time and date of the first upload",
            "format": "YYYY-MM-DDThh:mm:ssZ",
            "type": "string"
          },
          "fileType": {
            "description": "The type of file",
            "enum": [
              "android",
              "ios",
              "gettext",
              "html",
              "java_properties",
              "xliff",
              "xml",
              "json",
              "docx",
              "pptx",
              "xlsx",
              "idml",
              "qt",
              "resx",
              "plain_text",
              "csv",
              "srt",
              "stringsdict",
              "xls",
              "doc",
              "ppt",
              "pres",
              "madcap",
              "yaml",
              "markdown"
            ],
            "type": "string"
          },
          "fileUri": {
            "description": "A unique identifier for the uploaded file",
            "type": "string"
          },
          "hasInstructions": {
            "description": "Whether translator instructions have been captured for the file.",
            "type": "boolean"
          },
          "lastUploaded": {
            "description": "The time and date of the last upload",
            "format": "YYYY-MM-DDThh:mm:ssZ",
            "type": "string"
          }
        },
        "required": [
          "fileUri",
          "created",
          "lastUploaded",
          "fileType",
          "hasInstructions"
        ],
        "type": "object"
      },
      "FilesAPIListFileTypesSuccessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/FileType"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "items"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ],
            "example": {
              "application/json": {
                "response": {
                  "code": "SUCCESS",
                  "data": {
                    "items": {
                      "anyOf": [
                        "android",
                        "ios",
                        "gettext"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "FilesAPIListFilesSuccessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/FilesAPIListFileItem"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "description": "The number of files that match your specified criteria",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "totalCount",
                      "items"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "FilesAPIStatusAllLocalesItem": {
        "properties": {
          "authorizedStringCount": {
            "description": "The number of strings in the uploaded file that are authorized (available for translation)",
            "type": "integer"
          },
          "authorizedWordCount": {
            "description": "The number of words in the uploaded file that are authorized (available for translation)",
            "type": "integer"
          },
          "completedStringCount": {
            "description": "The number of published strings in the uploaded file",
            "type": "integer"
          },
          "completedWordCount": {
            "description": "The number of published words in the uploaded file",
            "type": "integer"
          },
          "excludedStringCount": {
            "description": "The number of excluded strings in the uploaded file",
            "type": "integer"
          },
          "excludedWordCount": {
            "description": "The number of excluded words in the uploaded file",
            "type": "integer"
          },
          "localeId": {
            "type": "string"
          }
        },
        "required": [
          "localeId",
          "authorizedStringCount",
          "authorizedWordCount",
          "completedStringCount",
          "completedWordCount",
          "excludedStringCount",
          "excludedWordCount"
        ],
        "type": "object"
      },
      "FilesAPIStatusAllLocalesSuccessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "created": {
                        "description": "The time and date of the first upload",
                        "format": "YYYY-MM-DDThh:mm:ssZ",
                        "type": "string"
                      },
                      "fileType": {
                        "description": "The type of file",
                        "enum": [
                          "android",
                          "ios",
                          "gettext",
                          "html",
                          "java_properties",
                          "xliff",
                          "xml",
                          "json",
                          "docx",
                          "pptx",
                          "xlsx",
                          "idml",
                          "qt",
                          "resx",
                          "plain_text",
                          "csv",
                          "srt",
                          "stringsdict",
                          "xls",
                          "doc",
                          "ppt",
                          "pres",
                          "madcap",
                          "yaml",
                          "markdown"
                        ],
                        "type": "string"
                      },
                      "fileUri": {
                        "description": "A unique identifier for the uploaded file",
                        "type": "string"
                      },
                      "hasInstructions": {
                        "description": "Whether translator instructions have been captured for the file",
                        "type": "boolean"
                      },
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/FilesAPIStatusAllLocalesItem"
                        },
                        "type": "array"
                      },
                      "lastUploaded": {
                        "description": "The time and date of the last upload",
                        "format": "YYYY-MM-DDThh:mm:ssZ",
                        "type": "string"
                      },
                      "parserVersion": {
                        "description": "Records the version of Smartling's File Parser used to parse the file",
                        "type": "integer"
                      },
                      "totalCount": {
                        "description": "Total number of locales status is returned for",
                        "type": "integer"
                      },
                      "totalStringCount": {
                        "description": "The number of strings in the uploaded file, minus any excluded content",
                        "type": "integer"
                      },
                      "totalWordCount": {
                        "description": "The number of words in the uploaded file, minus any excluded content",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "fileUri",
                      "totalStringCount",
                      "totalWordCount",
                      "fileType",
                      "lastUploaded",
                      "totalCount",
                      "parserVersion",
                      "hasInstructions",
                      "items"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "FilesAPIStatusSingleLocaleSuccessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "authorizedStringCount": {
                        "description": "The number of strings in the uploaded file that are authorized (available for translation)",
                        "type": "integer"
                      },
                      "authorizedWordCount": {
                        "description": "The number of words in the uploaded file that are authorized (available for translation)",
                        "type": "integer"
                      },
                      "completedStringCount": {
                        "description": "The number of published strings in the uploaded file",
                        "type": "integer"
                      },
                      "completedWordCount": {
                        "description": "The number of published words in the uploaded file",
                        "type": "integer"
                      },
                      "created": {
                        "description": "The time and date of the first upload",
                        "format": "YYYY-MM-DDThh:mm:ssZ",
                        "type": "string"
                      },
                      "excludedStringCount": {
                        "description": "The number of excluded strings in the uploaded file",
                        "type": "integer"
                      },
                      "excludedWordCount": {
                        "description": "The number of excluded words in the uploaded file",
                        "type": "integer"
                      },
                      "fileType": {
                        "description": "The type of file",
                        "enum": [
                          "android",
                          "ios",
                          "gettext",
                          "html",
                          "java_properties",
                          "xliff",
                          "xml",
                          "json",
                          "docx",
                          "pptx",
                          "xlsx",
                          "idml",
                          "qt",
                          "resx",
                          "plain_text",
                          "csv",
                          "srt",
                          "stringsdict",
                          "xls",
                          "doc",
                          "ppt",
                          "pres",
                          "madcap",
                          "yaml",
                          "markdown"
                        ],
                        "type": "string"
                      },
                      "fileUri": {
                        "description": "A unique identifier for the uploaded file",
                        "type": "string"
                      },
                      "hasInstructions": {
                        "description": "Whether translator instructions have been captured for the file",
                        "type": "boolean"
                      },
                      "lastUploaded": {
                        "description": "The time and date of the last upload",
                        "format": "YYYY-MM-DDThh:mm:ssZ",
                        "type": "string"
                      },
                      "parserVersion": {
                        "description": "Records the version of Smartling's File Parser used to parse the file",
                        "type": "integer"
                      },
                      "totalStringCount": {
                        "description": "The number of strings in the uploaded file, minus any excluded content",
                        "type": "integer"
                      },
                      "totalWordCount": {
                        "description": "The number of words in the uploaded file, minus any excluded content",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "fileUri",
                      "totalStringCount",
                      "totalWordCount",
                      "authorizedStringCount",
                      "authorizedWordCount",
                      "completedStringCount",
                      "completedWordCount",
                      "excludedStringCount",
                      "excludedWordCount",
                      "fileType",
                      "lastUploaded",
                      "created",
                      "parserVersion",
                      "hasInstructions"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "FilesAPITranslationImportSuccessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "stringCount": {
                        "description": "Strings imported",
                        "type": "integer"
                      },
                      "translationImportErrors": {
                        "items": {
                          "$ref": "#/components/schemas/FilesApiTranslationImportErrorItem"
                        },
                        "type": "array"
                      },
                      "wordCount": {
                        "description": "Words imported.",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "wordCount",
                      "stringCount",
                      "translationImportErrors"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "FilesAPIUploadAcceptedResponse": {
        "properties": {
          "code": {
            "enum": [
              "ACCEPTED"
            ],
            "type": "string"
          },
          "data": {
            "properties": {
              "message": {
                "type": "string"
              }
            },
            "required": [
              "message"
            ],
            "type": "object"
          }
        },
        "required": [
          "code",
          "data"
        ],
        "type": "object"
      },
      "FilesAPIUploadSuccessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "overWritten": {
                        "description": "Indicates whether the uploaded file has overwritten an existing file.",
                        "type": "boolean"
                      },
                      "stringCount": {
                        "description": "The number of strings in the uploaded file",
                        "type": "integer"
                      },
                      "wordCount": {
                        "description": "The number of words in the uploaded file",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "overWritten",
                      "stringCount",
                      "wordCount"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "FilesApiTranslationImportErrorItem": {
        "properties": {
          "fileUri": {
            "description": "A unique identifier for the uploaded file",
            "type": "string"
          },
          "importKey": {
            "description": "Key for an imported string affected by the error",
            "type": "string"
          },
          "messages": {
            "description": "Information about an import error",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "stringHashcode": {
            "description": "The hashcode of a string affected by the error",
            "type": "string"
          }
        },
        "required": [
          "importKey",
          "stringHashcode",
          "fileUri",
          "messages"
        ],
        "type": "object"
      },
      "PublishedFilesAPIRecentlyPublishedFilesSuccessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/PublishedFilesAPIRecentlyPublishedFilesResponseItem"
                        }
                      },
                      "totalCount": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "PublishedFilesAPIRecentlyPublishedFilesResponseItem": {
        "properties": {
          "fileUri": {
            "description": "The URI of the file that was published",
            "type": "string"
          },
          "publishDate": {
            "description": "The date the file was published for the specified locale",
            "format": "YYYY-MM-DDThh:mm:ssZ",
            "type": "string"
          },
          "localeId": {
            "description": "Identifier for a locale",
            "type": "string"
          }
        },
        "required": [
          "fileUri",
          "localeId",
          "publishDate"
        ],
        "type": "object"
      },
      "GetProjectTagsResponse": {
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/TagInfo"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            ]
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "GetAccountTagsResponse": {
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/AccountTagInfo"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            ]
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "GetStringsTagsResponse": {
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "properties": {
                            "tags": {
                              "items": {
                                "$ref": "#/components/schemas/TagInfo"
                              },
                              "type": "array"
                            },
                            "stringHashcode": {
                              "example": "stringHashcode",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "example": 1,
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            ]
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "MTTranslateRequest": {
        "properties": {
          "sourceLocaleId": {
            "type": "string",
            "description": "Locale ID of the original text",
            "example": "en-US"
          },
          "targetLocaleId": {
            "type": "string",
            "description": "Locale ID of the requested translation",
            "example": "de-DE"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/MTTranslateItemRequest"
            },
            "type": "array",
            "maxItems": 1000
          }
        },
        "required": [
          "sourceLocaleId",
          "targetLocaleId",
          "items"
        ],
        "type": "object"
      },
      "MTTranslateItemRequest": {
        "properties": {
          "key": {
            "description": "A unique identifier to match results in the response",
            "example": "my-key-1",
            "type": "string",
            "maxLength": 255
          },
          "sourceText": {
            "description": "The text to translate",
            "example": "Text to translate",
            "type": "string",
            "maxLength": 65535
          }
        },
        "required": [
          "key",
          "sourceText"
        ],
        "type": "object"
      },
      "MTTranslateResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/MTTranslateItemResponse"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "items"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "MTTranslateItemResponse": {
        "properties": {
          "key": {
            "description": "A unique identifier from the request",
            "example": "my-key-1",
            "type": "string"
          },
          "translationText": {
            "description": "Translated text. Empty if error is present",
            "example": "Text zum Übersetzen",
            "type": "string"
          },
          "error": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string",
                "description": "Error key of the error",
                "example": "PROVIDER_UNAUTHORIZED"
              },
              "code": {
                "type": "string",
                "description": "Error code of the error",
                "example": "invalid.credentials"
              },
              "message": {
                "type": "string",
                "description": "Error code detailed message",
                "example": "Invalid API Key."
              }
            }
          }
        },
        "required": [
          "key"
        ],
        "type": "object"
      },
      "JobLocalesCompletionDate": {
        "properties": {
          "data": {
            "properties": {
              "completionDate": {
                "description": "The UTC value of when the locale was last completed.",
                "example": "2015-11-21T01:51:17.000Z",
                "format": "date-time",
                "type": "string"
              },
              "targetLocaleId": {
                "description": "The locale identidier.",
                "example": "de-DE",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "JobSchedule": {
        "properties": {
          "data": {
            "properties": {
              "scheduleUid": {
                "description": "schedule universal identifier.",
                "example": "ngahq6dgh4ed",
                "format": "uuid",
                "type": "string"
              },
              "workflowStepUid": {
                "description": "workflow step universal identifier.",
                "example": "568cd2bae16f",
                "format": "uuid",
                "type": "string"
              },
              "dueDate": {
                "description": "due date in milliseconds format.",
                "example": "2020-11-21T01:51:17Z",
                "format": "date-time",
                "type": "string"
              },
              "targetLocaleId": {
                "description": "The locale identidier.",
                "example": "de-DE",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "CustomFields": {
        "properties": {
          "data": {
            "properties": {
              "fieldUid": {
                "description": "custom field universal identifier.",
                "example": "ngahq6dgh4ed",
                "format": "uuid",
                "type": "string"
              },
              "type": {
                "description": "custom field type.",
                "example": "SHORT_TEXT | LONG_TEXT | SELECTBOX | CHECKBOX",
                "type": "string"
              },
              "fieldName": {
                "description": "custom field name.",
                "example": "field-name",
                "type": "boolean"
              },
              "enabled": {
                "description": "is custom field enabled.",
                "example": true,
                "type": "boolean"
              },
              "required": {
                "description": "is custom field required during job creation.",
                "example": true,
                "type": "boolean"
              },
              "searchable": {
                "description": "can search be performed by the custom field.",
                "example": true,
                "type": "boolean"
              },
              "displayToTranslators": {
                "description": "is displayed to translators.",
                "example": true,
                "type": "boolean"
              },
              "options": {
                "items": {
                  "example": [
                    "option1",
                    "option2"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "defaultValue": {
                "description": "default value for custom field.",
                "example": "default field value",
                "type": "string"
              },
              "description": {
                "description": "custom field description.",
                "example": "Custom field example",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "CustomFieldAssignmentList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CustomFieldAssignment"
        }
      },
      "CustomFieldAssignment": {
        "type": "object",
        "properties": {
          "fieldUid": {
            "description": "Custom field unique identifier.",
            "example": "ngahq6dgh4ed"
          }
        }
      },
      "CreateCustomField": {
        "properties": {
          "type": {
            "description": "custom field type.",
            "example": "SHORT_TEXT | LONG_TEXT | SELECTBOX | CHECKBOX",
            "type": "string"
          },
          "fieldName": {
            "description": "custom field name.",
            "example": "field-name",
            "type": "boolean"
          },
          "enabled": {
            "description": "is custom field enabled.",
            "example": true,
            "type": "boolean"
          },
          "required": {
            "description": "is custom field required during job creation.",
            "example": true,
            "type": "boolean"
          },
          "searchable": {
            "description": "can search be performed by the custom field.",
            "example": true,
            "type": "boolean"
          },
          "displayToTranslators": {
            "description": "is displayed to translators.",
            "example": true,
            "type": "boolean"
          },
          "options": {
            "items": {
              "example": [
                "option1",
                "option2"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "defaultValue": {
            "description": "default value for custom field.",
            "example": "default field value",
            "type": "string"
          },
          "description": {
            "description": "custom field description.",
            "example": "Custom field example",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateCustomField": {
        "properties": {
          "fieldName": {
            "description": "custom field name.",
            "example": "field-name",
            "type": "boolean"
          },
          "enabled": {
            "description": "is custom field enabled.",
            "example": true,
            "type": "boolean"
          },
          "required": {
            "description": "is custom field required during job creation.",
            "example": true,
            "type": "boolean"
          },
          "searchable": {
            "description": "can search be performed by the custom field.",
            "example": true,
            "type": "boolean"
          },
          "displayToTranslators": {
            "description": "is displayed to translators.",
            "example": true,
            "type": "boolean"
          },
          "options": {
            "items": {
              "example": [
                "option1",
                "option2"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "defaultValue": {
            "description": "default value for custom field.",
            "example": "default field value",
            "type": "string"
          },
          "description": {
            "description": "custom field description.",
            "example": "Custom field example",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ListFilesResponse": {
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/TranslationJobFile"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            ]
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "ListJobLocalesCompletionDatesResponse": {
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/JobLocalesCompletionDate"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            ]
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "AccountListJobsResponse": {
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/AccountListJobsResponseItem"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            ]
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "AccountListJobsResponseItem": {
        "properties": {
          "createdDate": {
            "description": "The UTC value of the date the job was created.",
            "example": "2015-11-21T01:51:17.000Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "The description of the job.",
            "type": "string"
          },
          "dueDate": {
            "description": "The UTC value of the due date for the job.",
            "example": "2015-11-21T01:51:17.000Z",
            "format": "date-time",
            "type": "string"
          },
          "jobName": {
            "description": "The name of the job.",
            "type": "string"
          },
          "jobNumber": {
            "description": "The account level unique number of the job. Consist of unique short prefix and sequence number.",
            "example": "SMTL-123",
            "type": "string"
          },
          "jobStatus": {
            "description": "The status of the job",
            "example": "DRAFT | AWAITING_AUTHORIZATION | IN_PROGRESS | COMPLETED | CANCELLED | CLOSED | DELETED",
            "type": "string"
          },
          "priority": {
            "description": "Priority order in account. Strats from 1 and can be null.",
            "example": 2,
            "type": "integer"
          },
          "projectId": {
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "example": "fd7244365",
            "type": "string"
          },
          "referenceNumber": {
            "description": "Customer specific number/identifier for the job.",
            "example": "CustomerReferenceNum1",
            "type": "string"
          },
          "targetLocaleIds": {
            "description": "The array of localeIds for the job.",
            "items": {
              "example": "de-DE",
              "type": "string"
            },
            "type": "array"
          },
          "translationJobUid": {
            "description": "The unique identifier of the job.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ListJobsResponse": {
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/ListJobsResponseItem"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            ]
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "ListJobsResponseItem": {
        "properties": {
          "createdDate": {
            "description": "The UTC value of the date the job was created.",
            "example": "2015-11-21T01:51:17.000Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "The description of the job.",
            "type": "string"
          },
          "dueDate": {
            "description": "The UTC value of the due date for the job.",
            "example": "2015-11-21T01:51:17.000Z",
            "format": "date-time",
            "type": "string"
          },
          "jobName": {
            "description": "The name of the job.",
            "type": "string"
          },
          "jobNumber": {
            "description": "The account level unique number of the job. Consist of unique short prefix and sequence number.",
            "example": "SMTL-123",
            "type": "string"
          },
          "jobStatus": {
            "description": "The status of the job",
            "example": "DRAFT | AWAITING_AUTHORIZATION | IN_PROGRESS | COMPLETED | CANCELLED | CLOSED",
            "type": "string"
          },
          "targetLocaleIds": {
            "description": "The array of localeIds for the job.",
            "items": {
              "example": "de-DE",
              "type": "string"
            },
            "type": "array"
          },
          "translationJobUid": {
            "description": "The unique identifier of the job.",
            "type": "string"
          },
          "referenceNumber": {
            "description": "Customer specific number/identifier for the job.",
            "example": "CustomerReferenceNum1",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LocaleApiItem": {
        "example": {
          "country": {
            "countryId": "US",
            "description": "United States"
          },
          "description": "English (United States)",
          "language": {
            "description": "English",
            "direction": "LTR",
            "languageId": "en",
            "wordDelimiter": "SPACE"
          },
          "localeId": "en-US",
          "direction": "RTL"
        },
        "properties": {
          "country": {
            "description": "The country that makes up the locale. Not all locales have a country specified.",
            "properties": {
              "countryId": {
                "description": "The identifier of the country.",
                "type": "string"
              },
              "description": {
                "description": "The name of the country.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "description": {
            "description": "The name of the locale.",
            "type": "string"
          },
          "mtSupported": {
            "description": "Smartling MT Hub can translate into this locale.",
            "type": "boolean"
          },
          "language": {
            "description": "The language that makes up the locale. All locales have a language.",
            "properties": {
              "description": {
                "description": "The name of the language.",
                "type": "string"
              },
              "direction": {
                "enum": [
                  "LTR",
                  "RTL"
                ],
                "type": "string"
              },
              "languageId": {
                "description": "The identifier of the language.",
                "type": "string"
              },
              "wordDelimiter": {
                "enum": [
                  "SPACE",
                  "CHARACTER"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "direction": {
            "enum": [
              "RTL",
              "LTR"
            ],
            "type": "string"
          },
          "localeId": {
            "description": "The identifier for the locale. Locales are defined as a unique combination of language and country pairs.",
            "type": "string"
          }
        },
        "required": [
          "localeId",
          "description",
          "language",
          "mtSupported"
        ],
        "type": "object"
      },
      "LocaleWorkflow": {
        "properties": {
          "targetLocaleId": {
            "description": "A valid Smartling Locale ID",
            "example": "cy-GB",
            "type": "string"
          },
          "workflowUid": {
            "description": "Unique identifier for workflow",
            "example": "9422471c2202",
            "type": "string"
          }
        },
        "required": [
          "targetLocaleId",
          "workflowUid"
        ],
        "type": "object"
      },
      "LocalesAPISuccessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/LocaleApiItem"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "description": "The total number of locales matching the request",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "totalCount",
                      "items"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "MatchParams": {
        "type": "object",
        "description": "*Uncollapse this block to get the detailed description of `matchParams`.*\n<br/><br/>\nIf none of `stringHashcodes`, `contentFileUri`, `translationJobUids` are specified, **all strings from the project** will be included in the match.\n<br/>\nIf `overrideContextOlderThanDays` is not specified, **strings with context will not be bound to this context**.",
        "properties": {
          "contentFileUri": {
            "description": "File URI containing strings to perform matching with the context: <br/> Example: `\"contentFileUri\": \"example.properties\"` <br/> Can't be used along with the `stringHashcodes` or `translationJobUids` parameter.",
            "type": "string"
          },
          "stringHashcodes": {
            "description": "An array of string hashcodes to perform matching with the context: <br/> Example: `\"stringHashcodes\": [\"hashcode1\", \"hashcode2\"]` <br/> Can't be used along with the `contentFileUri` or `translationJobUids` parameter.",
            "items": {
              "format": "hash",
              "type": "string"
            },
            "type": "array"
          },
          "translationJobUids": {
            "description": "A translation job UID to perform matching with the context. Only one UID can be specified: <br/> Example: `\"translationJobUids\": [\"translationJobUid\"]` <br/> Can't be used along with the `contentFileUri` or `stringHashcodes` parameter.",
            "items": {
              "format": "hash",
              "type": "string"
            },
            "type": "array"
          },
          "overrideContextOlderThanDays": {
            "description": "Specifies whether to override context for strings that were already bound to other context, and that context is at least as \"overrideContextOlderThanDays\" old.",
            "minimum": 1,
            "type": "integer"
          },
          "videoMatchingMode": {
            "description": "Specifies the behavior of string matching for video contexts.\n\n| videoMatchingMode | Description |\n|----------------------|-------------|\n| `SUBTITLES` | In this mode you should provide the property `contentFileUri` that points to the subtitles content file. Strings will be bound by the subtitle's timestamps. |\n| `OCR_WITH_SPLITTING` | Detects key frames and checks each frame for text using OCR. If string matches, an image context is created for that frame. Frames without matches and the original video are deleted. |\n| `OCR` | Detects key frames and checks each frame for text using OCR. If string matches, we bind the string to the original video using the key frame's timestamp and text coordinates. |\n",
            "enum": [
              "SUBTITLES",
              "OCR_WITH_SPLITTING",
              "OCR"
            ],
            "type": "string"
          }
        }
      },
      "DeleteContextsRequest": {
        "properties": {
          "contextUids": {
            "description": "List of contexts UIDs to delete. List size is limited to 100 items.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "ModifyJobReportTagsRequest": {
        "description": "The payload to modify job estimation report tags.",
        "properties": {
          "tags": {
            "example": [
              "tag1",
              "tag2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "NullDataJobResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "data": {
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "ProcessCheckJobResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "createdDate": {
                        "description": "The UTC value of when the process was created.",
                        "example": "2015-11-21T01:51:17.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "modifiedDate": {
                        "description": "The UTC value of when the process was last modified.",
                        "example": "2015-11-21T01:51:17.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "processState": {
                        "description": "The current state of the process. Values returned are IN_PROGRESS | COMPLETED | FAILED.",
                        "type": "string"
                      },
                      "processUid": {
                        "description": "The unique identifier for a process.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "ProgressInfoResponse": {
        "properties": {
          "percentComplete": {
            "description": "The percent of group (locale/file/job) completeness, 0 - 100.",
            "example": 52,
            "type": "number"
          },
          "totalWordCount": {
            "description": "The total number of words within that particular group (locale/file/job).",
            "example": 192,
            "type": "number"
          }
        },
        "type": "object"
      },
      "ProgressResponse": {
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "contentProgressReport": {
                        "items": {
                          "$ref": "#/components/schemas/ContentProgressReportItemResponse"
                        },
                        "type": "array"
                      },
                      "progress": {
                        "$ref": "#/components/schemas/ProgressInfoResponse"
                      },
                      "summaryReport": {
                        "items": {
                          "$ref": "#/components/schemas/WorkflowStepClassWordCount"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            ]
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "ProjectCopyProcessSuccessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "createdDate": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "modifiedDate": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "newProjectUid": {
                        "description": "A unique identifier for the newly created project. This is available once the project copying has finished, which is indicated once it has a processState of CLOSED.",
                        "type": "string"
                      },
                      "processState": {
                        "description": "The status of the copy request. The new projectId will be available once the state is marked as CLOSED.",
                        "enum": [
                          "OPEN",
                          "CLOSED",
                          "FAILED"
                        ],
                        "type": "string"
                      },
                      "processStatistics": {
                        "description": "Information on the copying of the project",
                        "properties": {
                          "errored": {
                            "description": "The number of entities that failed to copy",
                            "type": "string"
                          },
                          "processed": {
                            "description": "The number of entities processed successfully",
                            "type": "string"
                          },
                          "requested": {
                            "description": "The number of entities being copied",
                            "type": "string"
                          },
                          "skipped": {
                            "description": "The number of entities that were skipped",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "processUid": {
                        "description": "A unique identifier for a long running process",
                        "type": "string"
                      }
                    },
                    "required": [
                      "processUid",
                      "newProjectUid",
                      "processState",
                      "createdDate",
                      "modifiedDate",
                      "processStatistics"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "ProjectCopySuccessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "processUid": {
                        "description": "A unique identifier for a long running process",
                        "type": "string"
                      }
                    },
                    "required": [
                      "processUid"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "ProjectDetailsLocaleItem": {
        "example": {
          "description": "Russian (Russia)",
          "enabled": "true",
          "localeId": "ru-RU"
        },
        "properties": {
          "description": {
            "description": "The name of the locale.",
            "type": "string"
          },
          "enabled": {
            "description": "Boolean indicator of the locale is enabled for the project.",
            "type": "boolean"
          },
          "localeId": {
            "description": "The identifier for the specific locale configured for the project.",
            "type": "string"
          }
        },
        "required": [
          "localeId",
          "description",
          "enabled"
        ],
        "type": "object"
      },
      "ProjectDetailsSuccessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "example": {
                      "accountUid": "ab5f1939",
                      "archived": false,
                      "projectId": "fd7244365",
                      "projectName": "fd7244365",
                      "projectTypeCode": "APPLICATION_RESOURCES",
                      "sourceLocaleDescription": "English",
                      "sourceLocaleId": "en-US"
                    },
                    "properties": {
                      "accountUid": {
                        "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
                        "type": "string"
                      },
                      "archived": {
                        "description": "Indicator whether or not the project has been archived. Archived projects are typically hidden from a user's view, but can still be accessible",
                        "type": "boolean"
                      },
                      "projectId": {
                        "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
                        "type": "string"
                      },
                      "projectName": {
                        "description": "The name of the project.",
                        "type": "string"
                      },
                      "projectTypeCode": {
                        "description": "Indicator for the type of the project.",
                        "type": "string"
                      },
                      "sourceLocaleDescription": {
                        "description": "The full name of the sourceLocaleId",
                        "type": "string"
                      },
                      "sourceLocaleId": {
                        "description": "The locale identifier for the source locale of the project. This indicates the base locale for which content should be uploaded to the project.",
                        "type": "string"
                      },
                      "targetLocales": {
                        "description": "The locales configured for translation for this project.",
                        "items": {
                          "$ref": "#/components/schemas/ProjectDetailsLocaleItem"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "projectId",
                      "projectName",
                      "accountUid",
                      "archived",
                      "projectTypeCode",
                      "sourceLocaleId",
                      "sourceLocaleDescription",
                      "targetLocales"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "RemoveFileJobRequest": {
        "description": "The payload to use when removing a file from a job.",
        "properties": {
          "fileUri": {
            "description": "The URI of the file that is to be removed from the job.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AddLocaleJobRequest": {
        "description": "The payload to use when add a locale to a job.",
        "properties": {
          "syncContent": {
            "description": "When a new locale is being added to a job, by default all content in the job will be added to the job for the new locale. If set to false, then no content will be added to the job, and only a locale placeholder will be added to the job.",
            "type": "boolean",
            "default": true
          }
        },
        "type": "object"
      },
      "JobScheduleEditCommand": {
        "description": "The payload to use modifying translation job schedule.",
        "properties": {
          "schedules": {
            "description": "Array of translation job schedule edit items.",
            "items": {
              "$ref": "#/components/schemas/JobScheduleEditItemCommand"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "JobScheduleEditItemCommand": {
        "properties": {
          "workflowStepUid": {
            "description": "workflow step universal identifier.",
            "format": "uuid",
            "example": "568cd2bae16f",
            "type": "string"
          },
          "dueDate": {
            "description": "due date in milliseconds format.",
            "example": "2020-11-21T01:51:17Z",
            "format": "date-time",
            "type": "string"
          },
          "targetLocaleId": {
            "description": "The locale identidier.",
            "example": "ru-RU",
            "type": "string"
          }
        },
        "required": [
          "targetLocaleId",
          "workflowStepUid",
          "dueDate"
        ],
        "type": "object"
      },
      "RemoveStringsJobRequest": {
        "description": "The payload to use when removing strings from a job.",
        "properties": {
          "hashcodes": {
            "description": "The hashcodes (string identifiers) that should be removed from the job.",
            "items": {
              "example": [
                "ca51a04da69cf64dce022bb4f146c962"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "localeIds": {
            "description": "(Optional) The array of `localeId`s that the strings should be removed from. If not specified, the strings will be removed from all locales within that job.",
            "items": {
              "example": [
                "ru-RU"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SearchJobRequest": {
        "description": "The payload to use for searching for jobs. At least one of hashcodes, fileUris, and translationJobUids must be specified. The individual param results are AND'd together.",
        "properties": {
          "fileUris": {
            "description": "(Optional) The `fileUri`s (file identifiers) used to search for jobs. Any job containing the specified `fileUri` will be returned.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hashcodes": {
            "description": "(Optional) The hashcodes (string identifiers) used to search for jobs. Any job containing specified hashcodes will be returned.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "translationJobUids": {
            "description": "(Optional) The `translationJobUid`s (translation job identifiers) used to search for jobs. Any job containing the specified `fileUri` will be returned.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ShallowJobResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "callbackMethod": {
                        "description": "The http method (GET|POST) to use when Smartling invokes the callback URL upon job completion.",
                        "type": "string"
                      },
                      "callbackUrl": {
                        "description": "The callback URL to invoke when a job is completed.",
                        "type": "string"
                      },
                      "createdByUserUid": {
                        "description": "The userUid of who created the job.",
                        "type": "string"
                      },
                      "createdDate": {
                        "description": "The UTC value of the date the job was created.",
                        "example": "2015-11-21T01:51:17.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "description": {
                        "description": "The description of the job.",
                        "type": "string"
                      },
                      "dueDate": {
                        "description": "The UTC value of the due date for the job.",
                        "example": "2015-11-21T01:51:17.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "firstCompletedDate": {
                        "description": "The UTC value of when the job was first completed.",
                        "example": "2015-11-21T01:51:17.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "firstAuthorizedDate": {
                        "description": "The UTC value of when the job was first authorized.",
                        "example": "2015-01-21T01:51:17.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "jobName": {
                        "description": "The name of the job.",
                        "type": "string"
                      },
                      "jobNumber": {
                        "description": "The account level unique number of the job. Consist of unique short prefix and sequence number.",
                        "example": "SMTL-123",
                        "type": "string"
                      },
                      "jobStatus": {
                        "description": "The status of the job.",
                        "example": "DRAFT | AWAITING_AUTHORIZATION | IN_PROGRESS | COMPLETED | CANCELLED | CLOSED",
                        "type": "string"
                      },
                      "lastCompletedDate": {
                        "description": "The UTC value of when the job was last completed.",
                        "example": "2015-11-21T01:51:17.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "lastAuthorizedDate": {
                        "description": "The UTC value of when the job was last authorized.",
                        "example": "2015-12-21T01:51:17.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "modifiedByUserUid": {
                        "description": "The userUid of who last modified the job.",
                        "type": "string"
                      },
                      "modifiedDate": {
                        "description": "The UTC value of the date the job was modified.",
                        "example": "2015-11-21T01:51:17.000Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "targetLocaleIds": {
                        "description": "The array of localeIds for the job.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "customFields": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/CustomFieldBasicResponse"
                        }
                      },
                      "translationJobUid": {
                        "description": "The unique identifier for the job.",
                        "type": "string"
                      },
                      "referenceNumber": {
                        "description": "Customer specific number/identifier for the job.",
                        "example": "CustomerReferenceNum1",
                        "type": "string"
                      },
                      "issues": {
                        "$ref": "#/components/schemas/IssuesCount"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "SourceFile": {
        "properties": {
          "data": {
            "properties": {
              "name": {
                "description": "File name",
                "type": "string"
              },
              "uri": {
                "description": "File uri",
                "type": "string"
              },
              "fileUid": {
                "description": "File uid",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "StringCountWordCountResponse": {
        "properties": {
          "stringCount": {
            "description": "The total number of strings within that particular step.",
            "type": "number"
          },
          "wordCount": {
            "description": "The total number of words within that particular step.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "StringInfo": {
        "description": "Information on string",
        "properties": {
          "hashcode": {
            "description": "The generated unique idenitfier for this created or updated string.",
            "type": "string"
          },
          "keys": {
            "description": "If this string is associated with one or more resource files this is a list of the associated resource keys.",
            "items": {
              "properties": {
                "fileUri": {
                  "description": "resource key",
                  "type": "string"
                },
                "key": {
                  "description": "fileUri of the key",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "parsedStringText": {
            "description": "The text for this string used to define its uniqueness in the Smartling system.  This is after placeholders have been processed and escaping normalization has been applied.",
            "type": "string"
          },
          "stringText": {
            "description": "The text for this string",
            "type": "string"
          },
          "stringVariant": {
            "description": "String variant",
            "type": "string"
          },
          "maxLength": {
            "description": "Maximum character length",
            "type": "number"
          },
          "stringInstructions": {
            "description": "String instructions that were added to the string in the Dashboard.",
            "items": {
              "description": "The text of the instruction.",
              "type": "string"
            },
            "type": "array"
          },
          "contentFileStringInstructions": {
            "description": "String instructions that were included in the uploaded file if any.",
            "items": {
              "properties": {
                "fileUri": {
                  "description": "URI of the file that contained the instruction.",
                  "type": "string"
                },
                "contentFileStringInstruction": {
                  "description": "The text of the instruction.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "StringResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/StringInfo"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "SuccessFailCountJobResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "failCount": {
                        "description": "The number of strings per locale that were not successfully processed.",
                        "type": "integer"
                      },
                      "successCount": {
                        "description": "The number of strings per locale that were successfully processed.",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "SearchTranslationJobByLocalesAndHashcodesResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "totalCount": {
                        "description": "Total count",
                        "type": "number"
                      },
                      "items": {
                        "type": "array",
                        "items": {
                          "properties": {
                            "translationJobUid": {
                              "description": "The UID of the translationJob",
                              "format": "uid",
                              "type": "string"
                            },
                            "jobName": {
                              "description": "Name of the translation job",
                              "type": "string"
                            },
                            "dueDate": {
                              "description": "The date by which the job is requested to be completed.",
                              "example": "2020-11-21T01:51:17Z",
                              "format": "date-time",
                              "type": "string"
                            },
                            "hashcodesByLocale": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/HashcodesByLocaleResponse"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "AddContentSuccessFailCountJobResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "failCount": {
                        "description": "The number of strings per locale that could not be added to the job. As for now the only reason of failure is that strings are already in another job.",
                        "type": "integer"
                      },
                      "successCount": {
                        "description": "The number of strings per locale added to the job.",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "SuccessResponse": {
        "properties": {
          "code": {
            "description": "Indicates whether the response was successful or what error has occured.",
            "enum": [
              "SUCCESS"
            ],
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "type": "object"
      },
      "TagInfo": {
        "properties": {
          "tag": {
            "description": "Tag text",
            "example": "SomeTag",
            "type": "string"
          }
        },
        "required": [
          "tag"
        ],
        "type": "object"
      },
      "AccountTagInfo": {
        "properties": {
          "projectId": {
            "description": "Project identifier",
            "example": "ewr33dssd",
            "type": "string"
          },
          "tag": {
            "description": "Tag text",
            "example": "SomeTag",
            "type": "string"
          }
        },
        "required": [
          "tag"
        ]
      },
      "IssuesCount": {
        "properties": {
          "sourceIssuesCount": {
            "description": "Source inssues count.",
            "type": "integer"
          },
          "translationIssuesCount": {
            "description": "Translation inssues count.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Timecode": {
        "description": "Number of seconds for the period of time that a string appears in a video, relative to the video start time.",
        "properties": {
          "endTime": {
            "format": "int64",
            "type": "integer"
          },
          "startTime": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Translation": {
        "description": "Information on a translation",
        "properties": {
          "hashcode": {
            "description": "The generated unique idenitfier for this created or updated string.",
            "type": "string"
          },
          "keys": {
            "description": "If this string is associated with one or more resource files this is a list of the associated resource keys.",
            "items": {
              "properties": {
                "fileUri": {
                  "description": "resource key",
                  "type": "string"
                },
                "key": {
                  "description": "fileUri of the key",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "parsedStringText": {
            "description": "The text for this string used to define its uniqueness in the Smartling system.  This is after placeholders have been processed and escaping normalization has been applied.",
            "type": "string"
          },
          "stringText": {
            "description": "The text for this string.",
            "type": "string"
          },
          "targetLocaleId": {
            "description": "Locale ID of this translation",
            "type": "string"
          },
          "translations": {
            "items": {
              "properties": {
                "modifiedDate": {
                  "description": "When this translation was last modified.",
                  "type": "string"
                },
                "pluralForm": {
                  "nullable": true,
                  "description": "Pural form of the translation.  `null` if this translation is not a plural.",
                  "type": "string"
                },
                "translation": {
                  "description": "Translation text",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "stringVariant": {
            "description": "String variant",
            "type": "string"
          },
          "workflowStepUid": {
            "description": "Current workflow step for this translation",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TranslationResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/Translation"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "UpdateJobRequest": {
        "description": "The payload to use when updating a job.",
        "properties": {
          "jobName": {
            "description": "The name of the job. It must be unique within the Smartling project. `jobName` is **required**.",
            "maxLength": 170,
            "type": "string"
          },
          "description": {
            "description": "The description of the job.",
            "type": "string"
          },
          "dueDate": {
            "description": "The date by which the job is requested to be completed.",
            "example": "2020-11-21T01:51:17Z",
            "format": "date-time",
            "type": "string"
          },
          "referenceNumber": {
            "description": "Customer specific number/identifier for the job.",
            "example": "CustomerReferenceNum1",
            "type": "string"
          },
          "callbackUrl": {
            "description": "The URL for Smartling to invoke when the job is completed.",
            "maxLength": 8192,
            "example": "https://myDomain.com",
            "type": "string"
          },
          "callbackMethod": {
            "description": "The HTTP method to call (GET|POST) when invoking the `callbackUrl`.",
            "example": "GET",
            "type": "string"
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldBasicRequest"
            }
          }
        },
        "type": "object"
      },
      "VendorsAPIJobsListAgencyItem": {
        "properties": {
          "agencyName": {
            "type": "string"
          },
          "agencyUid": {
            "type": "string"
          }
        },
        "required": [
          "agencyUid",
          "agencyName"
        ],
        "type": "object"
      },
      "VendorsAPIJobsListAgencyItemProgressDetailsItem": {
        "properties": {
          "aggregatedPerWorkflow": {
            "properties": {
              "workflows": {
                "items": {
                  "$ref": "#/components/schemas/VendorsAPIJobsListAgencyItemProgressDetailsItemWorkflowsItem"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "VendorsAPIJobsListAgencyItemProgressDetailsItemWorkflowsItem": {
        "properties": {
          "targetLocales": {
            "items": {
              "$ref": "#/components/schemas/VendorsAPIJobsListAgencyItemProgressDetailsItemWorkflowsItemTargetLocalesItem"
            },
            "type": "array"
          },
          "workflowName": {
            "type": "string"
          },
          "workflowUid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "VendorsAPIJobsListAgencyItemProgressDetailsItemWorkflowsItemTargetLocalesItem": {
        "properties": {
          "issues": {
            "properties": {
              "totalIssuesCount": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "localeId": {
            "type": "string"
          },
          "workflowSteps": {
            "$ref": "#/components/schemas/VendorsAPIJobsListAgencyItemProgressDetailsItemWorkflowsItemTargetLocalesItemWorkflowStepsItem"
          }
        },
        "type": "object"
      },
      "VendorsAPIJobsListAgencyItemProgressDetailsItemWorkflowsItemTargetLocalesItemWorkflowStepsItem": {
        "properties": {
          "unassignedWordCount": {
            "type": "integer"
          },
          "wordCount": {
            "type": "integer"
          },
          "workflowStepName": {
            "type": "string"
          },
          "workflowStepOrder": {
            "description": "A workflow step position in workflow",
            "type": "integer"
          },
          "workflowStepUid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "VendorsAPIJobsListAgencyItemTranslationJobItem": {
        "properties": {
          "translationJobAuthorizedDate": {
            "format": "date-time",
            "type": "string"
          },
          "translationJobDueDate": {
            "format": "date-time",
            "type": "string"
          },
          "translationJobName": {
            "type": "string"
          },
          "translationJobRisk": {
            "properties": {
              "status": {
                "enum": [
                  "AT_RISK",
                  "ON_TRACK",
                  "LATE"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "translationJobUid": {
            "type": "string"
          },
          "translationJobCustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldBasicResponse"
            }
          }
        },
        "type": "object"
      },
      "VendorsAPIJobsListSuccessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "agency": {
                        "$ref": "#/components/schemas/VendorsAPIJobsListAgencyItem"
                      },
                      "lastUpdatedDate": {
                        "description": "Date when data for the API response was last refreshed.",
                        "format": "date-time",
                        "type": "string"
                      },
                      "translationJobs": {
                        "items": {
                          "$ref": "#/components/schemas/VendorsAPIJobsListTranslationJobItem"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "lastUpdatedDate",
                      "agency",
                      "translationJobs"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "VendorsAPIJobsListTranslationJobItem": {
        "properties": {
          "account": {
            "properties": {
              "accountName": {
                "type": "string"
              },
              "accountUid": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "progressDetails": {
            "$ref": "#/components/schemas/VendorsAPIJobsListAgencyItemProgressDetailsItem"
          },
          "project": {
            "properties": {
              "projectId": {
                "type": "string"
              },
              "projectName": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "translationJob": {
            "$ref": "#/components/schemas/VendorsAPIJobsListAgencyItemTranslationJobItem"
          }
        },
        "required": [
          "account",
          "project",
          "progressDetails",
          "translationJob"
        ],
        "type": "object"
      },
      "WebPageDetailListRequest": {
        "properties": {
          "webPageUids": {
            "description": "list of url identifiers",
            "example": [
              "4423d44",
              "123jd44"
            ],
            "items": {
              "type": "string"
            },
            "maximum": 200,
            "minimum": 1,
            "type": "array"
          }
        },
        "type": "object"
      },
      "WebPageDetailListResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "properties": {
                            "details": {
                              "properties": {
                                "contextUids": {
                                  "description": "context identifiers",
                                  "example": [
                                    "122ssasa323",
                                    "334asds3434"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "created": {
                                  "description": "capture url date",
                                  "example": "2015-11-21T01:51:17Z",
                                  "type": "string"
                                },
                                "stringCount": {
                                  "description": "string count",
                                  "example": 10,
                                  "type": "integer"
                                },
                                "wordCount": {
                                  "description": "word count",
                                  "example": 25,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "domain": {
                              "description": "domain",
                              "properties": {
                                "name": {
                                  "description": "url domain name",
                                  "example": "my.domain.com",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "urlPath": {
                              "description": "Url path",
                              "type": "string"
                            },
                            "webPageUid": {
                              "description": "url identifier",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "description": "Total element count",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "WebPageDetailsResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "details": {
                        "properties": {
                          "contextUids": {
                            "description": "context identifiers",
                            "example": [
                              "122ssasa323",
                              "334asds3434"
                            ],
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "created": {
                            "description": "capture url date",
                            "example": "2015-11-21T01:51:17Z",
                            "type": "string"
                          },
                          "stringCount": {
                            "description": "string count",
                            "example": 10,
                            "type": "integer"
                          },
                          "wordCount": {
                            "description": "word count",
                            "example": 25,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "domain": {
                        "description": "domain",
                        "properties": {
                          "name": {
                            "description": "url domain name",
                            "example": "my.domain.com",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "urlPath": {
                        "description": "Url path",
                        "type": "string"
                      },
                      "webPageUid": {
                        "description": "url identifier",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "WebPageDomainsResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "properties": {
                            "name": {
                              "description": "url domain name",
                              "example": "my.domain.com",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "description": "Total element count",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "WebPageListRequest": {
        "properties": {
          "domainName": {
            "description": "domain name",
            "example": "my.domain.com",
            "type": "string"
          },
          "limit": {
            "default": 100,
            "description": "limit",
            "example": 30,
            "maximum": 200,
            "minimum": 1,
            "type": "integer"
          },
          "localeIds": {
            "example": [
              "ru-RU"
            ],
            "items": {
              "description": "An identifying code for a language in Smartling.",
              "type": "string"
            },
            "type": "array"
          },
          "offset": {
            "default": 0,
            "description": "offset",
            "example": 0,
            "maximum": 100,
            "minimum": 0,
            "type": "integer"
          },
          "orderBy": {
            "description": "Sort result by fields",
            "example": [
              "DOMAIN",
              "URL_PATH"
            ],
            "properties": {
              "items": {
                "items": {
                  "properties": {
                    "direction": {
                      "description": "Sort direction",
                      "enum": [
                        "DOMAIN",
                        "URL_PATH"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "orderDirection": {
            "default": "ASC",
            "description": "Sort direction",
            "enum": [
              "ASC",
              "DESC"
            ],
            "example": "ASC",
            "type": "string"
          },
          "urlCaptureDateAfter": {
            "description": "The date after which the URL was captured.",
            "example": "2020-11-21T01:51:17Z",
            "format": "date-time",
            "type": "string"
          },
          "urlCaptureDateBefore": {
            "description": "The date by which the URL was captured.",
            "example": "2020-11-21T01:51:17Z",
            "format": "date-time",
            "type": "string"
          },
          "urlPath": {
            "description": "url",
            "example": "/home/page.htm",
            "type": "string"
          },
          "urlPathExactMatch": {
            "description": "Should or should not apply exact match.",
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "WebPageListResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "properties": {
                            "created": {
                              "description": "url capture date",
                              "type": "string"
                            },
                            "domain": {
                              "description": "domain",
                              "properties": {
                                "name": {
                                  "description": "url domain name",
                                  "example": "my.domain.com",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "urlPath": {
                              "description": "Watcher name",
                              "type": "string"
                            },
                            "webPageUid": {
                              "description": "url identifier",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "description": "Total element count",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "WordCountResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "properties": {
                            "accountName": {
                              "description": "Name of the account",
                              "type": "string"
                            },
                            "accountUid": {
                              "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
                              "type": "string"
                            },
                            "agencyName": {
                              "description": "Name of the agency that was credited for the words",
                              "type": "string"
                            },
                            "agencyUid": {
                              "description": "The unique identifier of the agency that was credited for the words",
                              "type": "string"
                            },
                            "fuzzyProfileName": {
                              "description": "Name of the fuzzy match profile used",
                              "type": "string"
                            },
                            "fuzzyTier": {
                              "description": "Fuzzy match tier that matches fuzzy score of the processed words",
                              "type": "string"
                            },
                            "jobName": {
                              "description": "Name of the translation job",
                              "type": "string"
                            },
                            "jobUid": {
                              "description": "The unique identifier of the translation job",
                              "type": "string"
                            },
                            "projectId": {
                              "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
                              "type": "string"
                            },
                            "projectName": {
                              "description": "Name of the project",
                              "type": "string"
                            },
                            "targetLocaleId": {
                              "description": "Locale ID of the translations",
                              "type": "string"
                            },
                            "targetLocaleName": {
                              "description": "Name of the locale of the translations",
                              "type": "string"
                            },
                            "translationResourceName": {
                              "description": "Name of the translation resource who was credited for the words",
                              "type": "string"
                            },
                            "translationResourceUid": {
                              "description": "The unique identifier of the translation resource who was credited for the words",
                              "type": "string"
                            },
                            "weightedWordCount": {
                              "description": "The number of weighted words processed by a translation resource",
                              "type": "integer"
                            },
                            "wordCount": {
                              "description": "The number of words processed by a translation resource",
                              "type": "integer"
                            },
                            "characterCount": {
                              "description": "The number of characters processed by a translation resource",
                              "type": "integer"
                            },
                            "workflowStepType": {
                              "description": "Type of the workflow step (Translation, Edit, Review) the words transitioned through",
                              "type": "string"
                            },
                            "workflowStepUid": {
                              "description": "Unique identifier of the workflow step the words transitioned through",
                              "type": "string"
                            },
                            "workflowStepName": {
                              "description": "Name of the workflow step the words transitioned through",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "resultsTruncated": {
                        "description": "The flag showing whether all qualified records returned by the response.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "description": "A list of report records"
      },
      "WorkflowProgressReportItemResponse": {
        "properties": {
          "workflowName": {
            "description": "The name of the workflow.",
            "type": "string"
          },
          "workflowStepSummaryReportItemList": {
            "items": {
              "$ref": "#/components/schemas/WorkflowStepSummaryReportItemResponse"
            },
            "type": "array"
          },
          "workflowUid": {
            "description": "The uid of the workflow.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkflowStepSummaryReportItemResponse": {
        "properties": {
          "stringCount": {
            "description": "The total number of strings within that particular step.",
            "type": "number"
          },
          "wordCount": {
            "description": "The total number of words within that particular step.",
            "type": "number"
          },
          "workflowStepName": {
            "description": "The name of the workflow step.",
            "type": "string"
          },
          "workflowStepType": {
            "description": "The type of the step.",
            "type": "string"
          },
          "workflowStepUid": {
            "description": "The uid of the workflow step.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkflowStepClassWordCount": {
        "properties": {
          "workflowStepType": {
            "description": "The type of the step.",
            "type": "string"
          },
          "stringCount": {
            "description": "The total number of strings within step type.",
            "type": "number"
          },
          "wordCount": {
            "description": "The total number of words within step type.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "UserInfoApiItem": {
        "properties": {
          "userUid": {
            "description": "User identifier.",
            "type": "string"
          },
          "firstName": {
            "description": "User first name.",
            "type": "string"
          },
          "lastName": {
            "description": "User last name.",
            "type": "string"
          },
          "profileImage": {
            "description": "User's profile url.",
            "type": "string"
          }
        },
        "required": [
          "userUid",
          "firstName",
          "lastName"
        ],
        "type": "object"
      },
      "PeopleAPIUserInfosSuccessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "$ref": "#/components/schemas/UserInfoApiItem"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "description": "The total number of users matching the request",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "totalCount",
                      "items"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "WorkflowAssignmentProcessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "processUid": {
                        "type": "string"
                      },
                      "processState": {
                        "enum": [
                          "RUNNING",
                          "COMPLETED",
                          "FAILED"
                        ],
                        "type": "string",
                        "description": "The total number of users matching the request"
                      },
                      "createdDate": {
                        "type": "string",
                        "description": "The date the process was created"
                      },
                      "requested": {
                        "type": "integer",
                        "description": "Number of total workers within process"
                      },
                      "processed": {
                        "type": "integer",
                        "description": "Number of processed workers within process"
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "WorkflowAssignmentLocalePairs": {
        "type": "object",
        "properties": {
          "sourceLocaleId": {
            "type": "string",
            "description": "source locale ID",
            "example": "en-US"
          },
          "targetLocaleIds": {
            "type": "array",
            "description": "The array of target locale IDs",
            "example": [
              "fr-FR",
              "es-ES"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WorkflowAssignmentWorkflowStep": {
        "type": "object",
        "properties": {
          "workflowStepUid": {
            "type": "string",
            "description": "The uid of the workflow step.",
            "example": "8312172ed60d"
          },
          "localePairs": {
            "$ref": "#/components/schemas/WorkflowAssignmentLocalePairs"
          }
        }
      },
      "WorkflowAssignmentUserAssignment": {
        "type": "object",
        "properties": {
          "userUid": {
            "type": "string",
            "description": "User identifier."
          },
          "roleValue": {
            "type": "string",
            "description": "User role name."
          },
          "agencyUid": {
            "type": "string",
            "description": "Agency identifier."
          },
          "workflowStepAssignments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowAssignmentWorkflowStep"
            }
          }
        }
      },
      "WorkflowAssignmentCreate": {
        "type": "object",
        "properties": {
          "roleValue": {
            "enum": [
              "ROLE_TRANSLATION_RESOURCE",
              "ROLE_TRANSLATION_RESOURCE_MANAGER"
            ],
            "type": "string",
            "description": "User role name"
          },
          "workflowStepAssignments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowAssignmentWorkflowStep"
            }
          }
        }
      },
      "WorkflowAssignmentCreateResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "totalCount": {
                        "type": "integer",
                        "description": "Number of created workflow step assignments"
                      },
                      "items": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/WorkflowAssignmentWorkflowStep"
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "WorkflowAssignmentSearchResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "offsetToken": {
                        "type": "string",
                        "description": "Offset token for next search operation"
                      },
                      "workflowStepUserAssignments": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/WorkflowAssignmentUserAssignment"
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "IssueStatesResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "properties": {
                            "description": {
                              "description": "Issue State description",
                              "type": "string"
                            },
                            "issueStateCode": {
                              "description": "Issue State identifier",
                              "enum": [
                                "OPENED",
                                "RESOLVED"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "description": "Total element count",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "IssueSeverityLevelsResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "properties": {
                            "description": {
                              "description": "Issue Severity Level description",
                              "type": "string"
                            },
                            "issueSeverityLevelCode": {
                              "description": "Issue Severity Level identifier",
                              "enum": [
                                "LOW",
                                "MEDIUM",
                                "HIGH"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "description": "Total element count",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "AccountIssueTypesResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "properties": {
                            "description": {
                              "description": "Issue Type description",
                              "type": "string"
                            },
                            "issueTypeCode": {
                              "description": "Issue Type identifier",
                              "enum": [
                                "SOURCE",
                                "TRANSLATION"
                              ],
                              "type": "string"
                            },
                            "subTypes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "description": {
                                    "type": "string",
                                    "description": "Issue subtype description",
                                    "example": "Clarification"
                                  },
                                  "issueSubTypeCode": {
                                    "type": "string",
                                    "description": "Issue subtype identifier",
                                    "example": "CLARIFICATION"
                                  }
                                }
                              }
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "description": "Total element count",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "IssueRequest": {
        "properties": {
          "issueText": {
            "description": "Free text field explaining an issue.",
            "example": "This translation is incorrect. Please fix.",
            "type": "string"
          },
          "issueTypeCode": {
            "description": "[Identifies the issue type](#operation/getIssueTypesByAccount). issueTypeCode is either `SOURCE` or `TRANSLATION`. Each have their own set of ```issueSubType``` values.",
            "enum": [
              "SOURCE",
              "TRANSLATION"
            ],
            "type": "string"
          },
          "issueSubTypeCode": {
            "description": "For issueTypeCode=SOURCE - CLARIFICATION | MISSPELLING, For issueTypeCode=TRANSLATION - POOR_TRANSLATION | DOES_NOT_FIT_SPACE | PLACEHOLDER_ISSUE | REVIEW_TRANSLATION | MT_ERROR",
            "enum": [
              "CLARIFICATION",
              "MISSPELLING",
              "POOR_TRANSLATION",
              "DOES_NOT_FIT_SPACE",
              "PLACEHOLDER_ISSUE",
              "REVIEW_TRANSLATION",
              "CUSTOM",
              "MT_ERROR"
            ],
            "type": "string"
          },
          "string": {
            "properties": {
              "hashcode": {
                "description": "Unique identifier for a string in Smartling. Used by the Issues API to attach an issue to a string. You can get the hashcode for a string via String API.",
                "example": "c32c16cddafd63dfa0dc12449372a093",
                "type": "string"
              },
              "localeId": {
                "description": "An identifying code for a target language in Smartling.",
                "example": "ru-RU",
                "type": "string"
              }
            },
            "required": [
              "hashcode",
              "localeId"
            ],
            "type": "object"
          },
          "assigneeUserUid": {
            "description": "User identifier who is assigned to issue",
            "example": "7c9ff09e71b3",
            "type": "string"
          },
          "issueSeverityLevelCode": {
            "description": "[Issue Severity Level identifier](#operation/getAllIssueSeverityLevels)",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH"
            ],
            "type": "string"
          }
        },
        "required": [
          "issueText",
          "issueTypeCode",
          "issueSubTypeCode",
          "string"
        ],
        "type": "object"
      },
      "CreateIssueResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "answered": {
                        "description": "Issue flag \"aswered\"",
                        "type": "boolean"
                      },
                      "createdDate": {
                        "description": "Issue creation date",
                        "type": "string"
                      },
                      "issueSeverityLevelCode": {
                        "description": "[Issue Severity Level identifier](#operation/getAllIssueSeverityLevels)",
                        "enum": [
                          "LOW",
                          "MEDIUM",
                          "HIGH"
                        ],
                        "type": "string"
                      },
                      "issueStateCode": {
                        "description": "[Issue State identifier](#operation/getAllIssuesStates)",
                        "enum": [
                          "OPENED",
                          "RESOLVED"
                        ],
                        "type": "string"
                      },
                      "issueSubTypeCode": {
                        "description": "Issue SubType identifier",
                        "enum": [
                          "CLARIFICATION",
                          "MISSPELLING",
                          "POOR_TRANSLATION",
                          "DOES_NOT_FIT_SPACE",
                          "PLACEHOLDER_ISSUE",
                          "REVIEW_TRANSLATION",
                          "CUSTOM",
                          "MT_ERROR"
                        ],
                        "type": "string"
                      },
                      "issueText": {
                        "description": "Issue text",
                        "type": "string"
                      },
                      "issueTextModifiedDate": {
                        "description": "Issue text modification date",
                        "type": "string"
                      },
                      "issueTypeCode": {
                        "description": "[Issue Type identifier](#operation/getIssueTypesByAccount)",
                        "enum": [
                          "SOURCE",
                          "TRANSLATION"
                        ],
                        "type": "string"
                      },
                      "issueUid": {
                        "description": "Issue identifier",
                        "type": "string"
                      },
                      "projectId": {
                        "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
                        "type": "string"
                      },
                      "accountUid": {
                        "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
                        "type": "string"
                      },
                      "issueNumber": {
                        "description": "Issue number",
                        "type": "integer"
                      },
                      "reportedByUserUid": {
                        "description": "User identifier who created (reported) issue",
                        "type": "string"
                      },
                      "resolvedByUserUid": {
                        "description": "User identifier who resolved issue",
                        "type": "string"
                      },
                      "assigneeUserUid": {
                        "description": "User identifier who is assigned to issue",
                        "type": "string"
                      },
                      "resolvedDate": {
                        "description": "Issue resolve date",
                        "type": "string"
                      },
                      "reopened": {
                        "description": "Issue flag \"reopened\"",
                        "type": "boolean"
                      },
                      "reopenedByUserUid": {
                        "nullable": true,
                        "description": "User identifier who reopened issue",
                        "type": "string"
                      },
                      "reopenedDate": {
                        "nullable": true,
                        "description": "Issue reopen date",
                        "type": "string"
                      },
                      "string": {
                        "properties": {
                          "hashcode": {
                            "description": "Unique identifier for a string in Smartling. Used by the Issues API to attach an issue to a string. You can get the hashcode for a string via String API.",
                            "type": "string"
                          },
                          "localeId": {
                            "description": "An identifying code for a target language in Smartling.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "issueCommentsCount": {
                        "description": "Issue comments count",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "IssueTextRequest": {
        "properties": {
          "issueText": {
            "description": "Free text field explaining an issue.",
            "example": "Edited issue text.",
            "type": "string"
          }
        },
        "required": [
          "issueText"
        ],
        "type": "object"
      },
      "IssueTextResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "issueText": {
                        "description": "Issue text",
                        "type": "string"
                      },
                      "issueTextModifiedDate": {
                        "description": "Issue text modification date",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "IssueStateRequest": {
        "properties": {
          "issueStateCode": {
            "description": "[The state of the issue](#operation/getAllIssuesStates). Accepted values are `OPENED` or `RESOLVED`.",
            "enum": [
              "OPENED",
              "RESOLVED"
            ],
            "type": "string"
          }
        },
        "required": [
          "issueStateCode"
        ],
        "type": "object"
      },
      "IssueStateResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "issueStateCode": {
                        "description": "[Issue State identifier](#operation/getAllIssuesStates)",
                        "enum": [
                          "OPENED",
                          "RESOLVED"
                        ],
                        "type": "string"
                      },
                      "reopened": {
                        "description": "Issue flag \"reopened\"",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "IssueGetResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "answered": {
                        "description": "Issue flag \"aswered\"",
                        "type": "boolean"
                      },
                      "createdDate": {
                        "description": "Issue creation date",
                        "type": "string"
                      },
                      "issueSeverityLevelCode": {
                        "description": "[Issue Severity Level identifier](#operation/getAllIssueSeverityLevels)",
                        "enum": [
                          "LOW",
                          "MEDIUM",
                          "HIGH"
                        ],
                        "type": "string"
                      },
                      "issueStateCode": {
                        "description": "[Issue State identifier](#operation/getAllIssuesStates)",
                        "enum": [
                          "OPENED",
                          "RESOLVED"
                        ],
                        "type": "string"
                      },
                      "issueSubTypeCode": {
                        "description": "Issue SubType identifier",
                        "enum": [
                          "CLARIFICATION",
                          "MISSPELLING",
                          "POOR_TRANSLATION",
                          "DOES_NOT_FIT_SPACE",
                          "PLACEHOLDER_ISSUE",
                          "REVIEW_TRANSLATION",
                          "CUSTOM",
                          "MT_ERROR"
                        ],
                        "type": "string"
                      },
                      "issueText": {
                        "description": "Issue text",
                        "type": "string"
                      },
                      "issueTextModifiedDate": {
                        "description": "Issue text modification date",
                        "type": "string"
                      },
                      "issueTypeCode": {
                        "description": "[Issue Type identifier](#operation/getIssueTypesByAccount)",
                        "enum": [
                          "SOURCE",
                          "TRANSLATION"
                        ],
                        "type": "string"
                      },
                      "issueUid": {
                        "description": "Issue identifier",
                        "type": "string"
                      },
                      "projectId": {
                        "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
                        "type": "string"
                      },
                      "accountUid": {
                        "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
                        "type": "string"
                      },
                      "issueNumber": {
                        "description": "Issue number",
                        "type": "integer"
                      },
                      "reportedByUserUid": {
                        "description": "User identifier who created (reported) issue",
                        "type": "string"
                      },
                      "resolvedByUserUid": {
                        "description": "User identifier who resolved issue",
                        "type": "string"
                      },
                      "assigneeUserUid": {
                        "description": "User identifier who is assigned to issue",
                        "type": "string"
                      },
                      "resolvedDate": {
                        "description": "Issue resolve date",
                        "type": "string"
                      },
                      "reopened": {
                        "description": "Issue flag \"reopened\"",
                        "type": "boolean"
                      },
                      "reopenedByUserUid": {
                        "description": "User identifier who reopened issue",
                        "type": "string"
                      },
                      "reopenedDate": {
                        "description": "Issue reopen date",
                        "type": "string"
                      },
                      "string": {
                        "properties": {
                          "hashcode": {
                            "description": "Unique identifier for a string in Smartling. Used by the Issues API to attach an issue to a string. You can get the hashcode for a string via String API.",
                            "type": "string"
                          },
                          "localeId": {
                            "description": "An identifying code for a target language in Smartling.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "issueCommentsCount": {
                        "description": "Issue comments count",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "IssueAnsweredRequest": {
        "properties": {
          "answered": {
            "description": "Issue flag \"answered\"",
            "type": "boolean"
          }
        },
        "required": [
          "answered"
        ],
        "type": "object"
      },
      "IssueAnsweredResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "answered": {
                        "description": "Issue flag \"aswered\"",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "IssueAssigneeRequest": {
        "properties": {
          "assigneeUserUid": {
            "description": "User identifier who is assigned to issue",
            "type": "string"
          }
        },
        "required": [
          "assigneeUserUid"
        ],
        "type": "object"
      },
      "IssueAssigneeResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "assigneeUserUid": {
                        "description": "User identifier who is assigned to issue",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "IssueAssigneeDeleteResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "$ref": "#/components/schemas/SuccessResponse"
          }
        }
      },
      "IssueSeverityLevelRequest": {
        "properties": {
          "issueSeverityLevelCode": {
            "description": "[Issue Severity Level identifier](#operation/getAllIssueSeverityLevels)",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH"
            ],
            "type": "string"
          }
        },
        "required": [
          "issueSeverityLevelCode"
        ],
        "type": "object"
      },
      "IssueSeverityLevelResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "issueSeverityLevelCode": {
                        "description": "[Issue Severity Level identifier](#operation/getAllIssueSeverityLevels)",
                        "enum": [
                          "LOW",
                          "MEDIUM",
                          "HIGH"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "IssueChangedTypeRequest": {
        "properties": {
          "issueTypeCode": {
            "description": "[Identifies the issue type](#operation/getIssueTypesByAccount). issueTypeCode is either `SOURCE` or `TRANSLATION`. Each have their own set of ```issueSubType``` values.",
            "enum": [
              "SOURCE",
              "TRANSLATION"
            ],
            "type": "string"
          },
          "issueSubTypeCode": {
            "description": "For issueTypeCode=SOURCE - CLARIFICATION | MISSPELLING, For issueTypeCode=TRANSLATION - POOR_TRANSLATION | DOES_NOT_FIT_SPACE | PLACEHOLDER_ISSUE | REVIEW_TRANSLATION | MT_ERROR",
            "enum": [
              "CLARIFICATION",
              "MISSPELLING",
              "POOR_TRANSLATION",
              "DOES_NOT_FIT_SPACE",
              "PLACEHOLDER_ISSUE",
              "REVIEW_TRANSLATION",
              "CUSTOM",
              "MT_ERROR"
            ],
            "type": "string"
          },
          "localeId": {
            "description": "An identifying code for a target language in Smartling.",
            "example": "ru-RU",
            "type": "string"
          }
        },
        "required": [
          "issueTypeCode",
          "issueSubTypeCode"
        ],
        "type": "object"
      },
      "IssueChangedTypeResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "issueTypeCode": {
                        "description": "[Issue Type identifier](#operation/getIssueTypesByAccount)",
                        "enum": [
                          "SOURCE",
                          "TRANSLATION"
                        ],
                        "type": "string"
                      },
                      "issueSubTypeCode": {
                        "description": "Issue SubType identifier",
                        "enum": [
                          "CLARIFICATION",
                          "MISSPELLING",
                          "POOR_TRANSLATION",
                          "DOES_NOT_FIT_SPACE",
                          "PLACEHOLDER_ISSUE",
                          "REVIEW_TRANSLATION",
                          "CUSTOM",
                          "MT_ERROR"
                        ],
                        "type": "string"
                      },
                      "localeId": {
                        "description": "An identifying code for a target language in Smartling.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "IssueCommentsGetResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "properties": {
                            "commentText": {
                              "description": "Issue comment text",
                              "type": "string"
                            },
                            "commentTextModifiedDate": {
                              "description": "Issue comment modification date",
                              "type": "string"
                            },
                            "createdByUserUid": {
                              "description": "User identifier who added comment",
                              "type": "string"
                            },
                            "createdDate": {
                              "description": "Issue comment creation date",
                              "type": "string"
                            },
                            "issueCommentUid": {
                              "description": "Issue comment identifier",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "description": "Total element count",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "CommentRequest": {
        "properties": {
          "commentText": {
            "description": "Text of the comment you want to make.",
            "example": "Hey, are you sure this is what you want?",
            "type": "string"
          }
        },
        "required": [
          "commentText"
        ],
        "type": "object"
      },
      "IssueCommentAddResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "commentText": {
                        "description": "Issue comment text",
                        "type": "string"
                      },
                      "commentTextModifiedDate": {
                        "description": "Issue comment modification date",
                        "type": "string"
                      },
                      "createdByUserUid": {
                        "description": "User identifier who added comment",
                        "type": "string"
                      },
                      "createdDate": {
                        "description": "Issue comment creation date",
                        "type": "string"
                      },
                      "issueCommentUid": {
                        "description": "Issue comment identifier",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "IssueCommentGetResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "commentText": {
                        "description": "Issue comment text",
                        "type": "string"
                      },
                      "commentTextModifiedDate": {
                        "description": "Issue comment modification date",
                        "type": "string"
                      },
                      "createdByUserUid": {
                        "description": "User identifier who added comment",
                        "type": "string"
                      },
                      "createdDate": {
                        "description": "Issue comment creation date",
                        "type": "string"
                      },
                      "issueCommentUid": {
                        "description": "Issue comment identifier",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "IssueCommentEditResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "commentText": {
                        "description": "Issue comment text",
                        "type": "string"
                      },
                      "commentTextModifiedDate": {
                        "description": "Issue comment modification date",
                        "type": "string"
                      },
                      "createdByUserUid": {
                        "description": "User identifier who added comment",
                        "type": "string"
                      },
                      "createdDate": {
                        "description": "Issue comment creation date",
                        "type": "string"
                      },
                      "issueCommentUid": {
                        "description": "Issue comment identifier",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "IssueCommentDeleteResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "$ref": "#/components/schemas/SuccessResponse"
          }
        }
      },
      "FindRequest": {
        "properties": {
          "createdDateBefore": {
            "description": "Filter issues which were created before this date.",
            "example": "2015-12-23T18:14:09Z",
            "type": "string"
          },
          "createdDateAfter": {
            "description": "Filter issues which were created after this date.",
            "example": "2015-11-10T15:14:09Z",
            "type": "string"
          },
          "resolvedDateBefore": {
            "description": "Filter issues which were resolved before this date.",
            "example": "2015-12-23T18:14:09Z",
            "type": "string"
          },
          "resolvedDateAfter": {
            "description": "Filter issues which were resolved after this date.",
            "example": "2015-11-10T15:14:09Z",
            "type": "string"
          },
          "answered": {
            "description": "Issue flag \"answered\".",
            "example": false,
            "type": "boolean"
          },
          "reopened": {
            "description": "Issue flag \"reopened\".",
            "example": true,
            "type": "boolean"
          },
          "issueSeverityLevelCodes": {
            "items": {
              "description": "[Issue Severity Level identifier](#operation/getAllIssueSeverityLevels)",
              "enum": [
                "LOW",
                "MEDIUM",
                "HIGH"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "issueStateCodes": {
            "items": {
              "description": "[Issue State identifier.](#operation/getAllIssuesStates)",
              "enum": [
                "OPENED",
                "RESOLVED"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "issueSubTypeCodes": {
            "items": {
              "description": "Issue SubType identifier",
              "enum": [
                "CLARIFICATION",
                "MISSPELLING",
                "POOR_TRANSLATION",
                "DOES_NOT_FIT_SPACE",
                "PLACEHOLDER_ISSUE",
                "REVIEW_TRANSLATION",
                "CUSTOM",
                "MT_ERROR"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "issueTypeCodes": {
            "items": {
              "description": "[Issue Type identifier.](#operation/getIssueTypesByAccount)",
              "enum": [
                "SOURCE",
                "TRANSLATION"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "issueWatchingStateCode": {
            "description": "Issue Watching State identifier.",
            "enum": [
              "WATCHING",
              "NOT_WATCHING"
            ],
            "type": "string"
          },
          "reportedByUserUid": {
            "description": "User identifier who created the issue.",
            "example": "661801f19693",
            "type": "string"
          },
          "assigneeUserUid": {
            "description": "User identifier who is assigned to issue.",
            "example": "661801f19693",
            "type": "string"
          },
          "hasComments": {
            "description": "Does the issue have any comments? True for issues that have comments. False for issues that have only the original description but no comments.",
            "example": true,
            "type": "boolean"
          },
          "issueNumbers": {
            "example": [
              10,
              11,
              12
            ],
            "items": {
              "description": "Issue Number identifier.",
              "type": "integer"
            },
            "maxItems": 1000,
            "type": "array"
          },
          "jobFilter": {
            "properties": {
              "jobUids": {
                "example": [
                  "uhtkye5amtiz",
                  "h9blewayxsz9"
                ],
                "items": {
                  "description": "Job identifier.",
                  "type": "string"
                },
                "maxItems": 1000,
                "type": "array"
              },
              "presence": {
                "description": "What kind of issues have to be presented",
                "enum": [
                  "HAS_ANY",
                  "HAS_NOTHING"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "stringFilter": {
            "properties": {
              "hashcodes": {
                "example": [
                  "afe47cdaffe0c0226506919c291d9c1a",
                  "afe37cdaffe0c0226508919c291d9c1a",
                  "afe47cdaffe0c02265406919c291d2c1a"
                ],
                "items": {
                  "description": "Unique identifier for a string in Smartling. Used by the Issues API to attach an issue to a string. You can get the hashcode for a string via the Strings API.",
                  "type": "string"
                },
                "type": "array"
              },
              "localeIds": {
                "example": [
                  "ru-RU"
                ],
                "items": {
                  "description": "An identifying code for a target language in Smartling.",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "limit": {
            "default": 30,
            "description": "limit",
            "example": 30,
            "minimum": 0,
            "type": "integer"
          },
          "offset": {
            "default": 0,
            "description": "offset",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "sortBy": {
            "description": "Sort result by fields",
            "properties": {
              "items": {
                "items": {
                  "properties": {
                    "direction": {
                      "description": "Sort direction",
                      "enum": [
                        "ASC",
                        "DESC"
                      ],
                      "type": "string"
                    },
                    "fieldName": {
                      "description": "Sort by certain field",
                      "enum": [
                        "issueTypeCode",
                        "issueSubTypeCode",
                        "issueStateCode",
                        "createdDate",
                        "resolvedDate",
                        "hashcode",
                        "issueText",
                        "issueTextModifiedDate",
                        "resolvedByUserUid",
                        "reportedByUserUid",
                        "assigneeUserUid"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "IssuesFindResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "properties": {
                            "answered": {
                              "description": "Issue flag \"aswered\"",
                              "type": "boolean"
                            },
                            "createdDate": {
                              "description": "Issue creation date",
                              "type": "string"
                            },
                            "issueSeverityLevelCode": {
                              "description": "[Issue Severity Level identifier](#operation/getAllIssueSeverityLevels)",
                              "enum": [
                                "LOW",
                                "MEDIUM",
                                "HIGH"
                              ],
                              "type": "string"
                            },
                            "issueStateCode": {
                              "description": "[Issue State identifier](#operation/getAllIssuesStates)",
                              "enum": [
                                "OPENED",
                                "RESOLVED"
                              ],
                              "type": "string"
                            },
                            "issueSubTypeCode": {
                              "description": "Issue SubType identifier",
                              "enum": [
                                "CLARIFICATION",
                                "MISSPELLING",
                                "POOR_TRANSLATION",
                                "DOES_NOT_FIT_SPACE",
                                "PLACEHOLDER_ISSUE",
                                "REVIEW_TRANSLATION",
                                "CUSTOM",
                                "MT_ERROR"
                              ],
                              "type": "string"
                            },
                            "issueText": {
                              "description": "Issue text",
                              "type": "string"
                            },
                            "issueTextModifiedDate": {
                              "description": "Issue text modification date",
                              "type": "string"
                            },
                            "issueTypeCode": {
                              "description": "[Issue Type identifier](#operation/getIssueTypesByAccount)",
                              "enum": [
                                "SOURCE",
                                "TRANSLATION"
                              ],
                              "type": "string"
                            },
                            "issueUid": {
                              "description": "Issue identifier",
                              "type": "string"
                            },
                            "projectId": {
                              "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
                              "type": "string"
                            },
                            "accountUid": {
                              "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
                              "type": "string"
                            },
                            "issueNumber": {
                              "description": "Issue number",
                              "type": "integer"
                            },
                            "reportedByUserUid": {
                              "description": "User identifier who created (reported) issue",
                              "type": "string"
                            },
                            "resolvedByUserUid": {
                              "description": "User identifier who resolved issue",
                              "type": "string"
                            },
                            "assigneeUserUid": {
                              "description": "User identifier who is assigned to issue",
                              "type": "string"
                            },
                            "resolvedDate": {
                              "description": "Issue resolve date",
                              "type": "string"
                            },
                            "reopened": {
                              "description": "Issue flag \"reopened\"",
                              "type": "boolean"
                            },
                            "reopenedByUserUid": {
                              "description": "User identifier who reopened issue",
                              "type": "string"
                            },
                            "reopenedDate": {
                              "description": "Issue reopen date",
                              "type": "string"
                            },
                            "string": {
                              "properties": {
                                "hashcode": {
                                  "description": "Unique identifier for a string in Smartling. Used by the Issues API to attach an issue to a string. You can get the hashcode for a string via String API.",
                                  "type": "string"
                                },
                                "localeId": {
                                  "description": "An identifying code for a target language in Smartling.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "issueCommentsCount": {
                              "description": "Issue comments count",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "description": "Total element count",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "CountRequest": {
        "properties": {
          "createdDateBefore": {
            "description": "Filter issues which created before this date",
            "type": "string"
          },
          "createdDateAfter": {
            "description": "Filter issues which created after this date",
            "example": "2015-11-10T15:14:09Z",
            "type": "string"
          },
          "resolvedDateBefore": {
            "description": "Filter issues which resolved before this date",
            "example": "2015-12-23T18:14:09Z",
            "type": "string"
          },
          "resolvedDateAfter": {
            "description": "Filter issues which resolved after this date",
            "example": "2015-11-10T15:14:09Z",
            "type": "string"
          },
          "answered": {
            "description": "Issue flag \"answered\"",
            "example": true,
            "type": "boolean"
          },
          "reopened": {
            "description": "Issue flag \"reopened\".",
            "example": true,
            "type": "boolean"
          },
          "issueSeverityLevelCodes": {
            "items": {
              "description": "[Issue Severity Level identifier](#operation/getAllIssueSeverityLevels)",
              "enum": [
                "LOW",
                "MEDIUM",
                "HIGH"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "issueStateCodes": {
            "items": {
              "description": "[Issue State identifier](#operation/getAllIssuesStates)",
              "enum": [
                "OPENED",
                "RESOLVED"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "issueSubTypeCodes": {
            "items": {
              "description": "Issue SubType identifier",
              "enum": [
                "CLARIFICATION",
                "MISSPELLING",
                "POOR_TRANSLATION",
                "DOES_NOT_FIT_SPACE",
                "PLACEHOLDER_ISSUE",
                "REVIEW_TRANSLATION",
                "CUSTOM",
                "MT_ERROR"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "issueTypeCodes": {
            "items": {
              "description": "[Issue Type identifier](#operation/getIssueTypesByAccount)",
              "enum": [
                "SOURCE",
                "TRANSLATION"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "issueWatchingStateCode": {
            "description": "Issue Watching State identifier.",
            "enum": [
              "WATCHING",
              "NOT_WATCHING"
            ],
            "type": "string"
          },
          "reportedByUserUid": {
            "description": "User identifier who created issue",
            "example": "661801f19693",
            "type": "string"
          },
          "assigneeUserUid": {
            "description": "User identifier who is assigned to issue",
            "example": "661801f19693",
            "type": "string"
          },
          "hasComments": {
            "description": "Does the issue have any comments? True for issues that have comments. False for issues that have only the original description but no comments.",
            "example": true,
            "type": "boolean"
          },
          "issueNumbers": {
            "example": [
              10,
              11,
              12
            ],
            "items": {
              "description": "Issue Number identifier.",
              "type": "integer"
            },
            "maxItems": 1000,
            "type": "array"
          },
          "jobFilter": {
            "properties": {
              "jobUids": {
                "example": [
                  "uhtkye5amtiz",
                  "h9blewayxsz9"
                ],
                "items": {
                  "description": "Job identifier.",
                  "type": "string"
                },
                "maxItems": 1000,
                "type": "array"
              },
              "presence": {
                "description": "What kind of issues have to be presented",
                "enum": [
                  "HAS_ANY",
                  "HAS_NOTHING"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "stringFilter": {
            "properties": {
              "hashcodes": {
                "example": [
                  "afe47cdaffe0c0226506919c291d9c1a",
                  "afe37cdaffe0c0226508919c291d9c1a",
                  "afe47cdaffe0c02265406919c291d2c1a"
                ],
                "items": {
                  "description": "Unique identifier for a string in Smartling. Used by the Issues API to attach an issue to a string. You can get the hashcode for a string via String API.",
                  "type": "string"
                },
                "type": "array"
              },
              "localeIds": {
                "example": [
                  "ru-RU"
                ],
                "items": {
                  "description": "An identifying code for a target language in Smartling.",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "IssuesCountResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "count": {
                        "description": "Count issues",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "FindAccountIssuesRequest": {
        "properties": {
          "projectIds": {
            "example": [
              "c711467bs"
            ],
            "items": {
              "description": "Optional array of unique project identifiers. This can be found in the Smartling Dashboard under Account Settings > API.",
              "type": "string"
            },
            "description": "UOptional array of unique project identifiers. This can be found in the Smartling Dashboard under Account Settings > API.",
            "type": "array"
          },
          "createdDateBefore": {
            "description": "Filter issues which were created before this date.",
            "example": "2015-12-23T18:14:09Z",
            "type": "string"
          },
          "createdDateAfter": {
            "description": "Filter issues which were created after this date.",
            "example": "2015-11-10T15:14:09Z",
            "type": "string"
          },
          "resolvedDateBefore": {
            "description": "Filter issues which were resolved before this date.",
            "example": "2015-12-23T18:14:09Z",
            "type": "string"
          },
          "resolvedDateAfter": {
            "description": "Filter issues which were resolved after this date.",
            "example": "2015-11-10T15:14:09Z",
            "type": "string"
          },
          "answered": {
            "description": "Issue flag \"answered\".",
            "example": false,
            "type": "boolean"
          },
          "reopened": {
            "description": "Issue flag \"reopened\".",
            "example": true,
            "type": "boolean"
          },
          "issueSeverityLevelCodes": {
            "items": {
              "description": "[Issue Severity Level identifier](#operation/getAllIssueSeverityLevels)",
              "enum": [
                "LOW",
                "MEDIUM",
                "HIGH"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "issueStateCodes": {
            "items": {
              "description": "[Issue State identifier.](#operation/getAllIssuesStates)",
              "enum": [
                "OPENED",
                "RESOLVED"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "issueSubTypeCodes": {
            "items": {
              "description": "Issue SubType identifier",
              "enum": [
                "CLARIFICATION",
                "MISSPELLING",
                "POOR_TRANSLATION",
                "DOES_NOT_FIT_SPACE",
                "PLACEHOLDER_ISSUE",
                "REVIEW_TRANSLATION",
                "CUSTOM",
                "MT_ERROR"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "issueTypeCodes": {
            "items": {
              "description": "[Issue Type identifier.](#operation/getIssueTypesByAccount)",
              "enum": [
                "SOURCE",
                "TRANSLATION"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "issueWatchingStateCode": {
            "description": "Issue Watching State identifier.",
            "enum": [
              "WATCHING",
              "NOT_WATCHING"
            ],
            "type": "string"
          },
          "reportedByUserUid": {
            "description": "User identifier who created the issue.",
            "example": "661801f19693",
            "type": "string"
          },
          "assigneeUserUid": {
            "description": "User identifier who is assigned to issue.",
            "example": "661801f19693",
            "type": "string"
          },
          "hasComments": {
            "description": "Does the issue have any comments? True for issues that have comments. False for issues that have only the original description but no comments.",
            "example": true,
            "type": "boolean"
          },
          "issueNumbers": {
            "example": [
              10,
              11,
              12
            ],
            "items": {
              "description": "Issue Number identifier.",
              "type": "integer"
            },
            "maxItems": 1000,
            "type": "array"
          },
          "jobFilter": {
            "properties": {
              "jobUids": {
                "example": [
                  "uhtkye5amtiz",
                  "h9blewayxsz9"
                ],
                "items": {
                  "description": "Job identifier.",
                  "type": "string"
                },
                "maxItems": 1000,
                "type": "array"
              },
              "presence": {
                "description": "What kind of issues have to be presented",
                "enum": [
                  "HAS_ANY",
                  "HAS_NOTHING"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "stringFilter": {
            "properties": {
              "hashcodes": {
                "example": [
                  "afe47cdaffe0c0226506919c291d9c1a",
                  "afe37cdaffe0c0226508919c291d9c1a",
                  "afe47cdaffe0c02265406919c291d2c1a"
                ],
                "items": {
                  "description": "Unique identifier for a string in Smartling. Used by the Issues API to attach an issue to a string. You can get the hashcode for a string via the Strings API.",
                  "type": "string"
                },
                "type": "array"
              },
              "localeIds": {
                "example": [
                  "ru-RU"
                ],
                "items": {
                  "description": "An identifying code for a target language in Smartling.",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "limit": {
            "default": 30,
            "description": "limit",
            "example": 30,
            "minimum": 0,
            "type": "integer"
          },
          "offset": {
            "default": 0,
            "description": "offset",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "sortBy": {
            "description": "Sort result by fields",
            "properties": {
              "items": {
                "items": {
                  "properties": {
                    "direction": {
                      "description": "Sort direction",
                      "enum": [
                        "ASC",
                        "DESC"
                      ],
                      "type": "string"
                    },
                    "fieldName": {
                      "description": "Sort by certain field",
                      "enum": [
                        "issueTypeCode",
                        "issueSubTypeCode",
                        "issueStateCode",
                        "createdDate",
                        "resolvedDate",
                        "hashcode",
                        "issueText",
                        "issueTextModifiedDate",
                        "resolvedByUserUid",
                        "reportedByUserUid",
                        "assigneeUserUid"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "AccountCountRequest": {
        "properties": {
          "projectIds": {
            "example": [
              "c711467bs"
            ],
            "items": {
              "description": "Optional array of unique project identifiers. This can be found in the Smartling Dashboard under Account Settings > API.",
              "type": "string"
            },
            "description": "UOptional array of unique project identifiers. This can be found in the Smartling Dashboard under Account Settings > API.",
            "type": "array"
          },
          "createdDateBefore": {
            "description": "Filter issues which created before this date",
            "type": "string"
          },
          "createdDateAfter": {
            "description": "Filter issues which created after this date",
            "example": "2015-11-10T15:14:09Z",
            "type": "string"
          },
          "resolvedDateBefore": {
            "description": "Filter issues which resolved before this date",
            "example": "2015-12-23T18:14:09Z",
            "type": "string"
          },
          "resolvedDateAfter": {
            "description": "Filter issues which resolved after this date",
            "example": "2015-11-10T15:14:09Z",
            "type": "string"
          },
          "answered": {
            "description": "Issue flag \"answered\"",
            "example": true,
            "type": "boolean"
          },
          "reopened": {
            "description": "Issue flag \"reopened\".",
            "example": true,
            "type": "boolean"
          },
          "issueSeverityLevelCodes": {
            "items": {
              "description": "[Issue Severity Level identifier](#operation/getAllIssueSeverityLevels)",
              "enum": [
                "LOW",
                "MEDIUM",
                "HIGH"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "issueStateCodes": {
            "items": {
              "description": "[Issue State identifier](#operation/getAllIssuesStates)",
              "enum": [
                "OPENED",
                "RESOLVED"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "issueSubTypeCodes": {
            "items": {
              "description": "Issue SubType identifier",
              "enum": [
                "CLARIFICATION",
                "MISSPELLING",
                "POOR_TRANSLATION",
                "DOES_NOT_FIT_SPACE",
                "PLACEHOLDER_ISSUE",
                "REVIEW_TRANSLATION",
                "CUSTOM",
                "MT_ERROR"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "issueTypeCodes": {
            "items": {
              "description": "[Issue Type identifier](#operation/getIssueTypesByAccount)",
              "enum": [
                "SOURCE",
                "TRANSLATION"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "issueWatchingStateCode": {
            "description": "Issue Watching State identifier.",
            "enum": [
              "WATCHING",
              "NOT_WATCHING"
            ],
            "type": "string"
          },
          "reportedByUserUid": {
            "description": "User identifier who created issue",
            "example": "661801f19693",
            "type": "string"
          },
          "assigneeUserUid": {
            "description": "User identifier who is assigned to issue",
            "example": "661801f19693",
            "type": "string"
          },
          "hasComments": {
            "description": "Does the issue have any comments? True for issues that have comments. False for issues that have only the original description but no comments.",
            "example": true,
            "type": "boolean"
          },
          "issueNumbers": {
            "example": [
              10,
              11,
              12
            ],
            "items": {
              "description": "Issue Number identifier.",
              "type": "integer"
            },
            "maxItems": 1000,
            "type": "array"
          },
          "jobFilter": {
            "properties": {
              "jobUids": {
                "example": [
                  "uhtkye5amtiz",
                  "h9blewayxsz9"
                ],
                "items": {
                  "description": "Job identifier.",
                  "type": "string"
                },
                "maxItems": 1000,
                "type": "array"
              },
              "presence": {
                "description": "What kind of issues have to be presented",
                "enum": [
                  "HAS_ANY",
                  "HAS_NOTHING"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "stringFilter": {
            "properties": {
              "hashcodes": {
                "example": [
                  "afe47cdaffe0c0226506919c291d9c1a",
                  "afe37cdaffe0c0226508919c291d9c1a",
                  "afe47cdaffe0c02265406919c291d2c1a"
                ],
                "items": {
                  "description": "Unique identifier for a string in Smartling. Used by the Issues API to attach an issue to a string. You can get the hashcode for a string via String API.",
                  "type": "string"
                },
                "type": "array"
              },
              "localeIds": {
                "example": [
                  "ru-RU"
                ],
                "items": {
                  "description": "An identifying code for a target language in Smartling.",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "IssueGetWatchersResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "properties": {
                            "created": {
                              "description": "Watcher creation date",
                              "type": "string"
                            },
                            "email": {
                              "description": "Watcher email",
                              "type": "string"
                            },
                            "enabled": {
                              "description": "Should send email notification to this email",
                              "type": "boolean"
                            },
                            "modified": {
                              "description": "Watcher modification date",
                              "type": "string"
                            },
                            "name": {
                              "description": "Watcher name",
                              "type": "string"
                            },
                            "uid": {
                              "description": "Watcher identifier",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "description": "Total element count",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "WatcherRequest": {
        "properties": {
          "email": {
            "description": "watcher email",
            "example": "my@maul.com",
            "type": "string"
          },
          "enabled": {
            "description": "Should send email notification to this email.",
            "example": true,
            "type": "boolean"
          },
          "name": {
            "description": "watcher name",
            "example": "Alonso",
            "type": "string"
          }
        },
        "required": [
          "email",
          "name"
        ],
        "type": "object"
      },
      "IssueWatcherResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "created": {
                        "description": "Watcher creation date",
                        "type": "string"
                      },
                      "email": {
                        "description": "Watcher email",
                        "type": "string"
                      },
                      "enabled": {
                        "description": "Should send email notification to this email",
                        "type": "boolean"
                      },
                      "modified": {
                        "description": "Watcher modification date",
                        "type": "string"
                      },
                      "name": {
                        "description": "Watcher name",
                        "type": "string"
                      },
                      "uid": {
                        "description": "Watcher identifier",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "IssueWatcherAssignResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "IssueWatcherDeleteResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "IssueWatcherGetListResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "properties": {
                            "created": {
                              "description": "Watcher creation date",
                              "type": "string"
                            },
                            "email": {
                              "description": "Watcher email",
                              "type": "string"
                            },
                            "enabled": {
                              "description": "Should send email notification to this email",
                              "type": "boolean"
                            },
                            "modified": {
                              "description": "Watcher modification date",
                              "type": "string"
                            },
                            "name": {
                              "description": "Watcher name",
                              "type": "string"
                            },
                            "uid": {
                              "description": "Watcher identifier",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "description": "Total element count",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "AccountIssueSubtypeDescriptionField": {
        "properties": {
          "description": {
            "description": "Description of issue subtype that is shown in the Smartling Dashboard UI and can be used for custom integrations to show a user friendly description of the subtype.",
            "example": "issue subtype code description",
            "type": "string"
          }
        }
      },
      "AccountIssueSubtypeModel": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "issueSubTypeCode": {
                "description": "Unique identifier code of issue subtype",
                "maxLength": 80,
                "pattern": "^[a-zA-Z0-9_]+$",
                "example": "TEST_CODE",
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/AccountIssueSubtypeDescriptionField"
          }
        ]
      },
      "AccountIssueSubTypeResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "issueSubTypeCode": {
                        "description": "Unique identifier code of issue subtype",
                        "type": "string"
                      },
                      "description": {
                        "description": "Description of issue subtype that is shown in the Smartling Dashboard UI and can be used for custom integrations to show a user friendly description of the subtype.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "AccountIssueSubtypeStateField": {
        "properties": {
          "enabled": {
            "description": "Default for new subtypes is 'true'.  If a subtype is updated with enabled = 'false' the subtype cannot be used for new issues. Existing issues will not be affected.",
            "example": true,
            "type": "boolean"
          }
        }
      },
      "AccountIssueSubTypeStateResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "enabled": {
                        "description": "Default for new subtypes is 'true'.  If a subtype is updated with enabled = 'false' the subtype cannot be used for new issues. Existing issues will not be affected.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "schemas-SuccessResponse": {
        "properties": {
          "code": {
            "description": "Indicates whether the response was successful or what error has occurred.",
            "enum": [
              "SUCCESS"
            ],
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "type": "object"
      },
      "setupWebhookResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/schemas-SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "webhookUrl": {
                        "description": "URL where issue webhooks should be sent.",
                        "type": "string"
                      },
                      "enabled": {
                        "description": "Enable or disable issue webhooks.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "setupWebhookRequest": {
        "properties": {
          "webhookUrl": {
            "description": "URL where issue webhooks should be sent.",
            "example": "https://your.domain.com/send/webhook/here",
            "type": "string"
          },
          "enabled": {
            "description": "Enable or disable issue webhooks.",
            "example": "true",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "receiveWebhookResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "$ref": "#/components/schemas/schemas-SuccessResponse"
          }
        }
      },
      "accountUid": {
        "type": "object",
        "properties": {
          "accountUid": {
            "type": "string",
            "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "example": "MeR60Bcq3"
          }
        }
      },
      "projectId": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "A unique project identifier. This can be found in the Smartling Dashboard under Account Settings > API.",
            "example": "ye7ngrakk"
          }
        }
      },
      "issueUid": {
        "type": "object",
        "properties": {
          "issueUid": {
            "type": "string",
            "description": "Unique identifier of issue.",
            "example": "60cef4fc5f05"
          }
        }
      },
      "string": {
        "type": "object",
        "properties": {
          "string": {
            "type": "object",
            "properties": {
              "hashcode": {
                "type": "string",
                "description": "Unique identifier for a string in Smartling. Used by the Issues API to attach an issue to a string. You can get the hashcode for a string via String API.",
                "example": "00000003ecba5dcc412ce71f046b8acb"
              },
              "localeId": {
                "type": "string",
                "description": "An identifying code for a language in Smartling.",
                "example": "es-ES"
              }
            }
          }
        }
      },
      "resolvedByUserUid": {
        "type": "object",
        "properties": {
          "resolvedByUserUid": {
            "type": "string",
            "description": "User identifier who resolved issue.",
            "example": "j8hD1LBFA3Ol"
          }
        }
      },
      "reportedByUserUid": {
        "type": "object",
        "properties": {
          "reportedByUserUid": {
            "type": "string",
            "description": "User identifier who created (reported) issue.",
            "example": "j8hD1LBFA3Ol"
          }
        }
      },
      "createdDate": {
        "type": "object",
        "properties": {
          "createdDate": {
            "type": "string",
            "description": "Issue creation date.",
            "example": "2019-10-09 15:20:11"
          }
        }
      },
      "resolvedDate": {
        "type": "object",
        "properties": {
          "resolvedDate": {
            "type": "string",
            "description": "Issue resolve date.",
            "example": "2019-10-09T15:22:16Z"
          }
        }
      },
      "issueTextModifiedDate": {
        "type": "object",
        "properties": {
          "issueTextModifiedDate": {
            "type": "string",
            "description": "Issue text modification date.",
            "example": "2019-11-09T15:22:16Z"
          }
        }
      },
      "issueText": {
        "type": "object",
        "properties": {
          "issueText": {
            "type": "string",
            "description": "Issue text.",
            "example": "Some text"
          }
        }
      },
      "issueStateCode": {
        "type": "object",
        "properties": {
          "issueStateCode": {
            "description": "Issue State identifier.",
            "enum": [
              "OPENED",
              "RESOLVED"
            ],
            "type": "string",
            "example": "OPENED"
          }
        }
      },
      "issueTypeCode": {
        "type": "object",
        "properties": {
          "issueTypeCode": {
            "description": "-> Issue Type identifier.",
            "enum": [
              "SOURCE",
              "TRANSLATION"
            ],
            "type": "string",
            "example": "TRANSLATION"
          }
        }
      },
      "issueSubTypeCode": {
        "type": "object",
        "properties": {
          "issueSubTypeCode": {
            "description": "Issue SubType identifier.",
            "enum": [
              "CLARIFICATION",
              "MISSPELLING",
              "POOR_TRANSLATION",
              "DOES_NOT_FIT_SPACE",
              "PLACEHOLDER_ISSUE",
              "REVIEW_TRANSLATION",
              "CUSTOM",
              "MT_ERROR"
            ],
            "type": "string",
            "example": "POOR_TRANSLATION"
          }
        }
      },
      "issueCommentsCount": {
        "type": "object",
        "properties": {
          "issueCommentsCount": {
            "type": "integer",
            "description": "Issue comments count.",
            "example": 0
          }
        }
      },
      "answered": {
        "type": "object",
        "properties": {
          "answered": {
            "type": "boolean",
            "description": "Issue flag \"answered\".",
            "example": false
          }
        }
      },
      "issueSeverityLevelCode": {
        "type": "object",
        "properties": {
          "issueSeverityLevelCode": {
            "description": "Issue Severity Level identifier.",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH"
            ],
            "type": "string",
            "example": "MEDIUM"
          }
        }
      },
      "issueNumber": {
        "type": "object",
        "properties": {
          "issueNumber": {
            "type": "integer",
            "description": "Issue number.",
            "example": 1
          }
        }
      },
      "assigneeUserUid": {
        "type": "object",
        "properties": {
          "assigneeUserUid": {
            "type": "string",
            "description": "User identifier who is assigned to issue.",
            "example": "j8hD1LBFA3Ol"
          }
        }
      },
      "reopened": {
        "type": "object",
        "properties": {
          "reopened": {
            "type": "boolean",
            "description": "Issue flag \"reopened\".",
            "example": false
          }
        }
      },
      "reopenedByUserUid": {
        "type": "object",
        "properties": {
          "reopenedByUserUid": {
            "type": "string",
            "description": "User identifier who is reopened the issue.",
            "example": "j8hD1LBFA3Ol"
          }
        }
      },
      "reopenedDate": {
        "type": "object",
        "properties": {
          "reopenedDate": {
            "type": "string",
            "description": "Issue reopen date.",
            "example": "2019-10-09 15:20:11"
          }
        }
      },
      "issueCreatedRequest": {
        "title": "Issue created",
        "properties": {
          "type": {
            "description": "Event type code",
            "type": "string",
            "example": "issue.created",
            "enum": [
              "issue.created"
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/accountUid"
              },
              {
                "$ref": "#/components/schemas/projectId"
              },
              {
                "$ref": "#/components/schemas/issueUid"
              },
              {
                "$ref": "#/components/schemas/string"
              },
              {
                "$ref": "#/components/schemas/resolvedByUserUid"
              },
              {
                "$ref": "#/components/schemas/reportedByUserUid"
              },
              {
                "$ref": "#/components/schemas/createdDate"
              },
              {
                "$ref": "#/components/schemas/resolvedDate"
              },
              {
                "$ref": "#/components/schemas/issueTextModifiedDate"
              },
              {
                "$ref": "#/components/schemas/issueText"
              },
              {
                "$ref": "#/components/schemas/issueStateCode"
              },
              {
                "$ref": "#/components/schemas/issueTypeCode"
              },
              {
                "$ref": "#/components/schemas/issueSubTypeCode"
              },
              {
                "$ref": "#/components/schemas/issueCommentsCount"
              },
              {
                "$ref": "#/components/schemas/answered"
              },
              {
                "$ref": "#/components/schemas/issueSeverityLevelCode"
              },
              {
                "$ref": "#/components/schemas/issueNumber"
              },
              {
                "$ref": "#/components/schemas/assigneeUserUid"
              },
              {
                "$ref": "#/components/schemas/reopened"
              },
              {
                "$ref": "#/components/schemas/reopenedByUserUid"
              },
              {
                "$ref": "#/components/schemas/reopenedDate"
              }
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "issueDeletedRequest": {
        "title": "Issue deleted",
        "properties": {
          "type": {
            "description": "Event type code",
            "type": "string",
            "example": "issue.deleted",
            "enum": [
              "issue.deleted"
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/accountUid"
              },
              {
                "$ref": "#/components/schemas/projectId"
              },
              {
                "$ref": "#/components/schemas/issueUid"
              },
              {
                "$ref": "#/components/schemas/string"
              },
              {
                "$ref": "#/components/schemas/resolvedByUserUid"
              },
              {
                "$ref": "#/components/schemas/reportedByUserUid"
              },
              {
                "$ref": "#/components/schemas/createdDate"
              },
              {
                "$ref": "#/components/schemas/resolvedDate"
              },
              {
                "$ref": "#/components/schemas/issueTextModifiedDate"
              },
              {
                "$ref": "#/components/schemas/issueText"
              },
              {
                "$ref": "#/components/schemas/issueStateCode"
              },
              {
                "$ref": "#/components/schemas/issueTypeCode"
              },
              {
                "$ref": "#/components/schemas/issueSubTypeCode"
              },
              {
                "$ref": "#/components/schemas/issueCommentsCount"
              },
              {
                "$ref": "#/components/schemas/answered"
              },
              {
                "$ref": "#/components/schemas/issueSeverityLevelCode"
              },
              {
                "$ref": "#/components/schemas/issueNumber"
              },
              {
                "$ref": "#/components/schemas/assigneeUserUid"
              },
              {
                "$ref": "#/components/schemas/reopened"
              },
              {
                "$ref": "#/components/schemas/reopenedByUserUid"
              },
              {
                "$ref": "#/components/schemas/reopenedDate"
              }
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "issueStateChangedRequest": {
        "title": "Issue state changed",
        "properties": {
          "type": {
            "description": "Event type code",
            "type": "string",
            "example": "issue.stateChanged",
            "enum": [
              "issue.stateChanged"
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/accountUid"
              },
              {
                "$ref": "#/components/schemas/projectId"
              },
              {
                "$ref": "#/components/schemas/issueUid"
              },
              {
                "$ref": "#/components/schemas/issueStateCode"
              }
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "issueAnsweredRequest": {
        "title": "Issue answered",
        "properties": {
          "type": {
            "description": "Event type code",
            "type": "string",
            "example": "issue.answered",
            "enum": [
              "issue.answered"
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/accountUid"
              },
              {
                "$ref": "#/components/schemas/projectId"
              },
              {
                "$ref": "#/components/schemas/issueUid"
              },
              {
                "$ref": "#/components/schemas/answered"
              }
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "issueSeverityLevelChangedRequest": {
        "title": "Issue severity level changed",
        "properties": {
          "type": {
            "description": "Event type code",
            "type": "string",
            "example": "issue.severityLevelChanged",
            "enum": [
              "issue.severityLevelChanged"
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/accountUid"
              },
              {
                "$ref": "#/components/schemas/projectId"
              },
              {
                "$ref": "#/components/schemas/issueUid"
              },
              {
                "$ref": "#/components/schemas/issueSeverityLevelCode"
              }
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "commentText": {
        "type": "object",
        "properties": {
          "commentText": {
            "type": "string",
            "description": "Comment text.",
            "example": "comment text"
          }
        }
      },
      "commentTextModifiedDate": {
        "type": "object",
        "properties": {
          "commentTextModifiedDate": {
            "type": "string",
            "description": "Comment text modification date.",
            "example": "2016-12-22T12:34:49Z"
          }
        }
      },
      "commentCreatedDate": {
        "type": "object",
        "properties": {
          "createdDate": {
            "type": "string",
            "description": "Comment creation date.",
            "example": "2019-10-09 15:20:11"
          }
        }
      },
      "createdByUserUid": {
        "type": "object",
        "properties": {
          "createdByUserUid": {
            "type": "string",
            "description": "User identifier who added comment.",
            "example": "661801f19693"
          }
        }
      },
      "createdByWatcherUid": {
        "type": "object",
        "properties": {
          "createdByWatcherUid": {
            "type": "string",
            "description": "Watcher identifier who added comment."
          }
        }
      },
      "issueCommentUid": {
        "type": "object",
        "properties": {
          "issueCommentUid": {
            "type": "string",
            "description": "Unique identifier of comment.",
            "example": "a75fea779bbb"
          }
        }
      },
      "issueCommentAdded": {
        "title": "Issue comment added",
        "properties": {
          "type": {
            "description": "Event type code",
            "type": "string",
            "example": "issue.commentAdded",
            "enum": [
              "issue.commentAdded"
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/accountUid"
              },
              {
                "$ref": "#/components/schemas/projectId"
              },
              {
                "$ref": "#/components/schemas/issueUid"
              },
              {
                "$ref": "#/components/schemas/string"
              },
              {
                "$ref": "#/components/schemas/commentText"
              },
              {
                "$ref": "#/components/schemas/commentTextModifiedDate"
              },
              {
                "$ref": "#/components/schemas/commentCreatedDate"
              },
              {
                "$ref": "#/components/schemas/createdByUserUid"
              },
              {
                "$ref": "#/components/schemas/createdByWatcherUid"
              },
              {
                "$ref": "#/components/schemas/issueCommentUid"
              }
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "uid": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "Unique identifier of watcher.",
            "example": "323323wsss"
          }
        }
      },
      "email": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Watcher email.",
            "example": "my@mail.com"
          }
        }
      },
      "name": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Watcher name.",
            "example": "Mike Albert"
          }
        }
      },
      "created": {
        "type": "object",
        "properties": {
          "created": {
            "type": "boolean",
            "description": "Watcher creation date.",
            "example": "2015-12-21T16:38:48Z"
          }
        }
      },
      "modified": {
        "type": "object",
        "properties": {
          "modified": {
            "type": "boolean",
            "description": "Watcher modification date.",
            "example": "2015-12-21T16:38:48Z"
          }
        }
      },
      "enabled": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Should send email notification to this watcher email.",
            "example": true
          }
        }
      },
      "issueWatcherAdded": {
        "title": "Issue watcher added",
        "properties": {
          "type": {
            "description": "Event type code",
            "type": "string",
            "example": "issue.watcherAdded",
            "enum": [
              "issue.watcherAdded"
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/accountUid"
              },
              {
                "$ref": "#/components/schemas/projectId"
              },
              {
                "$ref": "#/components/schemas/issueUid"
              },
              {
                "$ref": "#/components/schemas/string"
              },
              {
                "$ref": "#/components/schemas/uid"
              },
              {
                "$ref": "#/components/schemas/email"
              },
              {
                "$ref": "#/components/schemas/name"
              },
              {
                "$ref": "#/components/schemas/created"
              },
              {
                "$ref": "#/components/schemas/modified"
              },
              {
                "$ref": "#/components/schemas/enabled"
              }
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "issueDescriptionChanged": {
        "title": "Issue description changed",
        "properties": {
          "type": {
            "description": "Event type code",
            "type": "string",
            "example": "issue.descriptionChanged",
            "enum": [
              "issue.descriptionChanged"
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/accountUid"
              },
              {
                "$ref": "#/components/schemas/projectId"
              },
              {
                "$ref": "#/components/schemas/issueUid"
              },
              {
                "$ref": "#/components/schemas/issueText"
              }
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "localeId": {
        "type": "object",
        "properties": {
          "localeId": {
            "type": "string",
            "description": "An identifying code for a language in Smartling.",
            "example": "es-ES"
          }
        }
      },
      "issueTypeChanged": {
        "title": "Issue type changed",
        "properties": {
          "type": {
            "description": "Event type code",
            "type": "string",
            "example": "issue.typeChanged",
            "enum": [
              "issue.typeChanged"
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/accountUid"
              },
              {
                "$ref": "#/components/schemas/projectId"
              },
              {
                "$ref": "#/components/schemas/issueUid"
              },
              {
                "$ref": "#/components/schemas/issueTypeCode"
              },
              {
                "$ref": "#/components/schemas/issueSubTypeCode"
              },
              {
                "$ref": "#/components/schemas/localeId"
              }
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "issueSubTypeChanged": {
        "title": "Issue subtype changed",
        "properties": {
          "type": {
            "description": "Event type code",
            "type": "string",
            "example": "issue.subTypeChanged",
            "enum": [
              "issue.subTypeChanged"
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/accountUid"
              },
              {
                "$ref": "#/components/schemas/projectId"
              },
              {
                "$ref": "#/components/schemas/issueUid"
              },
              {
                "$ref": "#/components/schemas/issueSubTypeCode"
              }
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "issueLocaleChanged": {
        "title": "Issue locale changed",
        "properties": {
          "type": {
            "description": "Event type code",
            "type": "string",
            "example": "issue.localeChanged",
            "enum": [
              "issue.localeChanged"
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/accountUid"
              },
              {
                "$ref": "#/components/schemas/projectId"
              },
              {
                "$ref": "#/components/schemas/issueUid"
              },
              {
                "$ref": "#/components/schemas/localeId"
              }
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "IssueTypesResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "items": {
                        "items": {
                          "properties": {
                            "description": {
                              "description": "Issue type description",
                              "type": "string"
                            },
                            "issueTypeCode": {
                              "description": "Issue type identifier",
                              "enum": [
                                "SOURCE",
                                "TRANSLATION"
                              ],
                              "type": "string"
                            },
                            "subTypes": {
                              "type": "array",
                              "properties": {
                                "description": {
                                  "description": "Issue subtype description",
                                  "type": "string"
                                },
                                "issueSubTypeCode": {
                                  "description": "Issue subtype identifier",
                                  "enum": [
                                    "CLARIFICATION",
                                    "MISSPELLING",
                                    "POOR_TRANSLATION",
                                    "DOES_NOT_FIT_SPACE",
                                    "PLACEHOLDER_ISSUE",
                                    "REVIEW_TRANSLATION",
                                    "CUSTOM",
                                    "MT_ERROR"
                                  ],
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "totalCount": {
                        "description": "Total element count",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "schemas-FileType": {
        "type": "string",
        "description": "Supported file types",
        "enum": [
          "DOCX",
          "DOCM",
          "RTF",
          "PPTX",
          "XLSX",
          "IDML",
          "RESX",
          "PLAIN_TEXT",
          "XML",
          "HTML",
          "PRES",
          "SRT",
          "MARKDOWN",
          "DITA",
          "VTT",
          "FLARE",
          "SVG",
          "XLIFF2",
          "CSV",
          "XLSX_TEMPLATE"
        ]
      },
      "FileUploadResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/schemas-SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "fileUid": {
                        "description": "Unique identifier for uploaded file.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "schemas-Error401Response": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occurred.",
                "enum": [
                  "AUTHENTICATION_ERROR",
                  "AUTHORIZATION_ERROR"
                ],
                "type": "string"
              },
              "errors": {
                "items": {
                  "$ref": "#/components/schemas/Error"
                },
                "type": "array"
              }
            },
            "required": [
              "code",
              "errors"
            ],
            "type": "object"
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "schemas-Error429Response": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occurred.",
                "enum": [
                  "MAX_OPERATIONS_LIMIT_EXCEEDED"
                ],
                "type": "string"
              },
              "errors": {
                "items": {
                  "$ref": "#/components/schemas/Error"
                },
                "type": "array"
              }
            },
            "required": [
              "code",
              "errors"
            ],
            "type": "object"
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "schemas-Error500Response": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occurred.",
                "enum": [
                  "GENERAL_ERROR",
                  "MAINTENANCE_MODE_ERROR"
                ],
                "type": "string"
              },
              "errors": {
                "items": {
                  "$ref": "#/components/schemas/Error"
                },
                "type": "array"
              }
            },
            "required": [
              "code",
              "errors"
            ],
            "type": "object"
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "AcceptedResponse": {
        "properties": {
          "code": {
            "description": "Indicates whether the response was successful or what error has occurred.",
            "enum": [
              "ACCEPTED"
            ],
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "type": "object"
      },
      "MtResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcceptedResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "mtUid": {
                        "description": "Unique identifier for the file mt action.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "MTState": {
        "type": "string",
        "description": "| State | Description |\n|---------------|-------------|\n| **QUEUED** | Translation request queued.|\n| **PROCESSING** | Translation in progress.|\n| **FAILED** | Translation failed.|\n| **CANCELED** | Translation cancelled by user.|\n| **COMPLETED** | Translation complete.|",
        "enum": [
          "QUEUED",
          "PROCESSING",
          "FAILED",
          "CANCELED",
          "COMPLETED"
        ]
      },
      "schemas-Error": {
        "type": "object",
        "properties": {
          "key": {
            "description": "Error key",
            "example": "generalError",
            "type": "string"
          },
          "message": {
            "description": "Human readable description of the error",
            "example": "Sorry, something went wrong. We notified the responsible team. If you still need to contact us please provide this error code: jtcorrr3",
            "type": "string"
          },
          "details": {
            "description": "Details of the occurred error.",
            "example": "{\"errorId\": \"jtcorrr3\"}",
            "type": "object"
          }
        },
        "required": [
          "key",
          "message"
        ]
      },
      "MtStatusResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/schemas-SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "state": {
                        "$ref": "#/components/schemas/MTState"
                      },
                      "requestedStringCount": {
                        "type": "integer",
                        "description": "Amount of strings requested for translation"
                      },
                      "error": {
                        "$ref": "#/components/schemas/schemas-Error"
                      },
                      "localeProcessStatuses": {
                        "type": "object",
                        "properties": {
                          "localeId": {
                            "type": "string",
                            "description": "Locale, requested for translation"
                          },
                          "state": {
                            "$ref": "#/components/schemas/MTState"
                          },
                          "processedStringCount": {
                            "type": "integer",
                            "description": "Amount of strings translated for the locale"
                          },
                          "error": {
                            "$ref": "#/components/schemas/schemas-Error"
                          }
                        }
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "schemas-Error400Response": {
        "type": "object",
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occurred.",
                "enum": [
                  "VALIDATION_ERROR"
                ],
                "type": "string"
              },
              "errors": {
                "items": {
                  "$ref": "#/components/schemas/Error"
                },
                "type": "array"
              }
            },
            "required": [
              "code",
              "errors"
            ],
            "type": "object"
          }
        },
        "required": [
          "response"
        ]
      },
      "schemas-EmptyResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/schemas-SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "description": "Always empty.",
                    "type": "object",
                    "example": {}
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "LanguageDetectionResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcceptedResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "languageDetectionUid": {
                        "description": "Unique identifier for the language detection action.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "LanguageDetectionState": {
        "type": "string",
        "description": "| State | Description |\n|---------------|-------------|\n| **QUEUED** | Language detection in progress.|\n| **FAILED** | Language detection failed.|\n| **COMPLETED** | Language detection complete.|",
        "enum": [
          "QUEUED",
          "FAILED",
          "COMPLETED"
        ]
      },
      "LanguageDetectionStatusResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/schemas-SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "properties": {
                      "state": {
                        "$ref": "#/components/schemas/LanguageDetectionState"
                      },
                      "error": {
                        "$ref": "#/components/schemas/schemas-Error"
                      },
                      "detectedSourceLanguages": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "languageId": {
                              "type": "string",
                              "description": "Detected source language of the file"
                            },
                            "defaultLocaleId": {
                              "type": "string",
                              "description": "Smartling's default locale that corresponds to languageId"
                            }
                          }
                        }
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "components-schemas-EmptyResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/schemas-SuccessResponse"
              },
              {
                "properties": {
                  "data": {
                    "description": "Always null.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            ]
          }
        }
      },
      "schemas-Error423Response": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occurred.",
                "enum": [
                  "RESOURCE_LOCKED"
                ],
                "type": "string"
              },
              "errors": {
                "items": {
                  "$ref": "#/components/schemas/Error"
                },
                "type": "array"
              }
            },
            "required": [
              "code",
              "errors"
            ],
            "type": "object"
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "checkTypeCodeEnum": {
        "type": "string",
        "description": "[check type code](#operation/getTranslationQualityCheckTypes)",
        "example": "LEADING_TRAILING_SPACES",
        "enum": [
          "LEADING_TRAILING_SPACES",
          "ORIGINAL_EQUALS_TARGET",
          "WHITESPACES",
          "SPELLCHECK",
          "TAG_CONSISTENCY",
          "TARGET_LENGTH_LIMIT",
          "NUMBER_CONSISTENCY",
          "REPEATED_WORD",
          "TARGET_IN_WRONG_LANGUAGE",
          "SOURCE_IN_WRONG_LANGUAGE",
          "SEGMENT_COMPLETENESS",
          "NON_TRANSLATABLE_TEXT",
          "EMOJI_CONSISTENCY",
          "INSERTABLE_CONSISTENCY",
          "TARGET_SOURCE_CONSISTENCY",
          "BLACKLISTED_TERMS",
          "GLOSSARY_COMPLIANCE",
          "TRADEMARK_CONSISTENCY",
          "GRAMMAR_CHECK",
          "GLOBAL_CAPITALISATION_CONSISTENCY",
          "PUNCTUATION_CONSISTENCY",
          "PLURALS_REPETITION",
          "REGEX_CHECK",
          "OPEN_ISSUES"
        ]
      },
      "groupUidResponse": {
        "type": "object",
        "properties": {
          "groupUid": {
            "type": "string",
            "description": "Unique identifier of corresponding group."
          }
        }
      },
      "profileUidResponse": {
        "type": "object",
        "properties": {
          "profileUid": {
            "type": "string",
            "description": "Unique identifier of corresponding profile.",
            "example": "ce6d6b5dbc12"
          }
        }
      },
      "severityLevelCodeEnum": {
        "type": "string",
        "description": "severity level code",
        "example": "MEDIUM",
        "enum": [
          "DISABLED",
          "LOW",
          "MEDIUM",
          "HIGH"
        ]
      },
      "severityLevelCodeResponse": {
        "type": "object",
        "properties": {
          "severityLevelCode": {
            "$ref": "#/components/schemas/severityLevelCodeEnum"
          }
        }
      },
      "checkTypeCodeResponse": {
        "type": "object",
        "properties": {
          "checkTypeCode": {
            "type": "string",
            "$ref": "#/components/schemas/checkTypeCodeEnum",
            "description": "check type code"
          }
        }
      },
      "checkSubtypeEnum": {
        "enum": [
          "EMOJI_ADDED",
          "EMOJI_DELETED",
          "EMOJI_PRESENT",
          "INSERTABLE_ADDED",
          "INSERTABLE_DELETED",
          "PLACEABLE_ADDED",
          "PLACEABLE_DELETED",
          "SPACES_AROUND_PLACEABLE",
          "PLACEABLE_FORMAT",
          "NUMBER_ADDED",
          "NUMBER_DELETED",
          "NUMBER_INCORRECT_CONVERSION",
          "TARGET_IS_EMPTY",
          "TARGET_IS_MUCH_SHORTER_THAN_SOURCE",
          "TARGET_IS_MUCH_LONGER_THAN_SOURCE",
          "TAG_ADDED",
          "TAG_DELETED",
          "SPACES_AROUND_TAGS",
          "TAG_ORDER_IS_CHANGED",
          "OPEN_CLOSED_TAG_ORDER_IS_CHANGED",
          "INVALID_TAG_NESTING",
          "TAG_IS_CHANGED",
          "SAME_SOURCE_DIFFERENT_TRANSLATIONS",
          "SAME_TRANSLATION_DIFFERENT_SOURCES"
        ]
      },
      "checkSubTypeCodeResponse": {
        "type": "object",
        "properties": {
          "checkSubTypeCode": {
            "type": "string",
            "$ref": "#/components/schemas/checkSubtypeEnum",
            "description": "check subtype code",
            "example": "EMOJI_ADDED"
          },
          "name": {
            "type": "string",
            "description": "check subtype name",
            "example": "Emoji added"
          }
        }
      },
      "severityLevelCodeResponse1": {
        "type": "object",
        "properties": {
          "severityLevelCode": {
            "type": "string",
            "$ref": "#/components/schemas/severityLevelCodeEnum",
            "description": "severity level code",
            "example": "MEDIUM"
          }
        }
      },
      "targetLocaleId": {
        "type": "object",
        "properties": {
          "targetLocaleId": {
            "type": "string",
            "description": "Smartling ID for the language you want to translate to.",
            "example": "it-IT"
          }
        },
        "required": [
          "targetLocaleId"
        ]
      },
      "ProfilesAccountCheckTypeGetGroupsResponse": {
        "type": "object",
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/schemas-SuccessResponse"
              },
              {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "totalCount": {
                        "type": "integer",
                        "description": "Total element count",
                        "example": 1
                      },
                      "items": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/groupUidResponse"
                            },
                            {
                              "$ref": "#/components/schemas/profileUidResponse"
                            },
                            {
                              "$ref": "#/components/schemas/severityLevelCodeResponse"
                            },
                            {
                              "$ref": "#/components/schemas/checkTypeCodeResponse"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "subTypes": {
                                  "type": "array",
                                  "items": {
                                    "allOf": [
                                      {
                                        "$ref": "#/components/schemas/checkSubTypeCodeResponse"
                                      },
                                      {
                                        "$ref": "#/components/schemas/severityLevelCodeResponse1"
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "locales": {
                                  "type": "array",
                                  "items": {
                                    "allOf": [
                                      {
                                        "$ref": "#/components/schemas/targetLocaleId"
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "ignoreSign": {
                                  "type": "string",
                                  "example": false
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "ProfilesAccountCheckTypeCreateGroupResponse": {
        "type": "object",
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/schemas-SuccessResponse"
              },
              {
                "type": "object",
                "properties": {
                  "data": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/groupUidResponse"
                      },
                      {
                        "$ref": "#/components/schemas/profileUidResponse"
                      },
                      {
                        "$ref": "#/components/schemas/severityLevelCodeResponse"
                      },
                      {
                        "$ref": "#/components/schemas/checkTypeCodeResponse"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "subTypes": {
                            "type": "array",
                            "items": {
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/checkSubTypeCodeResponse"
                                },
                                {
                                  "$ref": "#/components/schemas/severityLevelCodeResponse1"
                                }
                              ]
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "locales": {
                            "type": "array",
                            "items": {
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/targetLocaleId"
                                }
                              ]
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "ignoreSign": {
                            "type": "string",
                            "example": false
                          }
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      "checkTypeCodeOnlyWithSubtypesEnum": {
        "enum": [
          "TAG_CONSISTENCY",
          "NUMBER_CONSISTENCY",
          "SEGMENT_COMPLETENESS",
          "NON_TRANSLATABLE_TEXT",
          "EMOJI_CONSISTENCY",
          "INSERTABLE_CONSISTENCY",
          "TARGET_SOURCE_CONSISTENCY"
        ]
      },
      "severityLevelCodeEnumCopyForRequest": {
        "enum": [
          "DISABLED",
          "LOW",
          "MEDIUM",
          "HIGH"
        ]
      },
      "severityLevelCode": {
        "type": "object",
        "properties": {
          "severityLevelCode": {
            "type": "string",
            "$ref": "#/components/schemas/severityLevelCodeEnumCopyForRequest",
            "description": "[severity level code](#operation/getTranslationQualityCheckSeverityLevels)",
            "example": "MEDIUM"
          }
        },
        "required": [
          "severityLevelCode"
        ]
      },
      "CheckTypeSeverityLevelPutRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/severityLevelCode"
          }
        ]
      },
      "CheckTypeSeverityLevelResponse": {
        "type": "object",
        "properties": {
          "response": {
            "allOf": [
              {
                "$ref": "#/components/schemas/schemas-SuccessResponse"
              },
              {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/severityLevelCodeResponse"
                  }
                }
              }
            ]
          }
        }
      },
      "FallbackLocaleCommandPTO": {
        "type": "object",
        "required": [
          "fallbackLocaleId",
          "localeIds"
        ],
        "properties": {
          "fallbackLocaleId": {
            "type": "string",
            "description": "Fallback locale id.",
            "example": "en"
          },
          "localeIds": {
            "type": "array",
            "description": "Locales ids.",
            "items": {
              "type": "string"
            },
            "example": [
              "en-US",
              "en-ES"
            ]
          }
        },
        "description": "Configuration of the fallBack locale. Allow to select translations from fallback locale in case if requested locale does not provide translation  data."
      },
      "GlossaryCommandPTO": {
        "type": "object",
        "required": [
          "glossaryName"
        ],
        "properties": {
          "glossaryName": {
            "type": "string",
            "description": "Name of the glossary. Character limit is equal to 170 characters.",
            "example": "My new glossary"
          },
          "description": {
            "type": "string",
            "description": "Description of the glossary. Character limit is equal to 250 characters.",
            "example": "Glossary created for common terms in scope of 'my-project'"
          },
          "verificationMode": {
            "type": "boolean",
            "description": "Verification mode."
          },
          "localeIds": {
            "type": "array",
            "description": "Supported locale ids.",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "example": [
              "uk-UA",
              "en",
              "pt",
              "pt-BR"
            ]
          },
          "fallbackLocales": {
            "type": "array",
            "description": "Fallback locales configuration.",
            "items": {
              "$ref": "#/components/schemas/FallbackLocaleCommandPTO"
            }
          }
        },
        "description": "Glossary command."
      },
      "FallbackLocalePTO": {
        "type": "object",
        "properties": {
          "fallbackLocaleId": {
            "type": "string",
            "description": "fallback locale id.",
            "example": "en"
          },
          "localeIds": {
            "type": "array",
            "description": "Locale ids.",
            "items": {
              "type": "string"
            },
            "example": [
              "en-US"
            ]
          }
        },
        "description": "Fallback locale configuration."
      },
      "GlossaryResponse": {
        "type": "object",
        "properties": {
          "glossaryUid": {
            "type": "string",
            "description": "Glossary uid.",
            "example": "58966072-6569-4c22-930c-de906b7fb18d"
          },
          "accountUid": {
            "type": "string",
            "description": "Account uid.",
            "example": "56a0b220"
          },
          "glossaryName": {
            "type": "string",
            "description": "Glossary name.",
            "example": "CF-enabled-glossary-V2"
          },
          "description": {
            "type": "string",
            "description": "Glossary description."
          },
          "verificationMode": {
            "type": "boolean",
            "description": "Glossary verificationMode."
          },
          "archived": {
            "type": "boolean",
            "description": "Glossary archived. In case if {@code true} set, then glossary is archived."
          },
          "createdByUserUid": {
            "type": "string",
            "description": "Uid of the glossary creator.",
            "example": "671b520051b2"
          },
          "modifiedByUserUid": {
            "type": "string",
            "description": "Uid of the user who had last modified glossary.",
            "example": "671b520051b2"
          },
          "createdDate": {
            "type": "string",
            "description": "Glossary creation date.",
            "example": "2021-07-20T13:19:46Z"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Glossary last modification date.",
            "example": "2021-07-20T13:19:46Z"
          },
          "localeIds": {
            "type": "array",
            "description": "Locale ids that  current glossary supports.",
            "items": {
              "type": "string"
            },
            "example": [
              "en",
              "en-US",
              "hi-IN",
              "pl-PL",
              "uk-UA"
            ]
          },
          "fallbackLocales": {
            "type": "array",
            "description": "Fallback locales configuration.",
            "items": {
              "$ref": "#/components/schemas/FallbackLocalePTO"
            }
          }
        },
        "description": "Glossary response."
      },
      "GlossaryResponsePTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/schemas-SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/GlossaryResponse"
              }
            }
          }
        ]
      },
      "Error403Response": {
        "type": "object",
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occurred.",
                "enum": [
                  "ACCESS_DENIED_ERROR"
                ],
                "type": "string"
              },
              "errors": {
                "items": {
                  "$ref": "#/components/schemas/Error"
                },
                "type": "array"
              }
            },
            "required": [
              "code",
              "errors"
            ],
            "type": "object"
          }
        },
        "required": [
          "response"
        ]
      },
      "schemas-Error404Response": {
        "type": "object",
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occurred.",
                "enum": [
                  "NOT_FOUND_ERROR"
                ],
                "type": "string"
              },
              "errors": {
                "items": {
                  "$ref": "#/components/schemas/Error"
                },
                "type": "array"
              }
            },
            "required": [
              "code",
              "errors"
            ],
            "type": "object"
          }
        },
        "required": [
          "response"
        ]
      },
      "components-schemas-Error500Response": {
        "properties": {
          "response": {
            "properties": {
              "code": {
                "description": "Indicates whether the response was successful or what error has occurred.",
                "enum": [
                  "GENERAL_ERROR"
                ],
                "type": "string"
              },
              "errors": {
                "items": {
                  "$ref": "#/components/schemas/Error"
                },
                "type": "array"
              }
            },
            "required": [
              "code",
              "errors"
            ],
            "type": "object"
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "GlossariesArchiveUnarchiveCommandPTO": {
        "type": "object",
        "required": [
          "glossaryUids"
        ],
        "properties": {
          "glossaryUids": {
            "type": "array",
            "description": "Glossary uids fot the archive / restore operation.",
            "items": {
              "type": "string"
            },
            "example": [
              "58966072-6569-4c22-930c-de906b7fb18d",
              "12366072-6569-4c22-930c-de906b7fb18d"
            ]
          }
        },
        "description": "Archive / restore glossaries command."
      },
      "GlossariesArchiveUnarchivedResponse": {
        "type": "object",
        "properties": {
          "glossaryUids": {
            "type": "array",
            "description": "Uids of the glossaries on which operation was performed.",
            "items": {
              "type": "string"
            },
            "example": [
              "58966072-6569-4c22-930c-de906b7fb18d"
            ]
          }
        },
        "description": "Result of the bulk archive / restore operation on glossary."
      },
      "GlossariesArchiveUnarchivedResponsePTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/schemas-SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/GlossariesArchiveUnarchivedResponse"
              }
            }
          }
        ]
      },
      "PaginationCommandPTO": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "description": "Amount of items to skipp.",
            "example": 0
          },
          "limit": {
            "type": "integer",
            "description": "Amount of items to fetch.",
            "example": 50
          }
        },
        "description": "Pagination options."
      },
      "SortCommandPTO": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "enum": [
              "glossaryName",
              "createdDate",
              "lastModifiedDate"
            ],
            "description": "Sorting field."
          },
          "direction": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "Sorting direction."
          }
        },
        "description": "Sorting options for the filter."
      },
      "GetGlossariesByFilterCommandPTO": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Allow to search glossaries by query in scope of glossaryName or description properties. Also supports exact search by glossaryUid.",
            "example": "some name"
          },
          "glossaryState": {
            "type": "string",
            "description": "Glossary state.",
            "enum": [
              "ACTIVE",
              "ARCHIVED",
              "BOTH"
            ],
            "example": "BOTH"
          },
          "targetLocaleId": {
            "type": "string",
            "description": "Filter glossaries that have passed locale - preconfigured.",
            "example": "uk-UA"
          },
          "glossaryUids": {
            "type": "array",
            "description": "GlossaryUids filter.",
            "items": {
              "type": "string"
            },
            "example": [
              "58966072-6569-4c22-930c-de906b7fb18d",
              "12366072-6569-4c22-930c-de906b7fb18d"
            ]
          },
          "paging": {
            "description": "Paging options for the filter.",
            "$ref": "#/components/schemas/PaginationCommandPTO"
          },
          "sorting": {
            "description": "Sorting command. Sort fields are - 'glossaryName | createdDate | lastModifiedDate'",
            "$ref": "#/components/schemas/SortCommandPTO"
          }
        },
        "description": "Glossary filter that adds additional glossaries entry count property into the search glossaries by filter result."
      },
      "GetGlossariesWithEntriesCountByFilterCommandPTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GetGlossariesByFilterCommandPTO"
          },
          {
            "type": "object",
            "properties": {
              "includeEntriesCount": {
                "type": "boolean",
                "description": "Allow to exclude / include glossary entries count, for each  glossary that was found by the criteria."
              }
            },
            "description": "Glossary filter that adds additional glossaries entry count property into the search glossaries by filter result."
          }
        ]
      },
      "GlossarySearchResponsePTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GlossaryResponse"
          },
          {
            "type": "object",
            "properties": {
              "entriesCount": {
                "type": "integer",
                "format": "int32",
                "description": "Amount of entries in current glossary."
              }
            },
            "description": "Extends simple glossary response with additional entriesCount  count"
          }
        ]
      },
      "GlossarySearchListResponsePTO": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "description": "total glossaries amount"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GlossarySearchResponsePTO"
            }
          }
        }
      },
      "GlossaryEntriesCountsResponsePTO": {
        "type": "object",
        "properties": {
          "glossaryUid": {
            "type": "string",
            "description": "Glossary uid.",
            "example": "58966072-6569-4c22-930c-de906b7fb18d"
          },
          "entriesCount": {
            "type": "integer",
            "format": "int32",
            "description": "Glossary entries amount."
          },
          "blocklistsCount": {
            "type": "integer",
            "format": "int32",
            "description": "Attached blocklists amount."
          }
        },
        "description": "Result of the search/count operation. Show amount of  entries  blocklists ( attached ) to current glossary."
      },
      "GlossaryEntriesCountsSuccessResponsePTO": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "description": "total items amount"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GlossaryEntriesCountsResponsePTO"
            }
          }
        }
      },
      "CustomFieldValuesCommandPTO": {
        "type": "object",
        "required": [
          "fieldUid"
        ],
        "properties": {
          "fieldUid": {
            "type": "string",
            "description": "Uid of the custom-field. That is associated with the glossary entry.",
            "example": "c-field_1"
          },
          "fieldValue": {
            "type": "string",
            "description": "Field value to be assigned. NOTE: Please note that validation will be performed based on field-type. Field-type is external property in scope of 'glossary service', and may be retrieved using 'custom-fields-service'.",
            "example": "field string value short text"
          }
        },
        "description": "Custom field value command."
      },
      "GlossaryEntryTranslationCommandPTO": {
        "type": "object",
        "properties": {
          "localeId": {
            "type": "string",
            "description": "Translation locale id.",
            "example": "en"
          },
          "term": {
            "type": "string",
            "description": "Translation term. Max term length is equal to 250 characters.",
            "example": "en term"
          },
          "notes": {
            "type": "string",
            "description": "Translation notes. Max notes length is equal to 1500 characters."
          },
          "caseSensitive": {
            "type": "boolean",
            "description": "Translation caseSensitive."
          },
          "exactMatch": {
            "type": "boolean",
            "description": "Translation exactMatch."
          },
          "doNotTranslate": {
            "type": "boolean",
            "description": "Translation doNotTranslate."
          },
          "disabled": {
            "type": "boolean",
            "description": "Translation disabled."
          },
          "variants": {
            "type": "array",
            "description": "Translation synonyms/variations. Max length of single variation entry is 250 characters. Max amount of variations in current array is 50.",
            "items": {
              "type": "string"
            },
            "example": [
              "en synonym to the term"
            ]
          },
          "customFieldValues": {
            "type": "array",
            "description": "Translation assigned custom fields values.",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValuesCommandPTO"
            }
          }
        },
        "description": "Glossary entry translation command. Please note that one of 'term | note | disabled' property values are required ( disabled as true ), otherwise validation error ( code : 400 ) will be returned."
      },
      "GlossaryEntryCommandPTO": {
        "type": "object",
        "properties": {
          "definition": {
            "type": "string",
            "description": "Glossary entry definition. Max definition length is equal to 1500 characters."
          },
          "partOfSpeech": {
            "type": "string",
            "description": "Glossary entry part of speech.",
            "enum": [
              "Noun",
              "Verb",
              "Adjective",
              "Adverb",
              "Pronoun",
              "Preposition",
              "Interjection",
              "Conjunction",
              "Proper Noun"
            ],
            "example": "Noun"
          },
          "labelUids": {
            "type": "array",
            "description": "Glossary label uid to be associated.",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "example": [
              "bad90990-4be1-4570-81da-b719cddd5351",
              "bad90990-4be1-4570-81da-b719cddd5355"
            ]
          },
          "translations": {
            "type": "array",
            "description": "Glossary entry translations.  Please note:\n  - translations that were not passed into the current array but present ( update call ) will be removed\n      (as example we may consider search by filter which may return translations only for specified locales);\n  - each translation from the array should at least has not empty term or notes field, or disabled property marked as 'true',\n    otherwise 'validation error' ( code : 400 ) will be returned.",
            "items": {
              "$ref": "#/components/schemas/GlossaryEntryTranslationCommandPTO"
            }
          },
          "customFieldValues": {
            "type": "array",
            "description": "Assigned custom field values.",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValuesCommandPTO"
            }
          }
        }
      },
      "EntryCustomFieldValuePTO": {
        "type": "object",
        "properties": {
          "fieldUid": {
            "type": "string",
            "description": "Custom field uid.",
            "example": "c_field_1"
          },
          "fieldName": {
            "type": "string",
            "description": "Custom field name.",
            "example": "gender"
          },
          "fieldValue": {
            "type": "string",
            "description": "Custom field value.",
            "example": "unknown"
          }
        },
        "description": "Value of the assigned custom field. On glossary entry level."
      },
      "EntryTranslationCustomFieldValuePTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntryCustomFieldValuePTO"
          },
          {
            "type": "object",
            "properties": {
              "localeId": {
                "type": "string",
                "description": "Translation locale id, for which current custom filed value  belongs."
              }
            },
            "description": "Translation level custom field value."
          }
        ]
      },
      "EntryTranslationInProgressPTO": {
        "type": "object",
        "properties": {
          "localeId": {
            "type": "string",
            "description": "Locale id.",
            "example": "uk-UA"
          },
          "requestDateTime": {
            "type": "string",
            "description": "Translation request date-time.",
            "example": "2022-07-20T16:11:00Z"
          },
          "requestUserUid": {
            "type": "string",
            "description": "Translation request user uid.",
            "example": "671b520051b2"
          }
        },
        "description": "Holds meta-information about translation that is in progress."
      },
      "GlossaryEntryTranslationPTO": {
        "type": "object",
        "properties": {
          "localeId": {
            "type": "string",
            "description": "Translation locale id.",
            "example": "en"
          },
          "fallbackLocaleId": {
            "type": "string",
            "description": "Translation fallback locale id. Present only in case if fallback rules are configured, and current was mapped from the fallback."
          },
          "term": {
            "type": "string",
            "description": "Glossary translation term.",
            "example": "en term"
          },
          "notes": {
            "type": "string",
            "description": "Glossary translation notes."
          },
          "caseSensitive": {
            "type": "boolean",
            "description": "Glossary entry translation caseSensitive property."
          },
          "exactMatch": {
            "type": "boolean",
            "description": "Glossary entry translation exactMatch property."
          },
          "doNotTranslate": {
            "type": "boolean",
            "description": "Glossary entry translation doNotTranslate property."
          },
          "disabled": {
            "type": "boolean",
            "description": "Glossary entry translation disabled property."
          },
          "variants": {
            "type": "array",
            "description": "Term variants/synonyms.",
            "items": {
              "type": "string"
            },
            "example": [
              "en variation of the original term"
            ]
          },
          "customFieldValues": {
            "type": "array",
            "description": "Translation level, assigned custom fields values.",
            "items": {
              "$ref": "#/components/schemas/EntryTranslationCustomFieldValuePTO"
            }
          },
          "requestTranslationStatus": {
            "description": "Status/progress of the translation, in case if was requested.",
            "$ref": "#/components/schemas/EntryTranslationInProgressPTO"
          },
          "createdByUserUid": {
            "type": "string",
            "description": "Uid of the creator.",
            "example": "671b520051b2"
          },
          "modifiedByUserUid": {
            "type": "string",
            "description": "Uid of the user who has performed latest modification.",
            "example": "671b520051b2"
          },
          "createdDate": {
            "type": "string",
            "description": "Date of creation of the entry.",
            "example": "2021-07-20T13:19:46Z"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Entry last modification date.",
            "example": "2021-07-20T13:22:00Z"
          }
        },
        "description": "Glossary entry translation."
      },
      "GlossaryEntryBaseResponsePTO": {
        "type": "object",
        "properties": {
          "entryUid": {
            "type": "string",
            "description": "Glossary entry uid.",
            "example": "bac90990-4be1-4570-81da-b719cddd5352"
          },
          "glossaryUid": {
            "type": "string",
            "description": "Glossary uid.",
            "example": "aad90990-4be1-4570-81da-b719cddd5352"
          },
          "definition": {
            "type": "string",
            "description": "Glossary entry definition."
          },
          "partOfSpeech": {
            "type": "string",
            "description": "Glossary entry part of speech value.",
            "example": "Noun"
          },
          "labelUids": {
            "type": "array",
            "description": "Assigned label uuids.",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          },
          "translations": {
            "type": "array",
            "description": "Translations collection.",
            "items": {
              "$ref": "#/components/schemas/GlossaryEntryTranslationPTO"
            }
          },
          "customFieldValues": {
            "type": "array",
            "description": "Assigned custom field values.",
            "items": {
              "$ref": "#/components/schemas/EntryCustomFieldValuePTO"
            }
          },
          "archived": {
            "type": "boolean",
            "description": "Archived flag."
          },
          "createdByUserUid": {
            "type": "string",
            "description": "Uid of the creator.",
            "example": "671b520051b2"
          },
          "modifiedByUserUid": {
            "type": "string",
            "description": "Uid of the user who has performed latest modification.",
            "example": "671b520051b2"
          },
          "createdDate": {
            "type": "string",
            "description": "Date of creation of the entry.",
            "example": "2021-07-20T13:19:46Z"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Entry last modification date.",
            "example": "2021-07-20T13:22:46Z"
          }
        },
        "description": "Glossary entry response."
      },
      "EntryTranslationInProgressFullPTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntryTranslationInProgressPTO"
          },
          {
            "type": "object",
            "properties": {
              "projectId": {
                "type": "string",
                "description": "Project identifier. Project where translation has been submitted.",
                "example": "b488e1b42"
              },
              "hashCode": {
                "type": "string",
                "example": "7c364d1b2a22bce260027d6bc61580aa",
                "description": "Hash code of the submitted original string."
              },
              "jobUid": {
                "type": "string",
                "description": "Translation jobUid. Uid of the job where translation is taking place."
              }
            },
            "description": "Extends translation in progress data with additional properties ( projectId, hashcode, jobUid)."
          }
        ]
      },
      "GlossaryEntryDetailedResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GlossaryEntryBaseResponsePTO"
          },
          {
            "type": "object",
            "properties": {
              "requestTranslationStatuses": {
                "type": "object",
                "description": "Request translation details in detailed form. Please note that translation locale id will be used as a key.",
                "additionalProperties": {
                  "$ref": "#/components/schemas/EntryTranslationInProgressFullPTO"
                }
              }
            },
            "description": "Glossary entry response. Which provides translation request details in extended form."
          }
        ]
      },
      "GlossaryEntryDetailedResponsePTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/schemas-SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/GlossaryEntryDetailedResponse"
              }
            }
          }
        ]
      },
      "NoLabelsFilter": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "example": "empty"
          }
        },
        "description": "No labels filter / labels are missing filter. Use 'empty' as type property value."
      },
      "AnyLabelsFilter": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "example": "any"
          }
        },
        "description": "Any labels filter / labels - present filter. Use 'any' as type property value."
      },
      "AssociatedLabelsFilter": {
        "type": "object",
        "required": [
          "type",
          "labelUids"
        ],
        "properties": {
          "type": {
            "type": "string",
            "example": "associated"
          },
          "labelUids": {
            "type": "array",
            "description": "Label uuids collection for the filtering.",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "example": [
              "16ed66cc-accc-4bb5-9822-bc84e93429f9",
              "69dae398-96c2-45f6-9f0d-91470c3464b6"
            ]
          }
        },
        "description": "Associated labels filter. Use 'associated' as type property value."
      },
      "FilterByLabelsPTO": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/NoLabelsFilter"
          },
          {
            "$ref": "#/components/schemas/AnyLabelsFilter"
          },
          {
            "$ref": "#/components/schemas/AssociatedLabelsFilter"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "empty": "#/components/schemas/NoLabelsFilter",
            "any": "#/components/schemas/AnyLabelsFilter",
            "associated": "#/components/schemas/AssociatedLabelsFilter"
          }
        },
        "description": "Labels filter on glossary entry level. There are 3 subTypes :\n - empty -  allow to search for entries where no labels are assigned, as example - '{\"type\":\"empty\"}';\n - any - allow to search for entries where ant labels are assigned, as example - '{\"type\":\"any\"}';\n - associated - allow to search for entries where pre-selected labels are assigned, as example - '{\"type\":\"associated\", \"labelUids\":[\"\"16ed66cc-accc-4bb5-9822-bc84e93429f8\"\"]}'."
      },
      "AfterDateAuditionDateFilter": {
        "type": "object",
        "required": [
          "level",
          "date",
          "type"
        ],
        "properties": {
          "level": {
            "type": "string",
            "description": "Level on which filtering should be performed ( glossary entry /  glossary translation / or any ). ANY is default.",
            "enum": [
              "ENTRY",
              "LOCALE",
              "ANY"
            ],
            "example": "ANY"
          },
          "date": {
            "type": "string",
            "description": "Date-time value.",
            "example": "2023-02-01T11:45:00.000Z"
          },
          "type": {
            "example": "after"
          }
        },
        "description": "After date filter."
      },
      "BeforeDateAuditionDateFilter": {
        "type": "object",
        "required": [
          "level",
          "date",
          "type"
        ],
        "properties": {
          "level": {
            "type": "string",
            "description": "Level on which filtering should be performed ( glossary entry /  glossary translation / or any ). ANY is default.",
            "enum": [
              "ENTRY",
              "LOCALE",
              "ANY"
            ],
            "example": "ANY"
          },
          "date": {
            "type": "string",
            "description": "Date-time value.",
            "example": "2023-02-01T11:45:00.000Z"
          },
          "type": {
            "type": "string",
            "example": "before"
          }
        },
        "description": "Before date filter."
      },
      "DateRangeAuditionDateFilter": {
        "type": "object",
        "required": [
          "level",
          "from",
          "to",
          "type"
        ],
        "properties": {
          "level": {
            "type": "string",
            "description": "Level on which filtering should be performed ( glossary entry /  glossary translation / or any ). ANY is default.",
            "enum": [
              "ENTRY",
              "LOCALE",
              "ANY"
            ],
            "example": "ANY"
          },
          "from": {
            "type": "string",
            "description": "From date-time / range start.",
            "example": "2023-02-01T11:45:00.000Z"
          },
          "to": {
            "type": "string",
            "description": "To date-time / range end.",
            "example": "2023-02-11T11:45:00.000Z"
          },
          "type": {
            "type": "string",
            "example": "date_range"
          }
        },
        "description": "Date range filter."
      },
      "ExactDateAuditionDateFilter": {
        "type": "object",
        "required": [
          "level",
          "date",
          "type"
        ],
        "properties": {
          "level": {
            "type": "string",
            "description": "Level on which filtering should be performed ( glossary entry /  glossary translation / or any ). ANY is default.",
            "enum": [
              "ENTRY",
              "LOCALE",
              "ANY"
            ],
            "example": "ANY"
          },
          "date": {
            "type": "string",
            "description": "Date-time value.",
            "example": "2023-02-01T11:45:00.000Z"
          },
          "type": {
            "type": "string",
            "example": "exact"
          }
        },
        "description": "Exact date filter."
      },
      "AuditionDateCommandPTO": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/AfterDateAuditionDateFilter"
          },
          {
            "$ref": "#/components/schemas/BeforeDateAuditionDateFilter"
          },
          {
            "$ref": "#/components/schemas/DateRangeAuditionDateFilter"
          },
          {
            "$ref": "#/components/schemas/ExactDateAuditionDateFilter"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "after": "#/components/schemas/AfterDateAuditionDateFilter",
            "before": "#/components/schemas/BeforeDateAuditionDateFilter",
            "date_range": "#/components/schemas/DateRangeAuditionDateFilter",
            "exact": "#/components/schemas/ExactDateAuditionDateFilter"
          }
        },
        "description": "Audition date-time filter. Possible values :\n - after - after date-time filter, as example :  '{ \"type\": \"after\", \"level\":\"ANY\", \"date\":\"2023-02-01T11:45:00.000Z\" }';\n - before - before date-time filter, as example :  '{ \"type\": \"before\", \"level\":\"ANY\", \"date\":\"2023-02-01T11:45:00.000Z\" }';\n - date_range - date time in-range filter, as example :  '{ \"type\": \"date_range\", \"level\":\"ANY\", \"from\":\"2023-02-01T11:45:00.000Z\", \"to\":\"2023-03-01T11:45:00.000Z\" }';\n - exact - exact date time filter, as example :  '{ \"type\": \"before\", \"level\":\"ANY\", \"date\":\"2023-02-01T11:45:00.000Z\" }'."
      },
      "AuditorCommandPTO": {
        "type": "object",
        "required": [
          "level",
          "userIds"
        ],
        "properties": {
          "level": {
            "type": "string",
            "description": "Level on which filtering should be performed ( glossary entry /  glossary translation / or any ).",
            "enum": [
              "ENTRY",
              "LOCALE",
              "ANY"
            ],
            "example": "ANY"
          },
          "userIds": {
            "type": "array",
            "description": "User identifiers.",
            "items": {
              "type": "string"
            },
            "example": [
              "user1",
              "user2"
            ]
          }
        },
        "description": "Auditor user filter."
      },
      "GlossaryEntriesSortCommandPTO": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Sort field, select one of - term | createdDate | lastModifiedDate.",
            "enum": [
              "term",
              "createdDate",
              "lastModifiedDate"
            ],
            "example": "term"
          },
          "direction": {
            "type": "string",
            "description": "Sort direction.",
            "enum": [
              "ASC",
              "DESC"
            ],
            "example": "DESC"
          },
          "localeId": {
            "type": "string",
            "description": "Locale identifier - for case when 'term' sort field is selected.",
            "example": "uk-UA"
          }
        },
        "description": "Sorting options."
      },
      "GetGlossaryEntriesByFilterCommandPTO": {
        "type": "object",
        "required": [
          "entryState"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "Keyword search for translation of variants.",
            "example": "P&G term"
          },
          "localeIds": {
            "type": "array",
            "description": "Locales list for translation filtering.",
            "items": {
              "type": "string"
            },
            "example": [
              "uk-UA",
              "en",
              "en-US"
            ]
          },
          "entryUids": {
            "type": "array",
            "description": "Glossary entry uids filter.",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "example": [
              "16ed66cc-accc-4bb5-9822-bc84e93429f8",
              "69dae398-96c2-45f6-9f0d-91470c3464bd"
            ]
          },
          "entryState": {
            "type": "string",
            "description": "State of the glossary entry. ACTIVE will be used in case if omitted.",
            "enum": [
              "ACTIVE",
              "ARCHIVED",
              "BOTH"
            ],
            "example": "ACTIVE"
          },
          "missingTranslationLocaleId": {
            "type": "string",
            "description": "Additional locale id filter, which allow to find missing/empty translations.",
            "example": "uk-UA"
          },
          "presentTranslationLocaleId": {
            "type": "string",
            "description": "Additional locale id filter, which allow to find only present  translations.",
            "example": "uk-UA"
          },
          "dntLocaleId": {
            "type": "string",
            "description": "Additional locale id filter, which allow to find only DNT-marked translations.",
            "example": "uk-UA"
          },
          "returnFallbackTranslations": {
            "type": "boolean",
            "description": "For all translations, if they are missing, appropriate fallback locales will be used.",
            "example": false
          },
          "labels": {
            "description": "Labels filter.",
            "$ref": "#/components/schemas/FilterByLabelsPTO"
          },
          "dntTermSet": {
            "type": "boolean",
            "description": "Return entries where dnt term is set.",
            "example": false
          },
          "created": {
            "description": "Created date filter.",
            "$ref": "#/components/schemas/AuditionDateCommandPTO"
          },
          "lastModified": {
            "description": "Modified date filter.",
            "$ref": "#/components/schemas/AuditionDateCommandPTO"
          },
          "createdBy": {
            "description": "Created by user filter.",
            "$ref": "#/components/schemas/AuditorCommandPTO"
          },
          "lastModifiedBy": {
            "description": "modified by user filter",
            "$ref": "#/components/schemas/AuditorCommandPTO"
          },
          "paging": {
            "description": "Paging command.",
            "$ref": "#/components/schemas/PaginationCommandPTO"
          },
          "sorting": {
            "description": "Sorting command.",
            "$ref": "#/components/schemas/GlossaryEntriesSortCommandPTO"
          }
        },
        "description": "Glossary entries filter command."
      },
      "GlossaryEntryResponsePTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GlossaryEntryBaseResponsePTO"
          },
          {
            "type": "object",
            "properties": {
              "requestTranslationStatuses": {
                "type": "object",
                "description": "Request translation details in min form. Please note that translation locale id will be used as a key.",
                "additionalProperties": {
                  "$ref": "#/components/schemas/EntryTranslationInProgressPTO"
                }
              }
            },
            "description": "Glossary entry response. Which provides translation request details in minimal form."
          }
        ]
      },
      "EntriesSearchSuccessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "description": "total labels amount"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GlossaryEntryResponsePTO"
            }
          }
        }
      },
      "EntriesBulkActionCommandPTO": {
        "type": "object",
        "required": [
          "filter"
        ],
        "properties": {
          "filter": {
            "description": "Glossary entries filter.",
            "$ref": "#/components/schemas/GetGlossaryEntriesByFilterCommandPTO"
          }
        },
        "description": "Bulk action filter command."
      },
      "AsyncOperationResponse": {
        "type": "object",
        "properties": {
          "operationUid": {
            "type": "string",
            "description": "Uid of the async operation."
          }
        }
      },
      "AsyncOperationResponsePTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/schemas-SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/AsyncOperationResponse"
              }
            }
          }
        ]
      },
      "EntriesBulkUpdateLabelsCommandPTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntriesBulkActionCommandPTO"
          },
          {
            "type": "object",
            "required": [
              "labelUids"
            ],
            "properties": {
              "labelUids": {
                "type": "array",
                "description": "Labels identifiers.",
                "uniqueItems": true,
                "items": {
                  "type": "string"
                },
                "example": [
                  "69dae398-96c2-45f6-9f0d-91470c3464bd"
                ]
              }
            },
            "description": "Bulk action on glossary entry labels."
          }
        ]
      },
      "GlossaryEntriesExportCommandPTO": {
        "type": "object",
        "required": [
          "format",
          "filter",
          "localeIds"
        ],
        "properties": {
          "format": {
            "type": "string",
            "description": "Export format.",
            "enum": [
              "CSV",
              "XLSX",
              "TBX"
            ]
          },
          "tbxVersion": {
            "type": "string",
            "description": "TBX version-name, required when TBX format preselected.",
            "enum": [
              "TBXcoreStructV02",
              "TBXcoreStructV03"
            ]
          },
          "filter": {
            "description": "Glossary entries filter.",
            "$ref": "#/components/schemas/GetGlossaryEntriesByFilterCommandPTO"
          },
          "focusLocaleId": {
            "type": "string",
            "description": "First locale id in the export scope."
          },
          "localeIds": {
            "type": "array",
            "description": "Locales ids for the export.",
            "items": {
              "type": "string"
            }
          },
          "skipEntries": {
            "type": "boolean",
            "description": "Skip entries export if true; exports only headers ( template )."
          }
        },
        "description": "Export command with filtering properties and additional options."
      },
      "GlossaryImportCommandPTO": {
        "type": "object",
        "required": [
          "importFile",
          "importFileName",
          "importFileMediaType"
        ],
        "properties": {
          "archiveMode": {
            "type": "boolean",
            "description": "In case if {@code true} passed - all entries that are not in import file will be archived."
          },
          "importFile": {
            "type": "string",
            "format": "binary",
            "description": "Binary file data to upload."
          },
          "importFileName": {
            "type": "string",
            "description": "Name and extension of the import file."
          },
          "importFileMediaType": {
            "type": "string",
            "enum": [
              "text/csv",
              "text/xml",
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            ],
            "description": "Import file media type. One of 'text/csv |  text/xml | application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'"
          }
        },
        "description": "Glossary import command."
      },
      "GlossaryImport": {
        "type": "object",
        "properties": {
          "glossaryUid": {
            "type": "string",
            "format": "uuid",
            "description": "Glossary uid."
          },
          "importUid": {
            "type": "string",
            "format": "uuid",
            "description": "Import uid."
          },
          "importStatus": {
            "type": "string",
            "description": "Status of the import.",
            "example": "PENDING",
            "enum": [
              "PENDING",
              "IN_PROGRESS",
              "SUCCESSFUL",
              "FAILED"
            ]
          }
        },
        "description": "Glossary import process meta-data."
      },
      "ImportEntryChanges": {
        "type": "object",
        "properties": {
          "newEntries": {
            "type": "integer",
            "format": "int32",
            "description": "Amount of glossary entries to be created."
          },
          "existingEntryUpdates": {
            "type": "integer",
            "format": "int32",
            "description": "Amount of glossary entries to be updated."
          },
          "notMatchedEntries": {
            "type": "integer",
            "format": "int32",
            "description": "Amount of glossary entries that wont be updated."
          },
          "entriesToArchive": {
            "type": "integer",
            "format": "int32",
            "description": "Amount of glossary entries to be archived."
          }
        },
        "description": "Glossary entry change stats."
      },
      "ImportEntryTranslationChanges": {
        "type": "object",
        "properties": {
          "localeId": {
            "type": "string",
            "description": "Locale identifier.",
            "example": "en-US"
          },
          "newTranslations": {
            "type": "integer",
            "format": "int32",
            "description": "Amount of translations to be created."
          },
          "updatedTranslations": {
            "type": "integer",
            "format": "int32",
            "description": "Amount of translations to be updated."
          },
          "translationsToRemove": {
            "type": "integer",
            "format": "int32",
            "description": "Amount of translations to be removed."
          }
        },
        "description": "Glossary entry translations change stats."
      },
      "ImportWarning": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Warning key."
          },
          "message": {
            "type": "string",
            "description": "Warning message."
          }
        },
        "description": "Import related warning."
      },
      "GlossaryImportResponse": {
        "type": "object",
        "properties": {
          "glossaryImport": {
            "description": "GlossaryImport meta-data.",
            "$ref": "#/components/schemas/GlossaryImport"
          },
          "entryChanges": {
            "description": "Entry changes stats.",
            "$ref": "#/components/schemas/ImportEntryChanges"
          },
          "translationChanges": {
            "type": "array",
            "description": "Translation changes stats.",
            "items": {
              "$ref": "#/components/schemas/ImportEntryTranslationChanges"
            }
          },
          "warnings": {
            "type": "array",
            "description": "Import process warnings.",
            "items": {
              "$ref": "#/components/schemas/ImportWarning"
            }
          }
        },
        "description": "Glossary import meta-data."
      },
      "GlossaryImportResponsePTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/schemas-SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/GlossaryImportResponse"
              }
            }
          }
        ]
      },
      "GlossaryImportPTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/schemas-SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/GlossaryImport"
              }
            }
          }
        ]
      },
      "LocaleWorkflowPTO": {
        "type": "object",
        "required": [
          "localeId",
          "workflowUid"
        ],
        "properties": {
          "localeId": {
            "type": "string",
            "description": "Locale id.",
            "example": "en-US"
          },
          "workflowUid": {
            "type": "string",
            "description": "Workflow uid.",
            "example": "acd1"
          }
        }
      },
      "AuthorizeGlossaryEntriesPTO": {
        "type": "object",
        "required": [
          "filter",
          "localeWorkflows",
          "projectId",
          "sourceLocale"
        ],
        "properties": {
          "sourceLocale": {
            "type": "string",
            "description": "Source locale identifier. Basically, source locale of the project, both with localeId of the glossaryEntryTranslations to be authorized for translation."
          },
          "projectId": {
            "type": "string",
            "description": "Project id, where authorized content should be placed / where translation job will be created."
          },
          "filter": {
            "description": "Glossary entries filter. Filter for the data ( entries / entry-translations), which should be authorized.",
            "$ref": "#/components/schemas/GetGlossaryEntriesByFilterCommandPTO"
          },
          "localeWorkflows": {
            "type": "array",
            "description": "Locale / workflow pairs array for the authorization process.",
            "items": {
              "$ref": "#/components/schemas/LocaleWorkflowPTO"
            }
          }
        }
      },
      "GlossaryLabel": {
        "type": "object",
        "properties": {
          "labelUid": {
            "type": "string",
            "description": "label identifier.",
            "format": "uuid",
            "example": "e2debbe4-8be0-4552-b7b0-364c04a8a3c3"
          },
          "labelText": {
            "type": "string",
            "description": "Text of the label. Text max size is 50 characters.",
            "example": "glossaryLabel1"
          }
        },
        "description": "Glossary label representation."
      },
      "AccountGlossaryLabelsSuccessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "description": "total labels amount"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GlossaryLabel"
            }
          }
        }
      },
      "ManageGlossaryLabelCommandPTO": {
        "type": "object",
        "required": [
          "labelText"
        ],
        "properties": {
          "labelText": {
            "type": "string",
            "description": "Text of the label. Text max size is 50 characters."
          }
        },
        "description": "Glossary label manage command."
      },
      "GlossaryLabelPTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/schemas-SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/GlossaryLabel"
              }
            }
          }
        ]
      },
      "BlocklistCommandPTO": {
        "type": "object",
        "required": [
          "blocklistName",
          "glossaryUids"
        ],
        "properties": {
          "blocklistName": {
            "type": "string",
            "description": "Name of the blocklist. Character limit is equal to 170 characters.",
            "example": "My new blocklist"
          },
          "description": {
            "type": "string",
            "description": "Description of the blocklist. Character limit is equal to 250 characters.",
            "example": "Blocklist created for common terms in scope of 'my-project'"
          },
          "glossaryUids": {
            "type": "array",
            "description": "Associated glossary uids.",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "example": [
              "b45df55c-a5ae-4eda-857d-9c4b00526bc5",
              "b45df55c-a5ae-4eda-857d-9c4b00526bc1"
            ]
          }
        },
        "description": "Blocklist command."
      },
      "BlocklistResponse": {
        "type": "object",
        "properties": {
          "blocklistUid": {
            "type": "string",
            "description": "Blocklist uid.",
            "example": "98966072-6569-4c22-930c-de906b7fb18c"
          },
          "accountUid": {
            "type": "string",
            "description": "Account uid.",
            "example": "56a0b220"
          },
          "blocklistName": {
            "type": "string",
            "description": "Blocklist name.",
            "example": "Common-terms-to-block"
          },
          "description": {
            "type": "string",
            "description": "Blocklist description."
          },
          "glossaryUids": {
            "type": "array",
            "description": "Associated glossary uids.",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "example": [
              "b45df55c-a5ae-4eda-857d-9c4b00526bc5",
              "b45df55c-a5ae-4eda-857d-9c4b00526bc1"
            ]
          },
          "archived": {
            "type": "boolean",
            "description": "Blocklist archived. In case if {@code true} set, then blocklist is archived."
          },
          "createdByUserUid": {
            "type": "string",
            "description": "Uid of the blocklist creator.",
            "example": "671b520051b2"
          },
          "modifiedByUserUid": {
            "type": "string",
            "description": "Uid of the user who had last modified blocklist.",
            "example": "671b520051b2"
          },
          "createdDate": {
            "type": "string",
            "description": "Blocklist creation date.",
            "example": "2021-07-20T13:19:46Z"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Blocklist last modification date.",
            "example": "2021-07-20T13:19:46Z"
          }
        },
        "description": "Blocklist response."
      },
      "BlocklistResponsePTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/schemas-SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/BlocklistResponse"
              }
            }
          }
        ]
      },
      "BlocklistArchiveUnarchivedResponsePTO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "SUCCESS in case if operation was successfully performed,  NO_CONTENT in case if  operation was not performed.",
            "example": "SUCCESS"
          }
        },
        "description": "Result of the archive / restore operation on blocklist."
      },
      "BlocklistSortCommandPTO": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "enum": [
              "name",
              "createdDate",
              "lastModifiedDate"
            ],
            "description": "Sorting field."
          },
          "direction": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "Sorting direction."
          }
        },
        "description": "Sorting options for the filter."
      },
      "GetBlocklistByFilterCommandPTO": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Allow to search blocklists by query in scope of name or description property.",
            "example": "some name / description"
          },
          "blocklistState": {
            "type": "string",
            "description": "Blocklist state.",
            "enum": [
              "ACTIVE",
              "ARCHIVED",
              "BOTH"
            ],
            "example": "BOTH"
          },
          "glossaryUids": {
            "type": "array",
            "description": "Associated glossaryUids filter.",
            "items": {
              "type": "string"
            },
            "example": [
              "58966072-6569-4c22-930c-de906b7fb18d",
              "12366072-6569-4c22-930c-de906b7fb18d"
            ]
          },
          "paging": {
            "description": "Paging options for the filter.",
            "$ref": "#/components/schemas/PaginationCommandPTO"
          },
          "sorting": {
            "description": "Sorting command. Sort fields are - 'name | createdDate | lastModifiedDate'",
            "$ref": "#/components/schemas/BlocklistSortCommandPTO"
          }
        },
        "description": "Blocklist filter command.  "
      },
      "BlocklistSearchResponsePTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BlocklistResponse"
          },
          {
            "type": "object",
            "properties": {
              "termsCount": {
                "type": "integer",
                "format": "int32",
                "description": "Amount of blocklist-terms in current blocklist."
              },
              "associatedGlossaries": {
                "type": "integer",
                "format": "int32",
                "description": "Amount of glossaries associated with current blocklist."
              }
            },
            "description": "Extends simple blocklist response with additional properties."
          }
        ]
      },
      "BlocklistSearchListResponsePTO": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "description": "total blocklists amount"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlocklistSearchResponsePTO"
            }
          }
        }
      },
      "BlocklistTermCommandPTO": {
        "type": "object",
        "required": [
          "term"
        ],
        "properties": {
          "term": {
            "type": "string",
            "description": "Blocklist term. Max term length is equal to 250 characters.",
            "example": "some term to be blocked"
          },
          "notes": {
            "type": "string",
            "description": "Blocklist term. Max notes length is equal to 1500 characters."
          },
          "caseSensitive": {
            "type": "boolean",
            "description": "Term caseSensitive."
          },
          "exactMatch": {
            "type": "boolean",
            "description": "Term exactMatch."
          },
          "variants": {
            "type": "array",
            "description": "Term synonyms/variations. Max length of single variation entry is 250 characters. Max amount of variations in current array is 50.",
            "items": {
              "type": "string"
            },
            "example": [
              "en synonym to the term"
            ]
          },
          "preferredTerms": {
            "type": "array",
            "description": "Possible terms to be used instead of blocked. Max length of single variation entry is 250 characters. Max amount of variations in current array is 50.",
            "items": {
              "type": "string"
            },
            "example": [
              "some preferred term instead of current"
            ]
          },
          "localeIds": {
            "type": "array",
            "description": "Associated locale identifiers.",
            "items": {
              "type": "string"
            },
            "example": [
              "uk-UA",
              "en"
            ]
          }
        },
        "description": "Blocklist term command."
      },
      "BlocklistTermResponse": {
        "type": "object",
        "properties": {
          "termUid": {
            "type": "string",
            "description": "Blocklist term uid.",
            "example": "bac90990-4be1-4570-81da-b719cddd541#"
          },
          "blocklistUid": {
            "type": "string",
            "description": "Blocklist uid.",
            "example": "aad90990-4be1-4570-81da-b719cddd8152"
          },
          "term": {
            "type": "string",
            "description": "Blocked term itself."
          },
          "note": {
            "type": "string",
            "description": "Notes/ description of the term."
          },
          "caseSensitive": {
            "type": "boolean",
            "description": "Blocklist term caseSensitive property."
          },
          "exactMatch": {
            "type": "boolean",
            "description": "Blocklist term exactMatch property."
          },
          "variants": {
            "type": "array",
            "description": "Term variants/synonyms.",
            "items": {
              "type": "string"
            },
            "example": [
              "en variation of the original term"
            ]
          },
          "preferredTerms": {
            "type": "array",
            "description": "Suggested terms to be used instead of current.",
            "items": {
              "type": "string"
            },
            "example": [
              "suggested term 1",
              "suggested term 2"
            ]
          },
          "localeIds": {
            "type": "array",
            "description": "Associated locale identifiers.",
            "items": {
              "type": "string"
            },
            "example": [
              "en",
              "uk-UA"
            ]
          },
          "archived": {
            "type": "boolean",
            "description": "Archived flag."
          },
          "createdByUserUid": {
            "type": "string",
            "description": "Uid of the creator.",
            "example": "671b520051b2"
          },
          "modifiedByUserUid": {
            "type": "string",
            "description": "Uid of the user who has performed latest modification.",
            "example": "671b520051b2"
          },
          "createdDate": {
            "type": "string",
            "description": "Date of creation of the term.",
            "example": "2021-07-20T13:19:46Z"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Date of last modification of the term.",
            "example": "2021-07-20T13:22:46Z"
          }
        },
        "description": "Blocklist term response."
      },
      "BlocklistTermResponsePTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/schemas-SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/BlocklistTermResponse"
              }
            }
          }
        ]
      },
      "BlocklistTermArchiveUnarchivedResponsePTO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "SUCCESS in case if operation was successfully performed,  NO_CONTENT in case if  operation was not performed.",
            "example": "SUCCESS"
          }
        },
        "description": "Result of the archive / restore operation on blocklist term."
      },
      "BlocklistTermSortCommandPTO": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "enum": [
              "term",
              "createdDate",
              "lastModifiedDate"
            ],
            "description": "Sorting field."
          },
          "direction": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "Sorting direction."
          }
        },
        "description": "Sorting options for the filter."
      },
      "GetBlocklistTermByFilterCommandPTO": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Allow to search blocklists by query in scope of name or notes property.",
            "example": "some name / description"
          },
          "termState": {
            "type": "string",
            "description": "Blocklist term state.",
            "enum": [
              "ACTIVE",
              "ARCHIVED",
              "BOTH"
            ],
            "example": "BOTH"
          },
          "paging": {
            "description": "Paging options for the filter.",
            "$ref": "#/components/schemas/PaginationCommandPTO"
          },
          "sorting": {
            "description": "Sorting command. Sort fields are - 'term | createdDate | lastModifiedDate'",
            "$ref": "#/components/schemas/BlocklistTermSortCommandPTO"
          }
        },
        "description": "Blocklist filter command."
      },
      "BlocklistTermsSearchSuccessResponse": {
        "type": "object",
        "required": [
          "response"
        ],
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "description": "total blocklist terms amount"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlocklistTermResponsePTO"
            }
          }
        }
      },
      "BlocklistImportCommandPTO": {
        "type": "object",
        "required": [
          "importFile",
          "importFileName",
          "importFileMediaType"
        ],
        "properties": {
          "importFile": {
            "type": "string",
            "format": "binary",
            "description": "Binary file data to upload."
          },
          "importFileName": {
            "type": "string",
            "description": "Name and extension of the import file."
          },
          "importFileMediaType": {
            "type": "string",
            "enum": [
              "text/csv",
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            ],
            "description": "Import file media type. One of 'text/csv |  application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'."
          }
        },
        "description": "Blocklist import command."
      },
      "BlocklistImport": {
        "type": "object",
        "properties": {
          "blocklistUid": {
            "type": "string",
            "format": "uuid",
            "example": "bad90990-4be1-4570-81da-b719cddd5352",
            "description": "Blocklist uid."
          },
          "importUid": {
            "type": "string",
            "format": "uuid",
            "example": "939a4439-2ed0-4123-bc68-d188e4d664ab",
            "description": "Import uid."
          },
          "importStatus": {
            "type": "string",
            "description": "Status of the import.",
            "example": "PENDING",
            "enum": [
              "PENDING",
              "IN_PROGRESS",
              "SUCCESSFUL",
              "FAILED"
            ]
          }
        },
        "description": "Blocklist import process meta-data."
      },
      "ImportTermChanges": {
        "type": "object",
        "properties": {
          "newTerms": {
            "type": "integer",
            "format": "int32",
            "example": 50,
            "description": "Amount of blocklist terms to be created."
          },
          "existingTermUpdates": {
            "type": "integer",
            "format": "int32",
            "example": 100,
            "description": "Amount of blocklist terms to be updated."
          }
        },
        "description": "Blocklist term change stats."
      },
      "BlocklistImportResponse": {
        "type": "object",
        "properties": {
          "blocklistImport": {
            "description": "BlocklistImport meta-data.",
            "$ref": "#/components/schemas/BlocklistImport"
          },
          "termChanges": {
            "type": "array",
            "description": "Term changes stats.",
            "items": {
              "$ref": "#/components/schemas/ImportTermChanges"
            }
          }
        },
        "description": "Blocklist import meta-data."
      },
      "BlocklistImportResponsePTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/schemas-SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/BlocklistImportResponse"
              }
            }
          }
        ]
      },
      "BlocklistImportPTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/schemas-SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/BlocklistImport"
              }
            }
          }
        ]
      },
      "emptySubTypesAccountCheckTypeSettingsEffective": {
        "type": "object",
        "properties": {
          "subTypes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "checkSubTypeCode": {
                  "type": "string",
                  "description": "check subtype code",
                  "example": ""
                },
                "severityLevelCode": {
                  "type": "string",
                  "description": "check subtype code",
                  "example": ""
                }
              }
            }
          }
        }
      },
      "localeSeverityLevelsAccountCheckTypeSettingsEffective": {
        "type": "object",
        "properties": {
          "localeSeverityLevels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "targetLocaleId": {
                  "type": "string",
                  "description": "Smartling locale identifier of the translation",
                  "example": "it-IT"
                },
                "severityLevelCode": {
                  "type": "string",
                  "$ref": "#/components/schemas/severityLevelCodeEnum",
                  "description": "severity level code",
                  "example": "MEDIUM"
                }
              }
            }
          }
        }
      },
      "groupsAccountCheckTypeSettingsEffective": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "groupUid": {
                  "type": "string",
                  "description": "unique identifier of group",
                  "example": "12dsd344ds"
                }
              }
            }
          }
        }
      },
      "commonWithoutSubTypesResponseAccountCheckTypeSettingsEffective": {
        "allOf": [
          {
            "$ref": "#/components/schemas/severityLevelCodeResponse"
          },
          {
            "$ref": "#/components/schemas/emptySubTypesAccountCheckTypeSettingsEffective"
          },
          {
            "$ref": "#/components/schemas/localeSeverityLevelsAccountCheckTypeSettingsEffective"
          },
          {
            "$ref": "#/components/schemas/groupsAccountCheckTypeSettingsEffective"
          }
        ]
      },
      "AccountCheckTypeEffectiveDTO": {
        "title": "LEADING_TRAILING_SPACES",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithoutSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "type": "object",
            "required": [
              "checkTypeCode"
            ],
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "LEADING_TRAILING_SPACES"
                ],
                "description": "check type code",
                "example": "LEADING_TRAILING_SPACES"
              }
            }
          }
        ]
      },
      "OriginalEqualsTargetSettingsDTO": {
        "type": "object",
        "properties": {
          "mustHaveIdenticalTags": {
            "type": "boolean",
            "description": "Must have identical tags",
            "example": false
          },
          "mustHaveIdenticalCapitalization": {
            "type": "boolean",
            "description": "Must have identical capitalization",
            "example": true
          }
        }
      },
      "schemas-AccountCheckTypeEffectiveDTO": {
        "title": "ORIGINAL_EQUALS_TARGET",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithoutSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "$ref": "#/components/schemas/OriginalEqualsTargetSettingsDTO"
          },
          {
            "type": "object",
            "required": [
              "checkTypeCode"
            ],
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "ORIGINAL_EQUALS_TARGET"
                ],
                "description": "check type code",
                "example": "ORIGINAL_EQUALS_TARGET"
              }
            }
          }
        ]
      },
      "components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "WHITESPACES",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithoutSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "WHITESPACES"
                ],
                "description": "check type code",
                "example": "WHITESPACES"
              }
            }
          }
        ]
      },
      "SpellcheckSettingsDTO": {
        "type": "object",
        "properties": {
          "skipIfWordInUserDictionary": {
            "type": "boolean",
            "description": "Skip if word is in user dictionary.",
            "example": false
          },
          "skipIfWordStartsWithCapitalLetter": {
            "type": "boolean",
            "description": "Skip if word starts with capital letter.",
            "example": false
          },
          "skipIfWordAppearsInSourceString": {
            "type": "boolean",
            "description": "Skip if word appears in source string.",
            "example": false
          },
          "skipIfWordValidInSourceLocale": {
            "type": "boolean",
            "description": "Skip if word is valid in source locale.",
            "example": false
          },
          "runSpellcheckForSubWords": {
            "type": "boolean",
            "description": "Run spellchek for sub words.",
            "example": true
          }
        }
      },
      "spellcheck_components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "SPELLCHECK",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithoutSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "$ref": "#/components/schemas/SpellcheckSettingsDTO"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "SPELLCHECK"
                ],
                "description": "check type code",
                "example": "SPELLCHECK"
              }
            }
          }
        ]
      },
      "commonWithCustomSubTypesResponseAccountCheckTypeSettingsEffective": {
        "allOf": [
          {
            "$ref": "#/components/schemas/severityLevelCodeResponse"
          },
          {
            "$ref": "#/components/schemas/localeSeverityLevelsAccountCheckTypeSettingsEffective"
          },
          {
            "$ref": "#/components/schemas/groupsAccountCheckTypeSettingsEffective"
          }
        ]
      },
      "tag_consistency_components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "TAG_CONSISTENCY",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithCustomSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "TAG_CONSISTENCY"
                ],
                "description": "check type code",
                "example": "TAG_CONSISTENCY"
              },
              "subTypes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "checkSubTypeCode": {
                      "nullable": true,
                      "type": "string",
                      "enum": [
                        "TAG_ADDED",
                        "TAG_DELETED",
                        "SPACES_AROUND_TAGS",
                        "TAG_ORDER_IS_CHANGED"
                      ],
                      "description": "check subtype code",
                      "example": "TAG_ADDED"
                    },
                    "severityLevelCode": {
                      "nullable": true,
                      "type": "string",
                      "enum": [
                        "LOW",
                        "MEDIUM",
                        "HIGH",
                        "DISABLED"
                      ],
                      "description": "severity level code",
                      "example": "LOW"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "target_length_limit_components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "TARGET_LENGTH_LIMIT",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithoutSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "TARGET_LENGTH_LIMIT"
                ],
                "description": "check type code",
                "example": "TARGET_LENGTH_LIMIT"
              }
            }
          }
        ]
      },
      "ignoreSign": {
        "type": "object",
        "properties": {
          "ignoreSign": {
            "type": "boolean",
            "description": "Ignore sign.",
            "example": true
          }
        }
      },
      "number_consistency_components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "NUMBER_CONSISTENCY",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithCustomSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "$ref": "#/components/schemas/ignoreSign"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "NUMBER_CONSISTENCY"
                ],
                "description": "check type code",
                "example": "NUMBER_CONSISTENCY"
              },
              "subTypes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "checkSubTypeCode": {
                      "type": "string",
                      "enum": [
                        "NUMBER_ADDED",
                        "NUMBER_DELETED",
                        "NUMBER_INCORRECT_CONVERSION"
                      ],
                      "description": "check subtype code",
                      "example": "NUMBER_ADDED"
                    },
                    "severityLevelCode": {
                      "type": "string",
                      "enum": [
                        "LOW",
                        "MEDIUM",
                        "HIGH",
                        "DISABLED"
                      ],
                      "description": "severity level code",
                      "example": "LOW"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "repeated_word_components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "REPEATED_WORD",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithoutSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "REPEATED_WORD"
                ],
                "description": "check type code",
                "example": "REPEATED_WORD"
              }
            }
          }
        ]
      },
      "minTextLengthLimit": {
        "type": "object",
        "properties": {
          "minTextLengthLimit": {
            "type": "integer",
            "minimum": 0,
            "description": "Minimal text length limit.",
            "example": 10
          }
        }
      },
      "target_in_wrong_language_components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "TARGET_IN_WRONG_LANGUAGE",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithoutSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "$ref": "#/components/schemas/minTextLengthLimit"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "TARGET_IN_WRONG_LANGUAGE"
                ],
                "description": "check type code",
                "example": "TARGET_IN_WRONG_LANGUAGE"
              }
            }
          }
        ]
      },
      "SourceInWrongLanguageSettingsDTO": {
        "type": "object",
        "properties": {
          "minTextLengthLimit": {
            "type": "integer",
            "minimum": 0,
            "description": "Minimal text length limit.",
            "example": 10
          }
        }
      },
      "source_in_wrong_language_components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "SOURCE_IN_WRONG_LANGUAGE",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithoutSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "$ref": "#/components/schemas/SourceInWrongLanguageSettingsDTO"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "SOURCE_IN_WRONG_LANGUAGE"
                ],
                "description": "check type code",
                "example": "SOURCE_IN_WRONG_LANGUAGE"
              }
            }
          }
        ]
      },
      "SegmentCompletenessSettingsDTO": {
        "type": "object",
        "properties": {
          "lowerLengthThreshold": {
            "type": "integer",
            "description": "Lower length threshould",
            "example": 10
          },
          "upperLengthThreshold": {
            "type": "integer",
            "description": "Upper length threshould",
            "example": 20
          },
          "minLengthThreshold": {
            "type": "integer",
            "description": "Minimal lenght threshould",
            "example": 15
          }
        }
      },
      "segment_completeness_components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "SEGMENT_COMPLETENESS",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithCustomSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "$ref": "#/components/schemas/SegmentCompletenessSettingsDTO"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "SEGMENT_COMPLETENESS"
                ],
                "description": "check type code",
                "example": "SEGMENT_COMPLETENESS"
              },
              "subTypes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "checkSubTypeCode": {
                      "type": "string",
                      "enum": [
                        "TARGET_IS_EMPTY",
                        "TARGET_IS_MUCH_SHORTER_THAN_SOURCE",
                        "TARGET_IS_MUCH_LONGER_THAN_SOURCE"
                      ],
                      "description": "check subtype code",
                      "example": "TARGET_IS_EMPTY"
                    },
                    "severityLevelCode": {
                      "type": "string",
                      "enum": [
                        "LOW",
                        "MEDIUM",
                        "HIGH",
                        "DISABLED"
                      ],
                      "description": "severity level code",
                      "example": "LOW"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "non_translatable_text_components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "NON_TRANSLATABLE_TEXT",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithoutSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "NON_TRANSLATABLE_TEXT"
                ],
                "description": "check type code",
                "example": "NON_TRANSLATABLE_TEXT"
              },
              "subTypes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "checkSubTypeCode": {
                      "type": "string",
                      "nullable": true,
                      "enum": [
                        "PLACEABLE_ADDED",
                        "PLACEABLE_DELETED",
                        "SPACES_AROUND_PLACEABLE",
                        "PLACEABLE_FORMAT"
                      ],
                      "description": "check subtype code",
                      "example": "PLACEABLE_ADDED"
                    },
                    "severityLevelCode": {
                      "nullable": true,
                      "type": "string",
                      "enum": [
                        "LOW",
                        "MEDIUM",
                        "HIGH",
                        "DISABLED"
                      ],
                      "description": "severity level code",
                      "example": "LOW"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "EmojiConsistencySettingsDTO": {
        "type": "object",
        "properties": {
          "noEmojisAllowedInTarget": {
            "type": "boolean",
            "description": "No emoji is allowed in target",
            "example": false
          }
        }
      },
      "emoji_consistency_components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "EMOJI_CONSISTENCY",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithCustomSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "$ref": "#/components/schemas/EmojiConsistencySettingsDTO"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "EMOJI_CONSISTENCY"
                ],
                "description": "check type code",
                "example": "EMOJI_CONSISTENCY"
              },
              "subTypes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "checkSubTypeCode": {
                      "type": "string",
                      "enum": [
                        "EMOJI_ADDED",
                        "EMOJI_DELETED",
                        "EMOJI_PRESENT"
                      ],
                      "description": "check subtype code",
                      "example": "EMOJI_ADDED"
                    },
                    "severityLevelCode": {
                      "type": "string",
                      "enum": [
                        "LOW",
                        "MEDIUM",
                        "HIGH",
                        "DISABLED"
                      ],
                      "description": "severity level code",
                      "example": "LOW"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "insertable_consistency_components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "INSERTABLE_CONSISTENCY",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithCustomSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "INSERTABLE_CONSISTENCY"
                ],
                "description": "check type code",
                "example": "INSERTABLE_CONSISTENCY"
              },
              "subTypes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "checkSubTypeCode": {
                      "type": "string",
                      "enum": [
                        "INSERTABLE_ADDED",
                        "INSERTABLE_DELETED"
                      ],
                      "description": "check subtype code",
                      "example": "INSERTABLE_ADDED"
                    },
                    "severityLevelCode": {
                      "type": "string",
                      "enum": [
                        "LOW",
                        "MEDIUM",
                        "HIGH",
                        "DISABLED"
                      ],
                      "description": "severity level code",
                      "example": "LOW"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "SourceConsistencySettingsDTO": {
        "type": "object",
        "properties": {
          "ignoreTagsAndPlaceholders": {
            "type": "boolean",
            "description": "Ignore tags and placeholders.",
            "example": true
          },
          "ignoreCase": {
            "type": "boolean",
            "description": "Ignore case.",
            "example": false
          }
        }
      },
      "target_source_consistency_components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "TARGET_SOURCE_CONSISTENCY",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithCustomSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "$ref": "#/components/schemas/SourceConsistencySettingsDTO"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "TARGET_SOURCE_CONSISTENCY"
                ],
                "description": "check type code",
                "example": "TARGET_SOURCE_CONSISTENCY"
              },
              "subTypes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "checkSubTypeCode": {
                      "type": "string",
                      "enum": [
                        "SAME_SOURCE_DIFFERENT_TRANSLATIONS",
                        "SAME_TRANSLATION_DIFFERENT_SOURCES"
                      ],
                      "description": "check subtype code",
                      "example": "SAME_SOURCE_DIFFERENT_TRANSLATIONS"
                    },
                    "severityLevelCode": {
                      "type": "string",
                      "enum": [
                        "LOW",
                        "MEDIUM",
                        "HIGH",
                        "DISABLED"
                      ],
                      "description": "severity level code",
                      "example": "LOW"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "blacklisted_terms_components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "BLACKLISTED_TERMS",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithoutSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "BLACKLISTED_TERMS"
                ],
                "description": "check type code",
                "example": "BLACKLISTED_TERMS"
              }
            }
          }
        ]
      },
      "GlossaryComplianceSettingsDTO": {
        "type": "object",
        "properties": {
          "matchMethod": {
            "type": "string",
            "enum": [
              "MATCH_BY_PERCENTAGE",
              "EXACT_MATCH",
              "LEXICAL_ANALYSIS"
            ],
            "description": "[Match method.](#operation/getGlossaryComplianceMatchMethods)",
            "example": "MATCH_BY_PERCENTAGE"
          },
          "matchThreshold": {
            "type": "integer",
            "description": "Match threshold.",
            "minimum": 0,
            "maximum": 100,
            "example": 10
          }
        }
      },
      "glossary_compliance_components-schemas-AccountCheckTypeEffectiveDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithoutSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "$ref": "#/components/schemas/GlossaryComplianceSettingsDTO"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "GLOSSARY_COMPLIANCE"
                ],
                "description": "check type code",
                "example": "GLOSSARY_COMPLIANCE"
              }
            }
          }
        ]
      },
      "trademark_consistency_components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "TRADEMARK_CONSISTENCY",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithoutSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "TRADEMARK_CONSISTENCY"
                ],
                "description": "check type code",
                "example": "TRADEMARK_CONSISTENCY"
              }
            }
          }
        ]
      },
      "grammar_check_components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "GRAMMAR_CHECK",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithoutSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "GRAMMAR_CHECK"
                ],
                "description": "check type code",
                "example": "GRAMMAR_CHECK"
              }
            }
          }
        ]
      },
      "global_capitalisation_consistency_components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "GLOBAL_CAPITALISATION_CONSISTENCY",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithoutSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "GLOBAL_CAPITALISATION_CONSISTENCY"
                ],
                "description": "check type code",
                "example": "GLOBAL_CAPITALISATION_CONSISTENCY"
              }
            }
          }
        ]
      },
      "punctuation_consistency_components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "PUNCTUATION_CONSISTENCY",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithoutSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "PUNCTUATION_CONSISTENCY"
                ],
                "description": "check type code",
                "example": "PUNCTUATION_CONSISTENCY"
              }
            }
          }
        ]
      },
      "plurals_repetition_components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "PLURALS_REPETITION",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithoutSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "type": "object",
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "PLURALS_REPETITION"
                ],
                "description": "check type code",
                "example": "PLURALS_REPETITION"
              }
            }
          }
        ]
      },
      "OpenIssuesSettingsDTO": {
        "type": "object",
        "properties": {
          "sourceIssuesMustBeResolved": {
            "type": "boolean",
            "description": "All source issues must be resolved",
            "example": false
          },
          "translationIssuesMustBeResolved": {
            "type": "boolean",
            "description": "All translation issues must be resolved",
            "example": true
          }
        }
      },
      "open_issues_components-schemas-AccountCheckTypeEffectiveDTO": {
        "title": "OPEN_ISSUES",
        "allOf": [
          {
            "$ref": "#/components/schemas/commonWithoutSubTypesResponseAccountCheckTypeSettingsEffective"
          },
          {
            "$ref": "#/components/schemas/OpenIssuesSettingsDTO"
          },
          {
            "type": "object",
            "required": [
              "checkTypeCode"
            ],
            "properties": {
              "checkTypeCode": {
                "type": "string",
                "enum": [
                  "OPEN_ISSUES"
                ],
                "description": "check type code",
                "example": "OPEN_ISSUES"
              }
            }
          }
        ]
      }
    },
    "responses": {
      "Error400ResponseDefinition": {
        "description": "Provided request parameters are invalid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error400Response"
            },
            "examples": {
              "response": {
                "value": {
                  "response": {
                    "code": "VALIDATION_ERROR",
                    "errors": [
                      {
                        "key": "unknown.field",
                        "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                        "details": {}
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "Error401ResponseDefinition": {
        "description": "Provided credentials are not valid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error401Response"
            },
            "examples": {
              "response": {
                "value": {
                  "response": {
                    "code": "AUTHENTICATION_ERROR",
                    "errors": [
                      {
                        "key": "invalid_token",
                        "details": {},
                        "message": "Invalid token"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "Error429ResponseDefinition": {
        "description": "Too many simultaneous API requests.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error429Response"
            },
            "examples": {
              "response": {
                "value": {
                  "response": {
                    "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                    "errors": [
                      {
                        "key": "too.many.requests",
                        "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "Error500ResponseDefinition": {
        "description": "Unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error500Response"
            }
          }
        }
      },
      "responses-Error401ResponseDefinition": {
        "description": "Provided credentials are not valid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemas-Error401Response"
            },
            "examples": {
              "response": {
                "value": {
                  "response": {
                    "code": "AUTHENTICATION_ERROR",
                    "errors": [
                      {
                        "key": "invalid_token",
                        "details": {},
                        "message": "Invalid token"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "responses-Error429ResponseDefinition": {
        "description": "Too many simultaneous API requests.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemas-Error429Response"
            },
            "examples": {
              "response": {
                "value": {
                  "response": {
                    "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                    "errors": [
                      {
                        "key": "too.many.requests",
                        "message": "The limit of 10 concurrent Smartling file API operations for this project has been exceeded."
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "responses-Error500ResponseDefinition": {
        "description": "Unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemas-Error500Response"
            }
          }
        }
      },
      "responses-Error400ResponseDefinition": {
        "description": "Provided request parameters are invalid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemas-Error400Response"
            },
            "examples": {
              "response": {
                "value": {
                  "response": {
                    "code": "VALIDATION_ERROR",
                    "errors": [
                      {
                        "key": "not.found",
                        "message": "mtUid jtcorrr3 not found",
                        "details": {
                          "mtUid": "jtcorrr3"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "components-responses-Error400ResponseDefinition": {
        "description": "Provided request parameters are invalid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemas-Error400Response"
            },
            "examples": {
              "response": {
                "value": {
                  "response": {
                    "code": "VALIDATION_ERROR",
                    "errors": [
                      {
                        "key": "unknown.field",
                        "message": "The field unknown.parameter was not expected. Please consult the documentation to verify the fields you are submitting.",
                        "details": {}
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "g_common_components-responses-Error400ResponseDefinition": {
        "description": "Provided request parameters are invalid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemas-Error400Response"
            },
            "examples": {
              "response": {
                "value": {
                  "response": {
                    "code": "VALIDATION_ERROR",
                    "errors": {
                      "key": "error.key",
                      "message": "message that describes the error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "components-responses-Error401ResponseDefinition": {
        "description": "Provided credentials are not valid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemas-Error401Response"
            },
            "examples": {
              "response": {
                "value": {
                  "response": {
                    "code": "AUTHENTICATION_ERROR",
                    "errors": {
                      "details": {},
                      "key": "invalid_token",
                      "message": "Invalid token"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Error403ResponseDefinition": {
        "description": "Access denied.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error403Response"
            },
            "examples": {
              "response": {
                "value": {
                  "response": {
                    "code": "ACCESS_DENIED_ERROR",
                    "errors": {
                      "key": "no.access",
                      "message": "access denied message"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Error404ResponseDefinition": {
        "description": "Resource not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemas-Error404Response"
            },
            "examples": {
              "response": {
                "value": {
                  "response": {
                    "code": "NOT_FOUND_ERROR",
                    "errors": {
                      "key": "not.found",
                      "message": "message describing not found resource"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "components-responses-Error429ResponseDefinition": {
        "description": "Too many simultaneous API requests.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemas-Error429Response"
            },
            "examples": {
              "response": {
                "value": {
                  "response": {
                    "code": "MAX_OPERATIONS_LIMIT_EXCEEDED",
                    "errors": {
                      "key": "too.many.requests",
                      "message": "limitation message"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "components-responses-Error500ResponseDefinition": {
        "description": "Unexpected error.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/components-schemas-Error500Response"
            }
          }
        }
      }
    },
    "parameters": {
      "accountUid": {
        "name": "accountUid",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "The account’s unique identifier. This can be found in the Smartling Dashboard under Account Settings > API."
      },
      "accountUidPathParameter": {
        "name": "accountUid",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "A unique account identifier. This can be found in the Smartling Dashboard under Account Settings > API."
      },
      "fileUidPathParameter": {
        "name": "fileUid",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "Unique identifier of the uploaded file."
      },
      "mtUidPathParameter": {
        "name": "mtUid",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Unique identifier of machine translation action triggered on a file."
      },
      "languageDetectionUidPathParameter": {
        "name": "languageDetectionUid",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Unique identifier of language detection action triggered on a file."
      },
      "profileUidPathParameter": {
        "name": "profileUid",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Unique identifier of corresponding profile."
      },
      "checkTypeCodePathParameter": {
        "name": "checkTypeCode",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "$ref": "#/components/schemas/checkTypeCodeEnum"
        },
        "description": "[check type code](#operation/getTranslationQualityCheckTypes)"
      },
      "checkTypeCodeOnlyWithSubtypesPathParameter": {
        "name": "checkTypeCode",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "$ref": "#/components/schemas/checkTypeCodeOnlyWithSubtypesEnum"
        },
        "description": "[check type code](#operation/getTranslationQualityCheckTypes)"
      },
      "groupUidPathParameter": {
        "name": "groupUid",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "Unique identifier of corresponding group."
      },
      "checkSubTypeCodePathParameter": {
        "name": "checkSubTypeCode",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "$ref": "#/components/schemas/checkSubtypeEnum"
        },
        "description": "[check subtype code](#operation/getTranslationQualityCheckSubTypes)"
      },
      "parameters-accountUidPathParameter": {
        "name": "accountUid",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "A unique account identifier. This can be found in the Smartling Dashboard under Account Settings - API."
      },
      "glossaryUidPathParameter": {
        "name": "glossaryUid",
        "in": "path",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "required": true,
        "description": "Unique identifier of the glossary."
      },
      "entryUidPathParameter": {
        "name": "entryUid",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "description": "Unique identifier of the glossary entry."
      },
      "importUidPathParameter": {
        "name": "importUid",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "description": "Unique identifier of the glossary-import.",
        "example": "69dae398-96c2-45f6-9f0d-91470c3464bd"
      },
      "labelPathParameter": {
        "name": "labelUid",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "description": "Unique label identifier.",
        "example": "69dae398-96c2-45f6-9f0d-91470c3464bd"
      },
      "blocklistUidPathParameter": {
        "name": "blocklistUid",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "description": "Unique identifier of the blocklist."
      },
      "termUidPathParameter": {
        "name": "termUid",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "description": "Unique identifier of the blocklist term."
      },
      "exportFormat": {
        "name": "format",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "CSV",
            "XLSX"
          ]
        },
        "required": true,
        "example": "CSV",
        "description": "Export format, one of CSV, XLSX."
      },
      "skipEntriesParam": {
        "name": "skipEntries",
        "in": "query",
        "schema": {
          "type": "boolean"
        },
        "required": false,
        "description": "Will export template ( headers ) only in case if - value set to true."
      }
    }
  }
}